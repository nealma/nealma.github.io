<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nealma.com</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nealma.com/"/>
  <updated>2016-11-17T18:43:49.000Z</updated>
  <id>http://www.nealma.com/</id>
  
  <author>
    <name>马英乘Neal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring-Boot（八) 多环境和logback配置</title>
    <link href="http://www.nealma.com/2016/11/04/spring-boot-8-multiple-environment/"/>
    <id>http://www.nealma.com/2016/11/04/spring-boot-8-multiple-environment/</id>
    <published>2016-11-04T03:46:45.000Z</published>
    <updated>2016-11-17T18:43:49.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>我们在做开发的时候，都是使用本地数据库，本地缓存服务器，也只有我们一个人来开发，
这是我们最最初级的场景，在实际工作中，我们不可能只有一个环境。通常会有Test,Dev,
Live环境，Dev是我们的开发环境，Test作为我们的测试环境，Live是生产环境。每个
环境都有自己的服务器地址和端口，所以后面就是这次要解决的问题了...
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>我们在做开发的时候，都是使用本地数据库，本地缓存服务器，也只有我们一个人来开发，
这是我们最最初级的场景，在实际工作中，我们不可能只有一个环境。通常会有Test,Dev,
Live环境，Dev是我们的开发环境，Test作为我们的测试环境，Live是生产环境。每个
环境都有自己的服务器地址和端口，所以后面就是这次要解决的问题了...
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA<br>Build: Maven</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre><code>其实都基本相同，多环境无外乎就是把不同的值存放在不同的配置文件中，在编译打包的时候，
根据配置的指令选择对应的配置文件，这里指定的配置文件是要满足一定的格式的，这这里
application-{profile}.properties，profile就是我们刚才定义的dev,test,live。

application-dev.properties 开发
application-test.properties 测试
application-live.properties 生产
</code></pre><h3 id="超级简单"><a href="#超级简单" class="headerlink" title="超级简单"></a>超级简单</h3><ul>
<li>在application.properties文件里加入如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.properties.active=dev</div></pre></td></tr></table></figure>
<p>application-dev.properties内容<br>server.port=8080</p>
<p>application-test.properties内容<br>server.port=8081</p>
<p>application-live.properties内容<br>server.port=8082</p>
<p>执行 mvn spring-boot:run ，这时候你会看到，你的应用端口号是跟spring.properties.active的值一致的</p>
<p>其他的，比如数据host，username，password等都是一样的设置方法。</p>
<h3 id="以logback配置为栗子"><a href="#以logback配置为栗子" class="headerlink" title="以logback配置为栗子"></a>以logback配置为栗子</h3><ul>
<li><p>logback-spring.xml 替换 logback.xml</p>
<p>   Spring Boot 支持特有的属性，也建议使用logback-spring.xml命名</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;include resource=&quot;org/springframework/boot/logging/logback/base.xml&quot; /&gt;</div><div class="line">    &lt;springProfile name=&quot;dev,test&quot;&gt;</div><div class="line">        &lt;logger name=&quot;com.yourdomain&quot; level=&quot;DEBUG&quot; additivity=&quot;false&quot;&gt;</div><div class="line">            &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;</div><div class="line">        &lt;/logger&gt;</div><div class="line">    &lt;/springProfile&gt;</div><div class="line">    &lt;springProfile name=&quot;live&quot;&gt;</div><div class="line">        &lt;logger name=&quot;com.yourdomain&quot; level=&quot;WARN&quot; additivity=&quot;false&quot;&gt;</div><div class="line">            &lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class="line">        &lt;/logger&gt;</div><div class="line">    &lt;/springProfile&gt;</div><div class="line">    &lt;logger name=&quot;org.springframework&quot; level=&quot;WARN&quot; additivity=&quot;false&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class="line">    &lt;/logger&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p>执行 mvn spring-boot:run ，这时候你会看到，springProfile name是跟spring.properties.active的值一致的</p>
<h3 id="jar-运行"><a href="#jar-运行" class="headerlink" title="jar 运行"></a>jar 运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java －jar xxx.jar --spring.profiles.active=dev</div></pre></td></tr></table></figure>
<p>这种形式，可以把–后面的值传递给Spring Boot，优先级高于properties配置文件，即会覆盖。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>今天坐地铁，把这本书献给你们吧！
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;我们在做开发的时候，都是使用本地数据库，本地缓存服务器，也只有我们一个人来开发，
这是我们最最初级的场景，在实际工作中，我们不可能只有一个环境。通常会有Test,Dev,
Live环境，Dev是我们的开发环境，Test作为我们的测试环境，Live是生产环境。每个
环境都有自己的服务器地址和端口，所以后面就是这次要解决的问题了...
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.nealma.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Profile" scheme="http://www.nealma.com/tags/Profile/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（九) 微服务发布、部署</title>
    <link href="http://www.nealma.com/2016/11/04/spring-boot-9-package-and-deploy/"/>
    <id>http://www.nealma.com/2016/11/04/spring-boot-9-package-and-deploy/</id>
    <published>2016-11-04T03:46:45.000Z</published>
    <updated>2016-11-21T01:21:33.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>有关部署，我们平时最多的就是package成war，然后放到Tomcat的webappp路径下，
Spring Boot 提供了直接打包成fat-jar或者war的功能，很方便...
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>有关部署，我们平时最多的就是package成war，然后放到Tomcat的webappp路径下，
Spring Boot 提供了直接打包成fat-jar或者war的功能，很方便...
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA<br>Build: Maven</p>
<h3 id="Web项目，注意"><a href="#Web项目，注意" class="headerlink" title="Web项目，注意"></a>Web项目，注意</h3><pre><code>如果是Web项目，使用的thymeleaf模版，那么你的静态资源和模版文件都是放在了默认的目录，如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">src/main/resources</div><div class="line">├── static</div><div class="line">│   ├── favicon.png</div><div class="line">│   └── web</div><div class="line">└── templates</div><div class="line">    ├── error</div><div class="line">    └── web</div></pre></td></tr></table></figure>
<pre><code>很简单，直接如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mvn clean package </div><div class="line">java －jar xxx.jar</div></pre></td></tr></table></figure>
<pre><code>如果你变更了静态资源和模版的目录，此时这种方式运行是有问题的，找不到leaf的模版文件。
需要更改默认配置为你现在对应的目录结构，具体如何做，我还没试过，如果你有实践过，
可以回复我，谢谢...
//TODO:
</code></pre><h3 id="传统war，tomcat容器"><a href="#传统war，tomcat容器" class="headerlink" title="传统war，tomcat容器"></a>传统war，tomcat容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#打包成war</div><div class="line">mvn clean package</div><div class="line"></div><div class="line">#删除tomcat_home/webapps下的所有文件</div><div class="line">rm -rf tomcat_home/webapps/*</div><div class="line"></div><div class="line">#把war包copy到tomcat_home/webapps下</div><div class="line">mv project.war tomcat_home/webapps/ROOT.war</div><div class="line"></div><div class="line">sh tomcat_home/bin/startup.sh</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;有关部署，我们平时最多的就是package成war，然后放到Tomcat的webappp路径下，
Spring Boot 提供了直接打包成fat-jar或者war的功能，很方便...
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.nealma.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Deploy" scheme="http://www.nealma.com/tags/Deploy/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（七) Thymeleaf 模版引擎</title>
    <link href="http://www.nealma.com/2016/11/03/spring-boot-7-thymeleaf/"/>
    <id>http://www.nealma.com/2016/11/03/spring-boot-7-thymeleaf/</id>
    <published>2016-11-03T03:46:45.000Z</published>
    <updated>2016-11-20T05:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>模版引擎千千万，今个说说Thymeleaf，主要是不想在混用jsp标签和使用jsp后缀文件，
直接使用html文件，便于前后端分离。
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>模版引擎千千万，今个说说Thymeleaf，主要是不想在混用jsp标签和使用jsp后缀文件，
直接使用html文件，便于前后端分离。
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA<br>Build: Maven</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><pre><code>Spring Boot天生内置了对Thymeleaf的支持，简化了配置，加速开发。只需要引入如下
</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> &lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>在application.properties文件里加入如下
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#thymeleaf</div><div class="line">#我倾向于放在webapp/WEB-INF的目录下,spring.thymeleaf.prefix=/templates</div><div class="line">spring.thymeleaf.prefix=classpath:/templates/</div><div class="line">spring.thymeleaf.suffix=.html</div><div class="line">spring.thymeleaf.mode=HTML5</div><div class="line">spring.thymeleaf.encoding=UTF-8</div><div class="line">spring.thymeleaf.content-type=text/html</div></pre></td></tr></table></figure>
<pre><code>在src/main/resources/templates/文件夹下，存放你的模版文件,其实在应用启动的时候，
TemplateEngine，ThymeleafViewResolver会自用实例化。
</code></pre><h3 id="空间指定"><a href="#空间指定" class="headerlink" title="空间指定"></a>空间指定</h3><pre><code>没有指定空间，总是飘红，还是加上吧
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;</div><div class="line">      xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</div></pre></td></tr></table></figure>
<h3 id="最简用例"><a href="#最简用例" class="headerlink" title="最简用例"></a>最简用例</h3><ul>
<li>Controller</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *</div><div class="line"> * 商品信息</div><div class="line"> */</div><div class="line">@RestController</div><div class="line">public class GoodsPageController extends BaseController &#123;</div><div class="line">    /**</div><div class="line">     * 商品列表</div><div class="line">     */</div><div class="line">    @RequestMapping(value = &#123;&quot;/goods/list&quot;&#125;, method = RequestMethod.GET)</div><div class="line">    @PermitAll</div><div class="line">    public ModelAndView list(Model model) &#123;</div><div class="line">        LOGGER.info(&quot;|--&gt; &#123;&#125;&quot;, this.getRequest().getRequestURI());</div><div class="line">        model.addAttribute(&quot;name&quot;, &quot;neal&quot;);</div><div class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</div><div class="line">        map.put(&quot;id&quot;, 1);</div><div class="line">        map.put(&quot;title&quot;, &quot;小怪兽来了&quot;);</div><div class="line">        Map&lt;String, Object&gt; map1 = new HashMap&lt;&gt;();</div><div class="line">        map1.put(&quot;id&quot;, 2);</div><div class="line">        map1.put(&quot;title&quot;, &quot;小怪兽来了&quot;);</div><div class="line">        model.addAttribute(&quot;list&quot;, Arrays.asList(new Object[]&#123;map,map1&#125;));</div><div class="line">        return new ModelAndView(&quot;/index&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建src/main/resources/templates/index.html</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;</div><div class="line">      xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;/&gt;</div><div class="line">    &lt;title&gt;Thymeleaf Mini Demo&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">Hello, &lt;b th:text=&quot;$&#123;name&#125;&quot;&gt;Name&lt;/b&gt;</div><div class="line">&lt;div th:each=&quot;item:$&#123;list&#125;&quot;&gt;</div><div class="line">    &lt;b th:text=&quot;$&#123;item.id&#125;&quot;&gt;ID&lt;/b&gt;</div><div class="line">    &lt;b th:text=&quot;$&#123;item.title&#125;&quot;&gt;Title&lt;/b&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>使用过程中，发现thymeleaf对于html的语法要求的很严格，每个标签都要有结束tag。我的一个页面
&lt;link &gt; &lt;img&gt; 没有&quot;/&quot;,导致报错；还有就是属性必须是&quot;=&quot;,即key=value, 在input中我使用了disable,结果报错了
于是改成disable=&quot;disable&quot;.
</code></pre><h3 id="更新日志-1"><a href="#更新日志-1" class="headerlink" title="更新日志 1"></a>更新日志 1</h3><pre><code>有的时候，老项目移植到新项目的时候，好多都不是严格的html，一个一个盖起来，费时又费力，当然如果有时间，
还是建议使用严格格式。现在有一个偷懒的方法，就是做如下修改：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#非严格标准</div><div class="line">spring.thymeleaf.mode=LEGACYHTML5</div></pre></td></tr></table></figure>
<pre><code>除了这个，还需要额外的增加依赖
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 非标准HTML5 --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;net.sourceforge.nekohtml&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;nekohtml&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.9.22&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="更新日志-2"><a href="#更新日志-2" class="headerlink" title="更新日志 2"></a>更新日志 2</h3><pre><code>thymeleaf的默认静态资源结构, static作为默认静态资源的根路径
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">src/main/resources</div><div class="line">├── static</div><div class="line">│   ├── favicon.png</div><div class="line">│   └── web</div><div class="line">└── templates</div><div class="line">    ├── error</div><div class="line">    └── web</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;模版引擎千千万，今个说说Thymeleaf，主要是不想在混用jsp标签和使用jsp后缀文件，
直接使用html文件，便于前后端分离。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.nealma.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Template" scheme="http://www.nealma.com/tags/Template/"/>
    
      <category term="Thymeleaf" scheme="http://www.nealma.com/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（六) Spring Session 分布式会话管理</title>
    <link href="http://www.nealma.com/2016/11/01/spring-boot-6-spring-session/"/>
    <id>http://www.nealma.com/2016/11/01/spring-boot-6-spring-session/</id>
    <published>2016-11-01T03:46:45.000Z</published>
    <updated>2016-11-17T01:54:06.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>使用Spring Security的时候，觉得省了好多的事情。但是它使用的是内存来存储CurrentUser的信息
和登录凭证，一旦单机不能承受大用户量，就需要水平扩展，就会涉及到session的问题。怎么才能实现
平滑扩展呢？还好有Sping Session，怎么用呢？
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>使用Spring Security的时候，觉得省了好多的事情。但是它使用的是内存来存储CurrentUser的信息
和登录凭证，一旦单机不能承受大用户量，就需要水平扩展，就会涉及到session的问题。怎么才能实现
平滑扩展呢？还好有Sping Session，怎么用呢？
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA<br>Build: Maven</p>
<h3 id="Spring-Session-是什么"><a href="#Spring-Session-是什么" class="headerlink" title="Spring Session 是什么"></a>Spring Session 是什么</h3><pre><code>其实也不是什么新鲜的事儿？我们在实现用户登录，授权的时候，最初是web场景，我们只需要在Cookies中
操作即可，现在我们面临移动端、open API等多种场景，单纯的Cookies已经不满足或者不能优雅的体现Restful
风格，此时需要在Header上动手脚，也就是把原来存放在Cookies中的信息移到了Header中，换汤不换药
</code></pre><h3 id="在Web中使用CookieHttpSessionStrategy"><a href="#在Web中使用CookieHttpSessionStrategy" class="headerlink" title="在Web中使用CookieHttpSessionStrategy"></a>在Web中使用CookieHttpSessionStrategy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> HttpSessionStrategy <span class="title">httpSessionStrategy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CookieHttpSessionStrategy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在Header中使用HeaderHttpSessionStrategy"><a href="#在Header中使用HeaderHttpSessionStrategy" class="headerlink" title="在Header中使用HeaderHttpSessionStrategy"></a>在Header中使用HeaderHttpSessionStrategy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> HttpSessionStrategy <span class="title">httpSessionStrategy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HeaderHttpSessionStrategy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Session-外部存储"><a href="#Session-外部存储" class="headerlink" title="Session 外部存储"></a>Session 外部存储</h3><pre><code>单纯的把Session信息存在JVM内容已经不适合现在的技术架构，再加上外部存储的开源产品足够成熟(Redis等)，
于是Sping Session对HttpSession进行了重新包装，使其很容易结合Redis等开源产品，节省了我们的开发时间。
只需要在你自己实现的WebSecurityConfigurerAdapter中加上如下注解：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@EnableRedisHttpSession</div></pre></td></tr></table></figure>
<h3 id="Cookies和Header混合支持"><a href="#Cookies和Header混合支持" class="headerlink" title="Cookies和Header混合支持"></a>Cookies和Header混合支持</h3><pre><code>但是在使用的过程中遇到一个问题，需要Cookie和Header都支持，这下麻烦了，还需要自己去实现，
怎么才能都支持呢？那就是在自己实现的AllHttpSessionStrategy中，对Request进行判断，如果是html，就使用
CookieHttpSessionStrategy，如果是API就用HeaderHttpSessionStrategy，具体如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Bean</div><div class="line">  public HttpSessionStrategy httpSessionStrategy() &#123;</div><div class="line">      return new MyHttpSessionStrategy(new HeaderContentNegotiationStrategy());</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里的MyHttpSessionStrategy是要自己实现的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public class MyHttpSessionStrategy implements HttpSessionStrategy &#123;</div><div class="line">    private HttpSessionStrategy browser;</div><div class="line"></div><div class="line">    private HttpSessionStrategy api;</div><div class="line"></div><div class="line">    private RequestMatcher browserMatcher;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    public MyHttpSessionStrategy(ContentNegotiationStrategy contentNegotiationStrategy) &#123;</div><div class="line">        this(new CookieHttpSessionStrategy(), new HeaderHttpSessionStrategy());</div><div class="line">        MediaTypeRequestMatcher matcher = new MediaTypeRequestMatcher(contentNegotiationStrategy,</div><div class="line">                Arrays.asList(MediaType.TEXT_HTML));</div><div class="line">        matcher.setIgnoredMediaTypes(Collections.singleton(MediaType.ALL));</div><div class="line"></div><div class="line">        RequestHeaderRequestMatcher javascript = new RequestHeaderRequestMatcher(&quot;X-Requested-With&quot;);</div><div class="line"></div><div class="line">        this.browserMatcher = new OrRequestMatcher(Arrays.asList(matcher, javascript));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyHttpSessionStrategy(HttpSessionStrategy browser, HttpSessionStrategy api) &#123;</div><div class="line">        this.browser = browser;</div><div class="line">        this.api = api;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getRequestedSessionId(HttpServletRequest request) &#123;</div><div class="line">        return getStrategy(request).getRequestedSessionId(request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onNewSession(Session session, HttpServletRequest request, HttpServletResponse response) &#123;</div><div class="line">        getStrategy(request).onNewSession(session, request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onInvalidateSession(HttpServletRequest request, HttpServletResponse response) &#123;</div><div class="line">        getStrategy(request).onInvalidateSession(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private HttpSessionStrategy getStrategy(HttpServletRequest request) &#123;</div><div class="line">        return this.browserMatcher.matches(request) ? this.browser : this.api;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>这样无论是网页端还是RESTFull API，都可以正常支持了。
网页端通过cookie来传递session，API使用的是x-auth-token。
这里有个问题就是还不知道怎么去更新Redis中会话信息,待续...
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;使用Spring Security的时候，觉得省了好多的事情。但是它使用的是内存来存储CurrentUser的信息
和登录凭证，一旦单机不能承受大用户量，就需要水平扩展，就会涉及到session的问题。怎么才能实现
平滑扩展呢？还好有Sping Session，怎么用呢？
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.nealma.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Exception" scheme="http://www.nealma.com/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Vim Commandline (一) 文本替换</title>
    <link href="http://www.nealma.com/2016/10/02/vim-command-line-1-replace/"/>
    <id>http://www.nealma.com/2016/10/02/vim-command-line-1-replace/</id>
    <published>2016-10-02T03:46:45.000Z</published>
    <updated>2016-11-17T01:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>文本替换在我们的工作中经常被使用，是一个高频的功能。
可是我总是记不住，每次都得Google一下，还是自己记录下吧...
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>文本替换在我们的工作中经常被使用，是一个高频的功能。
可是我总是记不住，每次都得Google一下，还是自己记录下吧...
</code></pre><h3 id="Replace-Text"><a href="#Replace-Text" class="headerlink" title="Replace Text"></a>Replace Text</h3><ul>
<li>替换当前行第一个字符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 将当前光标所在的行中，第一个出现的a替换成b</div><div class="line">:$s/a/b</div></pre></td></tr></table></figure>
<ul>
<li>替换前光标所在的行所有字符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 将当前光标所在的行中，所有a替换成b</div><div class="line">:$s/a/b/g</div></pre></td></tr></table></figure>
<ul>
<li>替换第n行到当前行区间中所有行的第一个字符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 将第n行到当前光标所在的行中，第一个出现的a替换成b</div><div class="line">#n 为行号</div><div class="line">:n,$s/a/b</div></pre></td></tr></table></figure>
<ul>
<li>替换前光标所在的行所有字符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 将第n行到当前光标所在的行中，所有a替换成b</div><div class="line">:n,$s/a/b/g</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>:)~</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;文本替换在我们的工作中经常被使用，是一个高频的功能。
可是我总是记不住，每次都得Google一下，还是自己记录下吧...
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.nealma.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="http://www.nealma.com/tags/CentOS/"/>
    
      <category term="Linux" scheme="http://www.nealma.com/tags/Linux/"/>
    
      <category term="Vim" scheme="http://www.nealma.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7（三）Install PHP</title>
    <link href="http://www.nealma.com/2016/10/01/centos-72-3-php/"/>
    <id>http://www.nealma.com/2016/10/01/centos-72-3-php/</id>
    <published>2016-10-01T03:46:45.000Z</published>
    <updated>2016-11-21T09:39:35.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>今天在CentOS 7.2上安装PHP,记录一下
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>今天在CentOS 7.2上安装PHP,记录一下
</code></pre><h3 id="Install-PHP"><a href="#Install-PHP" class="headerlink" title="Install PHP"></a>Install PHP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php php-mysql</div></pre></td></tr></table></figure>
<h3 id="Restart-Apache-web-server"><a href="#Restart-Apache-web-server" class="headerlink" title="Restart Apache web server"></a>Restart Apache web server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum -y install httpd</div><div class="line"></div><div class="line">systemctl restart httpd.service</div></pre></td></tr></table></figure>
<h3 id="Install-PHP-Modules"><a href="#Install-PHP-Modules" class="headerlink" title="Install PHP Modules"></a>Install PHP Modules</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php-fpm</div></pre></td></tr></table></figure>
<h3 id="Test-php"><a href="#Test-php" class="headerlink" title="Test php"></a>Test php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /var/www/html/info.php</div><div class="line"></div><div class="line">#文件内容</div><div class="line">&lt;?php phpinfo(); ?&gt;</div></pre></td></tr></table></figure>
<h3 id="如果开启了firewall，请允许HTTP和HTTPS-Traffic"><a href="#如果开启了firewall，请允许HTTP和HTTPS-Traffic" class="headerlink" title="如果开启了firewall，请允许HTTP和HTTPS Traffic"></a>如果开启了firewall，请允许HTTP和HTTPS Traffic</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --permanent --zone=public --add-service=http </div><div class="line">firewall-cmd --permanent --zone=public --add-service=https</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<h3 id="Install-phpMyAdmin"><a href="#Install-phpMyAdmin" class="headerlink" title="Install phpMyAdmin"></a>Install phpMyAdmin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y update</div><div class="line">yum -y install phpmyadmin</div></pre></td></tr></table></figure>
<h3 id="安装完后，发现还是5-x-x，还得继续，升级到7-x"><a href="#安装完后，发现还是5-x-x，还得继续，升级到7-x" class="headerlink" title="安装完后，发现还是5.x.x，还得继续，升级到7.x"></a>安装完后，发现还是5.x.x，还得继续，升级到7.x</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</div><div class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</div><div class="line"></div><div class="line">yum install php70w php70w-opcache</div><div class="line"></div><div class="line">yum install yum-plugin-replace</div><div class="line"></div><div class="line">yum replace php-common --replace-with=php70w-common -y</div><div class="line"></div><div class="line">yum install php70w-opcache -y</div></pre></td></tr></table></figure>
<h3 id="安装ecshop-检查结果，文件不可写"><a href="#安装ecshop-检查结果，文件不可写" class="headerlink" title="安装ecshop,检查结果，文件不可写"></a>安装ecshop,检查结果，文件不可写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod -R 777 /var/www/html/ecshop/</div></pre></td></tr></table></figure>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install mysql mysql-server mysql-devel php-mysql gd gd-devel httpd php php-gd</div></pre></td></tr></table></figure>
<h3 id="如果想删除php，更换版本，如下："><a href="#如果想删除php，更换版本，如下：" class="headerlink" title="如果想删除php，更换版本，如下："></a>如果想删除php，更换版本，如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># remove</div><div class="line">yum remove php</div><div class="line"></div><div class="line">＃ search</div><div class="line">yum search php</div><div class="line"></div><div class="line"># remove common</div><div class="line">yum remove php-commen(以search的结果为准)</div><div class="line"></div><div class="line">### fast-cgi 运行</div></pre></td></tr></table></figure>
<p>php-cgi -b 9001</p>
<h1 id="darmon-start"><a href="#darmon-start" class="headerlink" title="darmon start"></a>darmon start</h1><p>php-fpm -D -c /etc/php.ini </p>
<p>#如果没有php-fpm, 先安装<br>yum install php-fpm -y<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* nginx 配置</div></pre></td></tr></table></figure></p>
<p>location  ~ ^(.+.php)(.<em>)$ {<br>    fastcgi_pass 127.0.0.1:9000;<br>    fastcgi_index index.php;<br>    fastcgi_split_path_info ^(.+.php)(.</em>)$; fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>    fastcgi_param   PATH_INFO $fastcgi_path_info;<br>    fastcgi_param   PATH_TRANSLATED $document_root$fastcgi_path_info;<br>    include fastcgi_params;<br>}<br>```</p>
<p>注意要把你的php项目cp到nginx的html下</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>:)~</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;今天在CentOS 7.2上安装PHP,记录一下
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.nealma.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="http://www.nealma.com/tags/CentOS/"/>
    
      <category term="Linux" scheme="http://www.nealma.com/tags/Linux/"/>
    
      <category term="PHP" scheme="http://www.nealma.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7（五）Set Hostname</title>
    <link href="http://www.nealma.com/2016/10/01/centos-72-5-set-hostname/"/>
    <id>http://www.nealma.com/2016/10/01/centos-72-5-set-hostname/</id>
    <published>2016-10-01T03:46:45.000Z</published>
    <updated>2016-11-22T01:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>对于不是经常装系统或者购买云服务器的我来说，总是忘记怎么设置更改hostname，
怎么办，怎么办，那就记下来呗。
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>对于不是经常装系统或者购买云服务器的我来说，总是忘记怎么设置更改hostname，
怎么办，怎么办，那就记下来呗。
</code></pre><h3 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 查看hostname信息</div><div class="line">hostnamectl status</div><div class="line"></div><div class="line"># 临时更改，重启后会恢复</div><div class="line">hostnamectl set-hostname &apos;your  Name&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Static hostname: yourname ＃发现会过滤任何特殊字符，而且全部转化为小写</div><div class="line">Pretty hostname: your  Name</div></pre></td></tr></table></figure>
<p>此时，/etc/hostname中会自动更新，但是/etc/hosts的内容不会，需要手动更改。<br>如果想要永久变更，你可以加入如下参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hostnamectl --static set-hostname nealma</div></pre></td></tr></table></figure>
<p>会立即修改内核的主机名，注销后重新登录，不需要重启服务器。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>:)~</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;对于不是经常装系统或者购买云服务器的我来说，总是忘记怎么设置更改hostname，
怎么办，怎么办，那就记下来呗。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.nealma.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="http://www.nealma.com/tags/CentOS/"/>
    
      <category term="Linux" scheme="http://www.nealma.com/tags/Linux/"/>
    
      <category term="Hostname" scheme="http://www.nealma.com/tags/Hostname/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7（四）Install Redis</title>
    <link href="http://www.nealma.com/2016/10/01/centos-72-4-redis/"/>
    <id>http://www.nealma.com/2016/10/01/centos-72-4-redis/</id>
    <published>2016-10-01T03:46:45.000Z</published>
    <updated>2016-11-18T05:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>今天在CentOS 7.2上安装Redis,记录一下
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>今天在CentOS 7.2上安装Redis,记录一下
</code></pre><h3 id="Install-Redis"><a href="#Install-Redis" class="headerlink" title="Install Redis"></a>Install Redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install -y redis</div><div class="line"></div><div class="line">#For Mac</div><div class="line">brew install redis</div></pre></td></tr></table></figure>
<p>so easy!</p>
<h3 id="Start-Redis"><a href="#Start-Redis" class="headerlink" title="Start Redis"></a>Start Redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">service redis start/stop/status/restart</div><div class="line"></div><div class="line"># For Mac</div><div class="line">brew services list</div><div class="line">brew services start/stop/restart redis</div></pre></td></tr></table></figure>
<h3 id="服务器解除bind-允许远程访问"><a href="#服务器解除bind-允许远程访问" class="headerlink" title="服务器解除bind, 允许远程访问"></a>服务器解除bind, 允许远程访问</h3><p>```</p>
<p>#vim /etc/redis.conf</p>
<p>#注释掉这一行<br>bind 127.0.0.1</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>:)~</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;今天在CentOS 7.2上安装Redis,记录一下
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.nealma.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="http://www.nealma.com/tags/CentOS/"/>
    
      <category term="Linux" scheme="http://www.nealma.com/tags/Linux/"/>
    
      <category term="Redis" scheme="http://www.nealma.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7（二）Install MySQL (MariaDB)</title>
    <link href="http://www.nealma.com/2016/10/01/centos-72-2-install-mariadb/"/>
    <id>http://www.nealma.com/2016/10/01/centos-72-2-install-mariadb/</id>
    <published>2016-10-01T03:46:45.000Z</published>
    <updated>2016-11-17T01:47:28.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>今天在CentOS 7.2上安装MySQL（MariaDB）,记录一下
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>今天在CentOS 7.2上安装MySQL（MariaDB）,记录一下
</code></pre><h3 id="Install-MariaDB"><a href="#Install-MariaDB" class="headerlink" title="Install MariaDB"></a>Install MariaDB</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mariadb-server mariadb</div></pre></td></tr></table></figure>
<h3 id="Start-MariaDB"><a href="#Start-MariaDB" class="headerlink" title="Start MariaDB"></a>Start MariaDB</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemsctl start mariadb</div></pre></td></tr></table></figure>
<h3 id="Setting-Secure"><a href="#Setting-Secure" class="headerlink" title="Setting Secure"></a>Setting Secure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># 设置root密码，是否允许远程，test数据库等	</div><div class="line"></div><div class="line">mysql_secure_installation</div><div class="line"></div><div class="line"># Or</div><div class="line"></div><div class="line">set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</div><div class="line"></div><div class="line"># 远程连接设置</div><div class="line">grant all privileges on *.* to root@&apos;%&apos; identified by &apos;password&apos;;</div><div class="line">flush privileges;</div><div class="line"></div><div class="line">#Or</div><div class="line"></div><div class="line">mysql&gt; use mysql</div><div class="line"></div><div class="line">mysql&gt; update user set Host=&apos;%&apos; where User=&apos;root&apos;;</div><div class="line"></div><div class="line">mysql&gt; flush privileges;</div><div class="line"></div><div class="line"># 创建新用户</div><div class="line">create user &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos;;</div></pre></td></tr></table></figure>
<h3 id="Start-on-boot"><a href="#Start-on-boot" class="headerlink" title="Start on boot"></a>Start on boot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable mariadb.service</div></pre></td></tr></table></figure>
<h3 id="MySQL-配置防火墙"><a href="#MySQL-配置防火墙" class="headerlink" title="MySQL 配置防火墙"></a>MySQL 配置防火墙</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --permanent --zone=public --add-service=mysql</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>:)~</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;今天在CentOS 7.2上安装MySQL（MariaDB）,记录一下
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.nealma.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="http://www.nealma.com/tags/CentOS/"/>
    
      <category term="Linux" scheme="http://www.nealma.com/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://www.nealma.com/tags/MySQL/"/>
    
      <category term="MariaDB" scheme="http://www.nealma.com/tags/MariaDB/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7（一）Java环境搭建</title>
    <link href="http://www.nealma.com/2016/10/01/centos-72-1-install-java-envirment/"/>
    <id>http://www.nealma.com/2016/10/01/centos-72-1-install-java-envirment/</id>
    <published>2016-10-01T03:46:45.000Z</published>
    <updated>2016-11-17T01:47:13.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>最近要从0开发新项目，以前都是用的CengOS6.5,觉得太历史了，7.x已经出来很久了。
而且云上的景象都是7.2了，没理由不用。第一次使用肯定会遇到坑，其实也是自身对这个系统的不了解。
尝鲜可定会出事，但是只要你打破舒适区，一路下来，你会觉得没那么难
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>最近要从0开发新项目，以前都是用的CengOS6.5,觉得太历史了，7.x已经出来很久了。
而且云上的景象都是7.2了，没理由不用。第一次使用肯定会遇到坑，其实也是自身对这个系统的不了解。
尝鲜可定会出事，但是只要你打破舒适区，一路下来，你会觉得没那么难
</code></pre><h3 id="安装-JDK8-0"><a href="#安装-JDK8-0" class="headerlink" title="安装 JDK8.0"></a>安装 JDK8.0</h3><p>直接使用openJDK,直接使用8.0,没必要考虑之前的版本了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum search openJDK</div><div class="line">yun install java-1.8.0-openjdk.x86_64</div></pre></td></tr></table></figure>
<h3 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">＃ 去官网下载最新的Maven版本，zip包就行了</div><div class="line">wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.zip</div><div class="line"></div><div class="line">unzip apache-maven-3.3.9-bin.zip</div><div class="line"></div><div class="line"># 如果没有unzip工具的，先安装unzip</div><div class="line">yum install unzip</div><div class="line"></div><div class="line">＃ 把解压文件夹移动到/opt/maven下</div><div class="line">mv apache-maven-3.3.9 /opt/maven</div><div class="line"></div><div class="line"># 做个软连接</div><div class="line">ln -s /opt/maven/bin/mvn /usr/bin/mvn</div><div class="line"></div><div class="line">＃设置Maven环境变量</div><div class="line">vim /etc/profile.d/maven.sh</div><div class="line"></div><div class="line">#!/bin/bash</div><div class="line">MAVEN_HOME=/opt/maven</div><div class="line">PATH=$MAVEN_HOME/bin:$PATH</div><div class="line">export PATH MAVEN_HOME</div><div class="line">export CLASSPATH=.</div><div class="line"></div><div class="line"># 添加可执行权限</div><div class="line">chmod +x /etc/profile.d/maven.sh</div><div class="line"></div><div class="line"># 立即生效</div><div class="line">source /etc/profile.d/maven.sh</div><div class="line"></div><div class="line"># 检查是否安装成功</div><div class="line">mvn -version</div></pre></td></tr></table></figure>
<h3 id="安装-Tomcat-8"><a href="#安装-Tomcat-8" class="headerlink" title="安装 Tomcat 8"></a>安装 Tomcat 8</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">＃ download</div><div class="line">wget http://mirrors.cnnic.cn/apache/tomcat/tomcat-8/v8.5.6/bin/apache-tomcat-8.5.6.zip</div><div class="line"></div><div class="line">＃ extract</div><div class="line">unzip apache-tomcat-8.5.6.zip </div><div class="line"></div><div class="line"># move to /opt</div><div class="line">mv apache-tomcat-8.5.6 /opt/tomcat</div><div class="line"></div><div class="line"># set enviroment </div><div class="line">vim /etc/profile.d/tomcat.sh</div><div class="line"></div><div class="line">#!/bin/bash</div><div class="line">CATALINA_HOME=/opt/tomcat</div><div class="line">PATH=$CATALINA_HOME/bin:$PATH</div><div class="line">export PATH CATALINA_HOME</div><div class="line">export CLASSPATH=.</div><div class="line"></div><div class="line"># make it executable</div><div class="line">chmod +x /etc/profile.d/tomcat.sh</div><div class="line"></div><div class="line"># set enviroment permanently</div><div class="line">source /etc/profile.d/tomcat.sh</div><div class="line"></div><div class="line"># make shell executable permisson</div><div class="line">chmod +x $CATALINA_HOME/bin/startup.sh</div><div class="line">chmod +x $CATALINA_HOME/bin/shutdown.sh</div><div class="line">chmod +x $CATALINA_HOME/bin/catalina.sh</div><div class="line"></div><div class="line"># start tomcat</div><div class="line">sh $CATALINA_HOME/bin/startup.sh</div></pre></td></tr></table></figure>
<h3 id="用浏览器访问的时候，你很可能会失败，那就是firewall在作怪"><a href="#用浏览器访问的时候，你很可能会失败，那就是firewall在作怪" class="headerlink" title="用浏览器访问的时候，你很可能会失败，那就是firewall在作怪"></a>用浏览器访问的时候，你很可能会失败，那就是firewall在作怪</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">＃ Enable Firewalld</div><div class="line">systemctl enable firewalld</div><div class="line"></div><div class="line"># Start Firewalld</div><div class="line">systemctl start firewalld</div><div class="line"></div><div class="line"># check the status</div><div class="line">systemctl status firewalld</div></pre></td></tr></table></figure>
<h3 id="开启了Firewalld-添加如下"><a href="#开启了Firewalld-添加如下" class="headerlink" title="开启了Firewalld,添加如下"></a>开启了Firewalld,添加如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --permanent --add-port=8080/tcp</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><h1 id="创建调用脚本"><a href="#创建调用脚本" class="headerlink" title="创建调用脚本"></a>创建调用脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">vim /etc/init.d/tomcat</div><div class="line"></div><div class="line">######################################################</div><div class="line">#!/bin/sh</div><div class="line"># chkconfig: 2345 80 20</div><div class="line"></div><div class="line"># Description: Tomcat Start/Shutdown script</div><div class="line"></div><div class="line">export JAVA_HOME=/usr/lib/jvm/java</div><div class="line"></div><div class="line">case $1 in</div><div class="line">start)</div><div class="line">cd /opt/tomcat/bin/</div><div class="line">./startup.sh</div><div class="line">;;</div><div class="line">stop)</div><div class="line">cd /opt/tomcat/bin/</div><div class="line">./shutdown.sh</div><div class="line">;;</div><div class="line">restart)</div><div class="line">cd /opt/tomcat/bin/</div><div class="line">./shutdown.sh</div><div class="line">cd /opt/tomcat/bin/</div><div class="line">./startup.sh</div><div class="line">;;</div><div class="line">esac</div><div class="line">exit 0</div><div class="line">######################################################</div><div class="line"></div><div class="line"># Make it executable</div><div class="line">chmod a+x /etc/init.d/tomcat</div><div class="line"></div><div class="line"># Add the tomcat to service</div><div class="line">chkconfig --add tomcat</div><div class="line"></div><div class="line"># auto as reboot</div><div class="line">systemctl start tomcat</div><div class="line">chkconfig tomcat on</div></pre></td></tr></table></figure>
<h3 id="给Tomcat添加管理角色"><a href="#给Tomcat添加管理角色" class="headerlink" title="给Tomcat添加管理角色"></a>给Tomcat添加管理角色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">vim $CATALINA_HOME/conf/tomcat-users.xml</div><div class="line"></div><div class="line">#在&lt;tomcat-users&gt;&lt;/tomcat-users&gt;之间加入如下指令</div><div class="line"></div><div class="line">[...]</div><div class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</div><div class="line">&lt;role rolename=&quot;manager-script&quot;/&gt;</div><div class="line">&lt;role rolename=&quot;manager-jmx&quot;/&gt;</div><div class="line">&lt;role rolename=&quot;manager-status&quot;/&gt;</div><div class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;</div><div class="line">&lt;role rolename=&quot;admin-script&quot;/&gt;</div><div class="line">&lt;user username=&quot;admin&quot; password=&quot;admin&quot; roles=&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script&quot;/&gt;</div><div class="line">[...]</div><div class="line"></div><div class="line"># Restart tomcat </div><div class="line">systemctl restart tomcat</div><div class="line"></div><div class="line"># 用户名 密码  admin/admin</div><div class="line"></div><div class="line">#如果遇到403 Access Denied, 如下操作</div><div class="line">vim $CATALINA_HOME/webapps/manager/META-INF/context.xml</div><div class="line"></div><div class="line">#注释Value</div><div class="line"></div><div class="line">&lt;Context antiResourceLocking=&quot;false&quot; privileged=&quot;true&quot; &gt;</div><div class="line">&lt;!--</div><div class="line">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt;</div><div class="line">--&gt;</div><div class="line">&lt;/Context&gt;</div><div class="line"></div><div class="line">#访问host-manager时 403 Access Denied，操作类似</div><div class="line"></div><div class="line">vim $CATALINA_HOME/webapps/host-manager/META-INF/context.xml</div><div class="line"></div><div class="line">#注释Value</div><div class="line"></div><div class="line">&lt;Context antiResourceLocking=&quot;false&quot; privileged=&quot;true&quot; &gt;</div><div class="line">&lt;!--</div><div class="line">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt;</div><div class="line">--&gt;</div><div class="line">&lt;/Context&gt;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>:)~</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;最近要从0开发新项目，以前都是用的CengOS6.5,觉得太历史了，7.x已经出来很久了。
而且云上的景象都是7.2了，没理由不用。第一次使用肯定会遇到坑，其实也是自身对这个系统的不了解。
尝鲜可定会出事，但是只要你打破舒适区，一路下来，你会觉得没那么难
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.nealma.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="http://www.nealma.com/tags/CentOS/"/>
    
      <category term="Linux" scheme="http://www.nealma.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>React Native (十二) 趟雷过程中遇到的陷阱</title>
    <link href="http://www.nealma.com/2016/09/03/react-native-912-archive/"/>
    <id>http://www.nealma.com/2016/09/03/react-native-912-archive/</id>
    <published>2016-09-03T06:46:45.000Z</published>
    <updated>2016-11-17T01:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>导出分发包的过程中，遇到了许多小问题，做个总结吧</p>
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>导出分发包的过程中，遇到了许多小问题，做个总结吧
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="趟雷过程中遇到的陷阱"><a href="#趟雷过程中遇到的陷阱" class="headerlink" title="趟雷过程中遇到的陷阱"></a>趟雷过程中遇到的陷阱</h3><ul>
<li><p>{For iOS} 突然Products中的archive变成灰色，不能archive了</p>
<p>  把device换成Generic iOS Device</p>
</li>
<li><p>在模拟器中运行出现</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang: error: no such file or directory: &apos;/Users/neal/Library/Developer/Xcode/DerivedData/haiji-hakrywogbjraxiheecjpbwbxsood/Build/Products/Debug-iphonesimulator/libReact.a&apos;</div></pre></td></tr></table></figure>
<pre><code>把Build Settings -&gt; Architectures -&gt; Build Active Architectures Only 设置成 NO
</code></pre><ul>
<li><p>Duplicate module name: XXX</p>
<p>   有可能是React的版本不一样，我的做法是  </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf node_modules &amp;&amp; npm install</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;导出分发包的过程中，遇到了许多小问题，做个总结吧&lt;/p&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="ipa" scheme="http://www.nealma.com/tags/ipa/"/>
    
  </entry>
  
  <entry>
    <title>React Native (十一) bundle打离线包</title>
    <link href="http://www.nealma.com/2016/09/02/react-native-911-bundle/"/>
    <id>http://www.nealma.com/2016/09/02/react-native-911-bundle/</id>
    <published>2016-09-02T06:46:45.000Z</published>
    <updated>2016-11-17T01:57:36.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>在开发阶段，我们都是通过模拟器，或者自己的手机，直接连接Xcode和Android Studio,
这样调试代码非常方便，然而我们的App开发好了，最终的目的是上线App Store和各个Android市场。
最后还是要进行打包，把所有的资源打包成一个最终能够安装的应用包。iOS对应的ipa，Android对应的apk。
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>在开发阶段，我们都是通过模拟器，或者自己的手机，直接连接Xcode和Android Studio,
这样调试代码非常方便，然而我们的App开发好了，最终的目的是上线App Store和各个Android市场。
最后还是要进行打包，把所有的资源打包成一个最终能够安装的应用包。iOS对应的ipa，Android对应的apk。

那如何打包呢？
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="react-native-bundle"><a href="#react-native-bundle" class="headerlink" title="react-native bundle"></a>react-native bundle</h3><ul>
<li>–entry-file ,ios或者android入口的js名称，比如index.ios.js</li>
<li>–platform ,平台名称(ios或者android)</li>
<li>–dev ,设置为false的时候将会对JavaScript代码进行优化处理</li>
<li>–bundle-output, 生成的jsbundle文件的名称，比如./ios/index.ios.jsbundle</li>
<li><p>–assets-dest 图片以及其他资源存放的目录,比如./ios 默认会生成一个新的文件夹assets</p>
</li>
<li><p>For iOS</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --entry-file index.ios.js --bundle-output ./ios/main.jsbundle --platform ios --assets-dest ./ios --dev false</div></pre></td></tr></table></figure>
<ul>
<li>For Android<br>  跟iOS差不多，只不过变量变为android，同时资源文件指定到现有的文件即可。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --entry-file index.android.js --bundle-output ./android/app/src/main/assets/index.android.bundle --platform android --assets-dest ./android/app/src/main/res --dev false</div></pre></td></tr></table></figure>
<ul>
<li>Repeat Work</li>
</ul>
<p>这样的一串命令以后还得用呢，那是不是可以写个脚本留给以后重复用呢？<br>其实可以利用npm的脚本就可以，在package.json中添加（bundle-ios）如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;,</div><div class="line">    &quot;bundle-ios&quot;: &quot;react-native bundle --entry-file index.ios.js --bundle-output ./ios/main.jsbundle --platform ios --assets-dest ./ios --dev false&quot;,</div><div class="line">    &quot;bundle-android&quot;: &quot;react-native bundle --entry-file index.android.js --bundle-output ./android/app/src/main/assets/index.android.bundle --platform android --assets-dest ./android/app/src/main/res --dev false&quot;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>以后每次打包直接运行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm run bundle-ios</div><div class="line"></div><div class="line">npm run bundle-android</div></pre></td></tr></table></figure></p>
<h3 id="把打包好的资源文件添加到Xcode"><a href="#把打包好的资源文件添加到Xcode" class="headerlink" title="把打包好的资源文件添加到Xcode"></a>把打包好的资源文件添加到Xcode</h3><ul>
<li>添加文件到项目</li>
</ul>
<p><img src="/images/addfilesto.png" alt=""></p>
<ul>
<li>找到刚才的assets文件夹</li>
</ul>
<p><img src="/images/assets.png" alt=""></p>
<h3 id="修改程序加载js的方式-AppDelegate-m"><a href="#修改程序加载js的方式-AppDelegate-m" class="headerlink" title="修改程序加载js的方式(AppDelegate.m)"></a>修改程序加载js的方式(AppDelegate.m)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</div><div class="line"></div><div class="line">  jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;在开发阶段，我们都是通过模拟器，或者自己的手机，直接连接Xcode和Android Studio,
这样调试代码非常方便，然而我们的App开发好了，最终的目的是上线App Store和各个Android市场。
最后还是要进行打包，把所有的资源打包成一个最终能够安装的应用包。iOS对应的ipa，Android对应的apk。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="bundle" scheme="http://www.nealma.com/tags/bundle/"/>
    
  </entry>
  
  <entry>
    <title>React Native (十) 给App设置icon</title>
    <link href="http://www.nealma.com/2016/09/01/react-native-910-app-icon/"/>
    <id>http://www.nealma.com/2016/09/01/react-native-910-app-icon/</id>
    <published>2016-09-01T06:46:45.000Z</published>
    <updated>2016-11-17T01:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>App开发好了，在你的手机桌面上就能看到，一个好的icon会给人耳目一新的感觉。
作为一个专业搬砖的来说，很有难度。主要看你的设计和视觉天赋了。我们一般运行个helloworld，
你会在手机上找你的App，但都是各个平台默认的，iOS里面是多个同心圆，一环一环的，
具体叫啥还真不知道，Android则是那个呆萌的小机器人。
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>App开发好了，在你的手机桌面上就能看到，一个好的icon会给人耳目一新的感觉。
作为一个专业搬砖的来说，很有难度。主要看你的设计和视觉天赋了。我们一般运行个helloworld，
你会在手机上找你的App，但都是各个平台默认的，iOS里面是多个同心圆，一环一环的，
具体叫啥还真不知道，Android则是那个呆萌的小机器人。

那如何替换成我们自己的icon呢？
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="For-iOS"><a href="#For-iOS" class="headerlink" title="For iOS"></a>For iOS</h3><ul>
<li><p>修改应用icon</p>
<p>  在Xcode中单击Images.xcassets文件夹，右侧会看到AppIcon。<br>  单击AppIcon，映入你眼帘的是一个个待填补的虚线😊方框。<br>  看到这个你不要慌，也不用管这些是什么，你只看每组对应说明的单位即可。</p>
<p>  比如第一组20pt，2x就是40pt，3x就是60pt，我都是用的像素，也没问题。<br>  按照这些尺寸制作icon即可，其他以此类推。</p>
<p>  做好所有尺寸的icon后，拖拽到相应的位置上就OK。<br>  即：更新不同的尺寸 29pt 29pt<em>2 29pt</em>3 40pt<em>2 40pt</em>3 57pt 57pt<em>2 60pt</em>2 60pt*3</p>
</li>
<li><p>修改应用名称</p>
<p>  还有一点就是，App name ，默认会是你的项目的名称。我们呢，都用中文，当然得提前设置了。</p>
<p>  在哪设置呢？</p>
<p>  在Xcode 8中，单击项目，左侧出现跟项目相关的信息。<br>  选择Targets -&gt; General -&gt; Display Name,值部分就是你要填的<br>  显示在AppIcon 下面的文本部分了。</p>
</li>
</ul>
<p><img src="/images/appicon.png" alt=""></p>
<h3 id="For-Android"><a href="#For-Android" class="headerlink" title="For Android"></a>For Android</h3><ul>
<li><p>修改应用icon</p>
<p>   把 ic_launcher.png 放到文件夹 [PrjDir]/android/app/src/main/res/mipmap-*.</p>
<p>  相应的尺寸：</p>
<pre><code>72*72 ic_launcher.png to mipmap-hdpi.
48*48 ic_launcher.png to mipmap-mdpi.
96*96 ic_launcher.png to mipmap-xhdpi.
144*144 ic_launcher.png to mipmap-xxhdpi.
</code></pre></li>
<li><p>修改应用名称</p>
<p>  在a[PrjDir]/ndroid/app/src/main/res/values/strings.xml中，<br>  找到<string name="app_name">MyProject</string>, MyProject替换为你自己的应用名称即可。</p>
</li>
</ul>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;App开发好了，在你的手机桌面上就能看到，一个好的icon会给人耳目一新的感觉。
作为一个专业搬砖的来说，很有难度。主要看你的设计和视觉天赋了。我们一般运行个helloworld，
你会在手机上找你的App，但都是各个平台默认的，iOS里面是多个同心圆，一环一环的，
具体叫啥还真不知道，Android则是那个呆萌的小机器人。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="AppIcon" scheme="http://www.nealma.com/tags/AppIcon/"/>
    
      <category term="AppName" scheme="http://www.nealma.com/tags/AppName/"/>
    
  </entry>
  
  <entry>
    <title>React Native (九) TextInput 文本输入</title>
    <link href="http://www.nealma.com/2016/08/31/react-native-9-TextInput/"/>
    <id>http://www.nealma.com/2016/08/31/react-native-9-TextInput/</id>
    <published>2016-08-31T03:46:45.000Z</published>
    <updated>2016-11-17T01:57:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>  TextInput组件作为基础部分，必不可少。<br>  我们在做登录、提交信息时经常使用。</p>
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>TextInput组件作为基础部分，必不可少。
我们在做登录、提交信息时经常使用。
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="简单用例"><a href="#简单用例" class="headerlink" title="简单用例"></a>简单用例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;TextInput</div><div class="line">    style=&#123;Styles.postTextInput&#125;</div><div class="line">    autoCapitalize=&quot;none&quot;</div><div class="line">    multiline=&#123;true&#125; //是否多行</div><div class="line">    keyboardType=&apos;numeric&apos; //键盘类型：default, numeric, </div><div class="line">    placeholder=&#123;this.state.placeHolder&#125; //占位字符 背景提示,这里犯了错误，当时把颜色和背景设置一样了，死活看不到，满眼都是泪啊</div><div class="line">    placeholderTextColor=&quot;#bfbfbf&quot; //占位符颜色</div><div class="line">    onChangeText=&#123;(text) =&gt; this.setState(&#123;text&#125;)&#125; //文本改变时触发这个事件, 获取本文时需要这个方法</div><div class="line">/&gt;</div><div class="line"></div><div class="line"># keyboardType决定键盘类型,是个枚举</div><div class="line"># enum(&apos;default&apos;, &quot;ascii-capable&quot;, &apos;numbers-and-punctuation&apos;, &apos;url&apos;, &apos;number-pad&apos;, &apos;phone-pad&apos;, </div><div class="line">#&apos;name-phone-pad&apos;, &apos;email-address&apos;, &apos;decimal-pad&apos;, &apos;twitter&apos;, &apos;web-search&apos;, &quot;numeric&quot;)</div></pre></td></tr></table></figure>
<h3 id="获取文本内容"><a href="#获取文本内容" class="headerlink" title="获取文本内容"></a>获取文本内容</h3><pre><code>在onChangeText中，我们已经告知文本内容，并实时保存在了state中，

我们只要在相应的处理函数中进行处理即可。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">_handleInput() &#123;</div><div class="line">    console.log(this.state.text);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设置width和height"><a href="#设置width和height" class="headerlink" title="设置width和height"></a>设置width和height</h3><pre><code>如果你没有设置TextInput的样式，并且没有文本内容，那么默认是wrap的，因为TextInput不是块元素，
初次调试的时候，总是觉得很蹊跷，怎么看不到内容呢？在这里耽误了很长时间...
</code></pre><h3 id="获得焦点，呼出键盘"><a href="#获得焦点，呼出键盘" class="headerlink" title="获得焦点，呼出键盘"></a>获得焦点，呼出键盘</h3><pre><code>从使用来看，当你单击输入框的时候，如果单击的位置偏上了或者偏下了，都不会触发onFocus事件，这时候不要谎，
单击中间部分，看到键盘了吧。

当然如果是iOS，需要打开Simulator-&gt;Hardware-&gt;Keyboard-&gt;Toggle Software Keyboard
快捷键   Command + K
</code></pre><h3 id="失去焦点，隐藏键盘"><a href="#失去焦点，隐藏键盘" class="headerlink" title="失去焦点，隐藏键盘"></a>失去焦点，隐藏键盘</h3><pre><code>这里有两个方法，也是经过搜索和尝试的，都可以正常满足你的需求。
</code></pre><ul>
<li>把整个视图换成ScrollView</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ScrollView style=&#123;styles.container&#125; keyboardShouldPersistTaps=&#123;false&#125;&gt;</div><div class="line">    &lt;TextInput</div><div class="line">        placeholder=&quot;Post Title&quot;</div><div class="line">        onChange=&#123;(event) =&gt; this.updateTitle(event.nativeEvent.text)&#125;</div><div class="line">        style=&#123;styles.default&#125;/&gt;</div><div class="line"> &lt;/ScrollView&gt;</div></pre></td></tr></table></figure>
<ul>
<li>使用dismissKeyboard和TouchableWithoutFeedback配合</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import DismissKeyboard from &apos;dismissKeyboard&apos;;</div><div class="line"></div><div class="line">&lt;View style=&#123;styles.container&#125;&gt;</div><div class="line"></div><div class="line">  &lt;TouchableWithoutFeedback onPress=&#123; DismissKeyboard &#125;&gt;</div><div class="line"></div><div class="line">    &lt;View&gt;</div><div class="line">      &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class="line">        Welcome to React Native!</div><div class="line">      &lt;/Text&gt;</div><div class="line">      &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">        To get started, edit index.ios.js</div><div class="line">      &lt;/Text&gt;</div><div class="line">      &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">        Press Cmd+R to reload,&#123;&apos;\n&apos;&#125;</div><div class="line">        Cmd+D or shake for dev menu</div><div class="line">      &lt;/Text&gt;</div><div class="line">      &lt;TextInput style=&#123;&#123;height: 40, borderColor: &apos;gray&apos;, borderWidth: 1&#125;&#125; /&gt;</div><div class="line">    &lt;/View&gt;</div><div class="line">  &lt;/TouchableWithoutFeedback&gt;</div><div class="line"></div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<h3 id="Android-取消默认文本下划线"><a href="#Android-取消默认文本下划线" class="headerlink" title="Android 取消默认文本下划线"></a>Android 取消默认文本下划线</h3><pre><code>一开始不知道设置这个属性，导致在Android平台上出现不一致的风格。如果匹配还好，

事实上，很别扭。一开始以为可以通过设置边框可以改变，通过尝试是行不通的。后来发现

下面的属性，一下子解决了我的问题。还是得看书啊
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#TextInput 属性</div><div class="line">   underlineColorAndroid=&#123;&apos;transparent&apos;&#125;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  TextInput组件作为基础部分，必不可少。&lt;br&gt;  我们在做登录、提交信息时经常使用。&lt;/p&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="TextInput" scheme="http://www.nealma.com/tags/TextInput/"/>
    
  </entry>
  
  <entry>
    <title>React Native (八) 自定义组件</title>
    <link href="http://www.nealma.com/2016/08/30/react-native-8-define-component/"/>
    <id>http://www.nealma.com/2016/08/30/react-native-8-define-component/</id>
    <published>2016-08-30T03:46:45.000Z</published>
    <updated>2016-11-17T01:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>再前面一篇文章中，我使用了listview，当加载到最后，没有更多了，要更新提示；
一个方法是定义两个class，一个加载更多Footer，一个没有更多啦Footer, 很显热
只是为了一个string的变量，定义两个class有点浪费，从组件服用角度也是不合理的。
那怎么办呢？下面慢慢分解...
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>再前面一篇文章中，我使用了listview，当加载到最后，没有更多了，要更新提示；
一个方法是定义两个class，一个加载更多Footer，一个没有更多啦Footer, 很显热
只是为了一个string的变量，定义两个class有点浪费，从组件服用角度也是不合理的。
那怎么办呢？下面慢慢分解...
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="首先要定义一个简单的calss"><a href="#首先要定义一个简单的calss" class="headerlink" title="首先要定义一个简单的calss"></a>首先要定义一个简单的calss</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">export default class Footer extends React.Component &#123;</div><div class="line">	componentWillMount()&#123;//主要是绘制界面前，做一些初始化的工作</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;//主要是绘制界面后，相关操作</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">    render() &#123;//必须有的函数，主要是绘制界面，可多次调用。</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="props-和-state"><a href="#props-和-state" class="headerlink" title="props 和 state"></a>props 和 state</h3><ul>
<li><p>props<br>  是组件的属性，定义组件的时候key部分已经定义好了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#125; /&gt;</div><div class="line"></div><div class="line">#style 就是属性，style就是key</div></pre></td></tr></table></figure>
</li>
<li><p>state<br>  是状态，是变化的，render函数会随着state的变化而执行<br>  注意以下两种写法,<br>  ＃1，是初始化数据，不会调用render方法，可以在constructor中进行数据初始化<br>  ＃2，是状态更新，会调用render方法，切记在render中使用此种方法</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">＃1 </div><div class="line">this.state = &#123;</div><div class="line">            text: &apos;xxx&apos;</div><div class="line">        &#125;;</div><div class="line">＃2</div><div class="line">this.setState(&#123;</div><div class="line">                text: &apos;text&apos;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">#定义一个Footer组件</div><div class="line">class Footer extends Component &#123;</div><div class="line">    static propTypes = &#123;</div><div class="line">        text: React.PropTypes.string.isRequired,</div><div class="line">    &#125;;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        return(</div><div class="line">            &lt;View style=&#123;[Styles.footer, Styles.bgColorDarkRed]&#125;&gt;</div><div class="line">                &lt;Text&gt;&lt;/Text&gt;</div><div class="line">                &lt;Text style=&#123;[Styles.fontColorWhite, Styles.centerText]&#125;&gt;&#123;this.props.text&#125;&lt;/Text&gt;</div><div class="line">                &lt;Text&gt;&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">＃调用Footer</div><div class="line">class CallFooter extends Component &#123;</div><div class="line">    static propTypes = &#123;</div><div class="line">        text: React.PropTypes.string.isRequired,</div><div class="line">    &#125;;</div><div class="line">    renderFooter()&#123;</div><div class="line">        let text = this.state.hasLoadMore ? &apos;努力加载中...&apos;:&apos;没有更多了:)~&apos;;</div><div class="line">        return (</div><div class="line">            &lt;Footer text=&#123;text&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        return(</div><div class="line">            &lt;View style=&#123;[Styles.footer, Styles.bgColorDarkRed]&#125;&gt;</div><div class="line">                &#123;this.renderFooter()&#125;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义属性问题"><a href="#自定义属性问题" class="headerlink" title="自定义属性问题"></a>自定义属性问题</h3><pre><code>在定义属性事件时，不要把自定义属性取名为系统函数名，比如你自己也定义onPress,此时不会工作。
</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;再前面一篇文章中，我使用了listview，当加载到最后，没有更多了，要更新提示；
一个方法是定义两个class，一个加载更多Footer，一个没有更多啦Footer, 很显热
只是为了一个string的变量，定义两个class有点浪费，从组件服用角度也是不合理的。
那怎么办呢？下面慢慢分解...
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>React Native (七) Navigator 导航组件</title>
    <link href="http://www.nealma.com/2016/07/30/react-native-7-navigator/"/>
    <id>http://www.nealma.com/2016/07/30/react-native-7-navigator/</id>
    <published>2016-07-30T03:46:45.000Z</published>
    <updated>2016-11-17T01:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Navigator组件作为基础部分，必不可少。前面我们使用了sidemenu，每个menu的触发事件都会跳到
一个新的视图，此时就要用Navigator了。说白了，就是控制路由的这么一个东西，从一个视图跳到另一个视图。
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>Navigator组件作为基础部分，必不可少。前面我们使用了sidemenu，每个menu的触发事件都会跳到
一个新的视图，此时就要用Navigator了。说白了，就是控制路由的这么一个东西，从一个视图跳到另一个视图。
</code></pre><p><img src="/images/navigator.gif" alt=""></p>
<p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="首先要定义Navigator作为入口"><a href="#首先要定义Navigator作为入口" class="headerlink" title="首先要定义Navigator作为入口"></a>首先要定义Navigator作为入口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import FirstPage from &apos;./navigator-first-page&apos;;</div><div class="line"></div><div class="line">export default class Main extends React.Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        let defaultName = &apos;FirstPage&apos;;</div><div class="line">        let defaultComponent = FirstPage;</div><div class="line">        return (</div><div class="line">            &lt;Navigator</div><div class="line">                initialRoute=&#123;&#123; name: defaultName, component: defaultComponent &#125;&#125;</div><div class="line">                configureScene=&#123;(route) =&gt; &#123;</div><div class="line">                    return Navigator.SceneConfigs.VerticalDownSwipeJump;</div><div class="line">                &#125;&#125;</div><div class="line">                renderScene=&#123;(route, navigator) =&gt; &#123;</div><div class="line">                const Component = route.component;</div><div class="line">                    return (&lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;);</div><div class="line">                &#125;&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>＊ initialRoute: 初始化首屏视图，name可以看作页面的ID; component: 视图组件，即要显示的内容
＊ configureScene: 过场动画
＊ renderScene: 动态路由
</code></pre><h3 id="定义第一个页面navigator-first-page-js"><a href="#定义第一个页面navigator-first-page-js" class="headerlink" title="定义第一个页面navigator-first-page.js"></a>定义第一个页面navigator-first-page.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import SecondPage from &apos;./navigator-second-page&apos;;</div><div class="line"></div><div class="line">export default class FirstPage extends React.Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;&#125;;</div><div class="line">    &#125;</div><div class="line">    _pressButton() &#123;</div><div class="line">        const &#123; navigator &#125; = this.props;</div><div class="line">        if(navigator) &#123;</div><div class="line">            navigator.push(&#123;</div><div class="line">                name: &apos;SecondPage&apos;,</div><div class="line">                component: SecondPage</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;#fcb064&apos;, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class="line">                &lt;TouchableOpacity onPress=&#123;()=&gt;&#123;this._pressButton();&#125;&#125;&gt;</div><div class="line">                            &lt;Text style=&#123;&#123;height: 30, width: 80&#125;&#125;&gt;第一页&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定义第二个页面navigator-second-page-js"><a href="#定义第二个页面navigator-second-page-js" class="headerlink" title="定义第二个页面navigator-second-page.js"></a>定义第二个页面navigator-second-page.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">export default class SecondPage extends React.Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    _pressButton() &#123;</div><div class="line">        const &#123; navigator &#125; = this.props;</div><div class="line">        if(navigator) &#123;</div><div class="line">            //入栈出栈, 把当前的页面pop掉，返回到了上一个页面:FirstPage</div><div class="line">            navigator.pop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;#fb9696&apos;, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class="line">                &lt;TouchableOpacity onPress=&#123;()=&gt;&#123;this._pressButton();&#125;&#125;&gt;</div><div class="line">                    &lt;Text style=&#123;&#123;height: 30, width: 80&#125;&#125;&gt;第二页&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>总体上很清晰，如果涉及到事件，待续...
</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Navigator组件作为基础部分，必不可少。前面我们使用了sidemenu，每个menu的触发事件都会跳到
一个新的视图，此时就要用Navigator了。说白了，就是控制路由的这么一个东西，从一个视图跳到另一个视图。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="Navigator" scheme="http://www.nealma.com/tags/Navigator/"/>
    
  </entry>
  
  <entry>
    <title>React Native (六) CameraRoll 相册组件</title>
    <link href="http://www.nealma.com/2016/07/29/react-native-6-cameraroll/"/>
    <id>http://www.nealma.com/2016/07/29/react-native-6-cameraroll/</id>
    <published>2016-07-29T04:46:45.000Z</published>
    <updated>2016-11-17T01:58:34.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>CameraRoll模块提供了访问本地相册的功能。
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>CameraRoll模块提供了访问本地相册的功能。
</code></pre><p><img src="/images/cameraroll.gif" alt=""></p>
<p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="简单用例"><a href="#简单用例" class="headerlink" title="简单用例"></a>简单用例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">export default class HaiJiCameraRoll extends Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;</div><div class="line">            photos: [],</div><div class="line">            selected: &apos;&apos;,</div><div class="line">            placeHolder: &apos;这一刻的想法...&apos;,</div><div class="line">            text: null</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount() &#123;</div><div class="line">        let fetchParams = &#123;</div><div class="line">            first: 10,</div><div class="line">            assetType: &apos;Photos&apos;</div><div class="line">        &#125;;</div><div class="line">        CameraRoll.getPhotos(fetchParams).then((data) =&gt; &#123;</div><div class="line">            const edges = data.edges;</div><div class="line">            let photos = edges.map(photo=&gt;&#123;</div><div class="line">                return photo.node.image.uri</div><div class="line">            &#125;);</div><div class="line">            this.setState(&#123;</div><div class="line">                photos: photos</div><div class="line">            &#125;);</div><div class="line">        &#125;).catch(alert);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    selectImage(image) &#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            selected: image</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line"></div><div class="line">        const photos = this.state.photos || [];</div><div class="line">        let photosView = [];</div><div class="line">        for(let i = 0; i &lt; photos.length; i+=4) &#123;</div><div class="line">            let imageUri = photos[parseInt(i)];</div><div class="line">            let imageUri1 = photos[parseInt(i+1)];</div><div class="line">            let imageUri2 = photos[parseInt(i+2)];</div><div class="line">            let imageUri3 = photos[parseInt(i+3)];</div><div class="line">            photosView.push(</div><div class="line">                &lt;View style=&#123;Styles.postCameraRollRow&#125; key=&#123;i&#125;&gt;</div><div class="line">                    &lt;View style=&#123;Styles.container&#125;&gt;</div><div class="line">                        &lt;TouchableOpacity  onPress=&#123;this.selectImage.bind(this,imageUri)&#125;&gt;</div><div class="line">                            &lt;Image</div><div class="line">                                resizeMode=&apos;stretch&apos;</div><div class="line">                                style=&#123;[Styles.postCameraRollPhoto]&#125;</div><div class="line">                                source=&#123;&#123;uri: imageUri&#125;&#125; /&gt;</div><div class="line">                        &lt;/TouchableOpacity&gt;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                    &lt;View style=&#123;Styles.container&#125;&gt;</div><div class="line">                        &lt;TouchableOpacity  onPress=&#123;this.selectImage.bind(this,imageUri1)&#125;&gt;</div><div class="line">                            &lt;Image</div><div class="line">                                resizeMode=&apos;stretch&apos;</div><div class="line">                                style=&#123;[Styles.postCameraRollPhoto]&#125;</div><div class="line">                                source=&#123;&#123;uri: imageUri1&#125;&#125; /&gt;</div><div class="line">                        &lt;/TouchableOpacity&gt;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                    &lt;View style=&#123;Styles.container&#125;&gt;</div><div class="line">                        &lt;TouchableOpacity  onPress=&#123;this.selectImage.bind(this,imageUri2)&#125;&gt;</div><div class="line">                            &lt;Image</div><div class="line">                                resizeMode=&apos;stretch&apos;</div><div class="line">                                style=&#123;[Styles.postCameraRollPhoto]&#125;</div><div class="line">                                source=&#123;&#123;uri: imageUri2&#125;&#125; /&gt;</div><div class="line">                        &lt;/TouchableOpacity&gt;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                    &lt;View style=&#123;Styles.container&#125;&gt;</div><div class="line">                        &lt;TouchableOpacity  onPress=&#123;this.selectImage.bind(this,imageUri3)&#125;&gt;</div><div class="line">                            &lt;Image</div><div class="line">                                resizeMode=&apos;stretch&apos;</div><div class="line">                                style=&#123;[Styles.postCameraRollPhoto]&#125;</div><div class="line">                                source=&#123;&#123;uri: imageUri3&#125;&#125; /&gt;</div><div class="line">                        &lt;/TouchableOpacity&gt;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;[Styles.postContainer, Styles.bgColorWhite]&#125;&gt;</div><div class="line">                &lt;TextInput</div><div class="line">                    style=&#123;Styles.postTextInput&#125;</div><div class="line">                    multiline=&#123;true&#125;</div><div class="line">                    placeholder=&apos;这一刻的想法...&apos;</div><div class="line">                    placeholderTextColor=&#123;&apos;#f8f8f8&apos;&#125;</div><div class="line">                    onChangeText=&#123;(text) =&gt; this.setState(&#123;text&#125;)&#125;</div><div class="line">                    defaultValue=&#123;this.state.placeHolder&#125;</div><div class="line">                    value=&#123;this.state.text&#125;/&gt;</div><div class="line">                &lt;Image</div><div class="line">                    resizeMode=&apos;stretch&apos;</div><div class="line">                    style=&#123;[Styles.postPreviewPhoto]&#125;</div><div class="line">                    source=&#123;&#123;uri: this.state.selected&#125;&#125;/&gt;</div><div class="line">                &lt;TouchableOpacity style=&#123;[Styles.postButton,Styles.bgColorLightGray]&#125;&gt;</div><div class="line">                    &lt;Text style=&#123;[Styles.postButtonText]&#125;&gt;发布&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">                &lt;ScrollView style=&#123;[Styles.postCameraRoll]&#125;&gt;</div><div class="line">                    &lt;View&gt;</div><div class="line">                        &#123;photosView&#125;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                &lt;/ScrollView&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><ul>
<li>CameraRoll.getPhotos(fetchParams)<br>  返回的是Promise</li>
</ul>
<h3 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h3><ul>
<li><p>(iOS)解决ReactNative使用CameraRoll时undefined错误</p>
<p>  1, 将 node_modules/react-native/Libraries/CameraRoll/RCTCameraRoll.xcodeproj 工程添加到现有工程中<br>  2, 添加静态库依赖： (Build Phases -&gt; Binary With Libraries -&gt; libRCTCameraRoll.a)</p>
</li>
<li><p>(iOS)NSPhotoLibraryUsageDescription key must be present in Info.plist to use camera roll.</p>
<p>  在info.plist添加键值对</p>
<p>  1， Privacy - Camera Usage Description  使用相册<br>  2， Privacy - Photo Library Usage Description 使用相机</p>
</li>
<li><p>(Android)Error: /path/to/file: open failed: ENOENT (No such file or directory)<br>  Android上出现bug，还没有解决，待续…</p>
</li>
</ul>
<h3 id="新技能GET"><a href="#新技能GET" class="headerlink" title="新技能GET"></a>新技能GET</h3><p>＊ onPress 事件在<image>中失效，如果给<image>加onPress事件，需要用<touchableopacity>包裹</touchableopacity></image></image></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableOpacity onPress=&#123;()=&gt;alert(1)&#125;&gt;</div><div class="line">	&lt;Image /&gt;</div><div class="line">&lt;/TouchableOpacity&gt;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;CameraRoll模块提供了访问本地相册的功能。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="CameraRoll" scheme="http://www.nealma.com/tags/CameraRoll/"/>
    
  </entry>
  
  <entry>
    <title>React Native (五) ListView 组件</title>
    <link href="http://www.nealma.com/2016/07/28/react-native-5-listview/"/>
    <id>http://www.nealma.com/2016/07/28/react-native-5-listview/</id>
    <published>2016-07-28T04:46:45.000Z</published>
    <updated>2016-11-17T01:58:44.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>ListView组件是每个App都用到的核心组件，RN当然也不能少。
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>ListView组件是每个App都用到的核心组件，RN当然也不能少。
</code></pre><p><img src="/images/listview.gif" alt=""></p>
<pre><code>开发环境：
OS: Mac 10.11.6
Xcode: Version 8.0 (8A218a)
</code></pre><h3 id="核心配置介绍"><a href="#核心配置介绍" class="headerlink" title="核心配置介绍"></a>核心配置介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">...</div><div class="line">constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    const ds = new ListView.DataSource(&#123;</div><div class="line">        rowHasChanged: (r1, r2) =&gt; r1 !== r2, //1, 对变化的行渲染</div><div class="line">        sectionHeaderHasChanged : (s1, s2) =&gt; s1 !== s2 //2, 分组头部信息变更</div><div class="line">    &#125;);</div><div class="line">    let rowData = Array.from(new Array(10)).map((val, i) =&gt; (&#123;title: &apos;初始化数据 &apos; + i&#125;));</div><div class="line">    this.state = &#123;</div><div class="line">        dataSource: ds.cloneWithRows(rowData),</div><div class="line">        data: rowData,</div><div class="line">        isLoaded: false,</div><div class="line">        isRefreshing: false</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">render() &#123;</div><div class="line">    if (!this.state.isLoaded) &#123;//3, loading</div><div class="line">        return &lt;Loading/&gt;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return (</div><div class="line">        &lt;ListView</div><div class="line">            style=&#123;styles.container&#125;</div><div class="line">            dataSource=&#123;this.state.dataSource&#125;/* 要渲染的数据源，类型是数组 */</div><div class="line">            renderRow=&#123;(rowData) =&gt; this._renderRowView(rowData, this._onPress)&#125;</div><div class="line">            onEndReached=&#123;this._handleLoadMore.bind(this)&#125; /* 滑动偏移量 &gt; onEndReachedThreshold的像素值时，触发 */</div><div class="line">            onEndReachedThreshold=&#123;5&#125; /* 调用onEndReached之前的临界值，单位是像素 */</div><div class="line">            initialListSize=&#123;8&#125; /* 初始值 */</div><div class="line">            pageSize=&#123;8&#125;/* 每次事件循环（每帧）渲染的行数 */</div><div class="line">            renderHeader=&#123; this._renderHeader.bind(this)&#125;</div><div class="line">            renderFooter=&#123;this._renderFooter.bind(this)&#125;</div><div class="line">            renderSectionHeader=&#123;this._renderSectionHeader.bind(this)&#125;</div><div class="line">            refreshControl=&#123;</div><div class="line">                &lt;RefreshControl // 下拉刷新</div><div class="line">                    refreshing=&#123;this.state.isRefreshing&#125;</div><div class="line">                    onRefresh=&#123;this._onRefresh.bind(this)&#125;/* 下拉刷新时，触发此事件*/</div><div class="line">                    title=&#123;this.state.isRefreshing? &apos;刷新中....&apos;:&apos;下拉刷新&apos;&#125;</div><div class="line">                    colors=&#123;[&apos;#fb96cf&apos;, &apos;#fb96cf&apos;,&apos;#fb96cf&apos;,&apos;#fb96cf&apos;]&#125;</div><div class="line">                    tintColor=&apos;#fb96cf&apos;</div><div class="line">                    progressBackgroundColor=&quot;#fb96cf&quot;</div><div class="line">                /&gt;</div><div class="line">            &#125;</div><div class="line">        /&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="添加loading状态"><a href="#添加loading状态" class="headerlink" title="添加loading状态"></a>添加loading状态</h3><pre><code>获取网络数据，必然会消耗时间。在等待的过程中，为了给用户很好的提示，我们都会添加loading图标，
如果什么都没有，让用户傻傻的干等，用户也不会对你的app有好的印象
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Loading extends Component &#123;</div><div class="line">    render()&#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">                &lt;View style=&#123;styles.loading&#125;&gt;</div><div class="line">                    &lt;ActivityIndicator</div><div class="line">                        size=&apos;large&apos;</div><div class="line">                        color=&apos;#eabb33&apos;/&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="列表中Item的onPress事件"><a href="#列表中Item的onPress事件" class="headerlink" title="列表中Item的onPress事件"></a>列表中Item的onPress事件</h3><pre><code>因为this的变更问题，_renderRowView做如下修改，onPress作为传递的处理函数
这里如果你用this._onPress, 会抛出异常，就是this已经不是原来的this了，
但是onPress还是原来的onPress。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_renderRowView(rowData, onPress) &#123;</div><div class="line">    return (</div><div class="line">        &lt;TouchableOpacity</div><div class="line">            underlayColor=&apos;#484848&apos;</div><div class="line">            onPress=&#123;(rowData) =&gt; onPress(rowData)&#125;&gt;</div><div class="line">            &lt;View style=&#123;styles.row&#125;&gt;</div><div class="line">                &lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;#c8c7cc&apos;&#125;&#125;/&gt;</div><div class="line">                &lt;View style=&#123;&#123;flex: 20, backgroundColor: &apos;#EFE&apos;,justifyContent: &apos;center&apos;, alignItems: &apos;center&apos; &#125;&#125;&gt;</div><div class="line">                    &lt;Text style=&#123;&#123;</div><div class="line">                        borderColor: &apos;#d1d1d1&apos;,</div><div class="line">                        borderWidth: 2,</div><div class="line">                        borderRadius: 5 &#125;&#125;&gt;&#123;rowData.title&#125;&lt;/Text&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        &lt;/TouchableOpacity&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><pre><code>需要用RefreshControl组件，通过isRefreshing改变 正在刷新(true)、刷新完成(false),
onRefresh触发该事件，进入onRefresh时，设置isRefreshing=true,处理完成onRefresh时，设置isRefreshing=false
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">_onRefresh() &#123;</div><div class="line">    // 刷新</div><div class="line">    this.setState(&#123;isRefreshing: true&#125;);</div><div class="line">    console.log(&apos;refresh&apos;, this.state.data);</div><div class="line">    setTimeout(() =&gt; &#123;</div><div class="line">        this._onFetch(false);</div><div class="line">        this.setState(&#123;isRefreshing: false&#125;);</div><div class="line">    &#125;,2000);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Load-More-指示器"><a href="#Load-More-指示器" class="headerlink" title="Load More 指示器"></a>Load More 指示器</h3><pre><code>ListView可以使用renderFooter属性实现加载更多指示器，这里只用简单的文字实现，更多的效果请自行玩耍
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">_renderFooter()&#123;</div><div class="line">    return(</div><div class="line">        &lt;Footer /&gt;</div><div class="line">    );</div><div class="line">&#125;</div><div class="line">...</div><div class="line"></div><div class="line">class Footer extends Component &#123;</div><div class="line">    render()&#123;</div><div class="line">        return(</div><div class="line">            &lt;StaticContainer&gt;</div><div class="line">                &lt;View style=&#123;&#123; flex:1, flexDirection: &apos;row&apos;, justifyContent: &apos;space-between&apos;,</div><div class="line">                    alignItems: &apos;center&apos;, height:50, backgroundColor:&apos;#fb96cf&apos;&#125;&#125;&gt;</div><div class="line">                    &lt;Text&gt;&lt;/Text&gt;</div><div class="line">                    &lt;Text&gt;加载更多&lt;/Text&gt;</div><div class="line">                    &lt;Text&gt;&lt;/Text&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/StaticContainer&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="有关显示隐藏"><a href="#有关显示隐藏" class="headerlink" title="有关显示隐藏"></a>有关显示隐藏</h3><pre><code>RN中没有display:none可用，可以换一种方式实现
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isHidden?&lt;View/&gt;:null</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>这里用到了StaticContainer，据说性能好，没有具体看呢？了解的同学可以给我留言
：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;ListView组件是每个App都用到的核心组件，RN当然也不能少。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="Listview" scheme="http://www.nealma.com/tags/Listview/"/>
    
  </entry>
  
  <entry>
    <title>React Native (四) react-native-side-menu组件</title>
    <link href="http://www.nealma.com/2016/07/28/react-native-4-sidemenu/"/>
    <id>http://www.nealma.com/2016/07/28/react-native-4-sidemenu/</id>
    <published>2016-07-28T03:46:45.000Z</published>
    <updated>2016-11-17T01:58:57.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>侧滑菜单在实际工作中，很常见，是比较流行的一种设计，
RN怎会没有呢。一开始接触RN，总是乐于社区的活跃，你需要什么，大都会能找到
现成，最初使用了react-native-jelly-side-menu，但是在安卓上死活run不起来，
后来辗转到了react-native-side-menu,可以很好的在iOS、Android中玩耍。
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>侧滑菜单在实际工作中，很常见，是比较流行的一种设计，
RN怎会没有呢。一开始接触RN，总是乐于社区的活跃，你需要什么，大都会能找到
现成，最初使用了react-native-jelly-side-menu，但是在安卓上死活run不起来，
后来辗转到了react-native-side-menu,可以很好的在iOS、Android中玩耍。
</code></pre><p><img src="/images/sidemenu.gif" alt=""></p>
<p>开发环境<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="react-native-jelly-side-menu-爱恨"><a href="#react-native-jelly-side-menu-爱恨" class="headerlink" title="react-native-jelly-side-menu 爱恨"></a>react-native-jelly-side-menu 爱恨</h3><pre><code>jelly的动画很吸引我，就用了
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import JellySideMenu from &apos;react-native-jelly-side-menu&apos;;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">#render</div><div class="line"></div><div class="line">render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;#FF6644&apos;&#125;&#125;&gt;</div><div class="line">                &lt;JellySideMenu</div><div class="line">                    ref=&#123;(view) =&gt; &#123;this.jsm = view&#125;&#125;</div><div class="line">                    fill=&#123;&quot;#FFF&quot;&#125; fillOpacity=&#123;1.0&#125;</div><div class="line">                    renderMenu=&#123;this.renderMenu&#125;&gt;</div><div class="line">                    &lt;TouchableOpacity onPress=&#123;() =&gt; &#123;this.jsm.toggleSideMenu(true)&#125;&#125;&gt;</div><div class="line">	                    &lt;Icon name=&quot;navicon&quot; size=&#123;30&#125; color=&quot;#4F8EF7&quot; style=&#123;&#123;marginTop: 20, marginLeft: 20&#125;&#125;/&gt;  //1</div><div class="line">	                &lt;/TouchableOpacity&gt;</div><div class="line">                &lt;/JellySideMenu&gt;</div><div class="line"></div><div class="line">                &lt;TouchableOpacity onPress=&#123;() =&gt; &#123;this.jsm.toggleSideMenu(true)&#125;&#125;&gt;</div><div class="line">                    &lt;Icon name=&quot;navicon&quot; size=&#123;30&#125; color=&quot;#4F8EF7&quot; style=&#123;&#123;marginTop: 20, marginLeft: 20&#125;&#125;/&gt;  //2</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        )</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<pre><code>如果按照官方的demo，即代码1处，当滑出左侧菜单，关闭，再次点击1处的button，此时事件失效。
你可以把open menu放在2处，可以很好的工作。
</code></pre><h3 id="追加1-换回官方的react-native-side-menu"><a href="#追加1-换回官方的react-native-side-menu" class="headerlink" title="追加1: 换回官方的react-native-side-menu"></a>追加1: 换回官方的react-native-side-menu</h3><pre><code>因为在android上运行的时候，报错了，联系作者没反应，自己短时间内无从下手，只好换了。
</code></pre><h3 id="react-native-side-menu-简单使用"><a href="#react-native-side-menu-简单使用" class="headerlink" title="react-native-side-menu 简单使用"></a>react-native-side-menu 简单使用</h3><pre><code>给出一个简单的例子
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">export  default  class Main extends Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    updateMenuState(isOpen) &#123;</div><div class="line">        this.setState(&#123; isOpen, &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    onMenuItemSelected = (item) =&gt; &#123;</div><div class="line">        //TODO：单击菜单的后续动作, 跳转到相应的页面</div><div class="line">        alert(&quot;单击 &quot; + item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const menu = &lt;LeftView onItemSelected=&#123;this.onMenuItemSelected&#125; /&gt;;</div><div class="line">        return (</div><div class="line">            &lt;SideMenu</div><div class="line">                menu=&#123;menu&#125; /* 设置左侧页面(菜单) */</div><div class="line">                isOpen=&#123;this.state.isOpen&#125;/* 状态控制: true 打开，false 关闭*/</div><div class="line">                onChange=&#123;(isOpen) =&gt; this.updateMenuState(isOpen)&#125;&gt;</div><div class="line">                &lt;ContentView /&gt;</div><div class="line">            &lt;/SideMenu&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ContentView extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.page&#125;&gt;&lt;Text style=&#123;styles.pageContent&#125;&gt;Content&lt;/Text&gt;&lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class LeftView extends Component &#123;</div><div class="line"></div><div class="line">    static propTypes = &#123;</div><div class="line">        onItemSelected: React.PropTypes.func.isRequired,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;ScrollView scrollsToTop=&#123;true&#125; style=&#123;styles.menu&#125;&gt;</div><div class="line">                &lt;Text</div><div class="line">                    onPress=&#123;() =&gt; this.props.onItemSelected(&apos;first&apos;)&#125;</div><div class="line">                    style=&#123;styles.item&#125;&gt;</div><div class="line">                    First</div><div class="line">                &lt;/Text&gt;</div><div class="line"></div><div class="line">                &lt;Text</div><div class="line">                    onPress=&#123;() =&gt; this.props.onItemSelected(&apos;second&apos;)&#125;</div><div class="line">                    style=&#123;styles.item&#125;&gt;</div><div class="line">                    Second</div><div class="line">                &lt;/Text&gt;</div><div class="line"></div><div class="line">                &lt;Text</div><div class="line">                    onPress=&#123;() =&gt; this.props.onItemSelected(&apos;third&apos;)&#125;</div><div class="line">                    style=&#123;styles.item&#125;&gt;</div><div class="line">                    Third</div><div class="line">                &lt;/Text&gt;</div><div class="line">            &lt;/ScrollView&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<pre><code>在使用过程中，比较费解的是onMenuItemSelected, 该函数在LeftView中进行声明并指定类型为function，
并没有实现，而是留给引用者去实现具体业务， 也就是TODO的位置。
</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>menu的导航需要Navigator组件配置使用，后面会做个结合使用的例子。

：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;侧滑菜单在实际工作中，很常见，是比较流行的一种设计，
RN怎会没有呢。一开始接触RN，总是乐于社区的活跃，你需要什么，大都会能找到
现成，最初使用了react-native-jelly-side-menu，但是在安卓上死活run不起来，
后来辗转到了react-native-side-menu,可以很好的在iOS、Android中玩耍。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="Slide Menu" scheme="http://www.nealma.com/tags/Slide-Menu/"/>
    
  </entry>
  
  <entry>
    <title>React Native (三) react-native-vector-icons 图标组件</title>
    <link href="http://www.nealma.com/2016/07/27/react-native-3-icons/"/>
    <id>http://www.nealma.com/2016/07/27/react-native-3-icons/</id>
    <published>2016-07-27T03:46:45.000Z</published>
    <updated>2016-11-17T01:59:08.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>react-native-vector-icons组件,
对于非设计人员，可以免费使用更多的icons资源
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>react-native-vector-icons组件,
对于非设计人员，可以免费使用更多的icons资源
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install react-native-vector-icons --save</div><div class="line">rnpm link</div></pre></td></tr></table></figure>
<ul>
<li>iOS<br>  之后会在Xcode中的info.plis里面看到如下键值信息：<br>  Fonts provided by application（item0-item7）<br>  如果没有此项信息，需要手动添加Fonts provided by application。</li>
<li>Android<br>  Edit android/app/build.gradle ( NOT android/build.gradle ) and add the following:<br>  添加如下内容:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">project.ext.vectoricons = [</div><div class="line">    iconFontNames: [ &apos;MaterialIcons.ttf&apos;, &apos;EvilIcons.ttf&apos;, &apos;FontAwesome.ttf&apos;, &apos;Entypo.fft&apos;, &apos;EvilIcons.ttf&apos;, &apos;Octicons.ttf&apos;, &apos;Zocial.ttf&apos;, &apos;Ionicons.ttf&apos; ] // Name of the font files you want to copy</div><div class="line">]</div><div class="line"></div><div class="line">apply from: &quot;../../node_modules/react-native-vector-icons/fonts.gradle&quot;</div></pre></td></tr></table></figure>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import Icon from &apos;react-native-vector-icons/FontAwesome&apos;;</div><div class="line"></div><div class="line">&lt;Icon name=&quot;navicon&quot; size=&#123;30&#125; color=&quot;#4F8EF7&quot; style=&#123;&#123;marginTop: 20, marginLeft: 20&#125;&#125;/&gt;</div></pre></td></tr></table></figure>
<pre><code>FontAwesome网站：http://fontawesome.io/icons/,其中name的值对应网站中每个icon的名字。
</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>资源添加玩，别忘了重新run哦。

：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;react-native-vector-icons组件,
对于非设计人员，可以免费使用更多的icons资源
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="icons" scheme="http://www.nealma.com/tags/icons/"/>
    
  </entry>
  
</feed>
