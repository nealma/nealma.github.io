<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>neal.ma</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nealma.com/"/>
  <updated>2016-10-29T18:16:11.000Z</updated>
  <id>http://www.nealma.com/</id>
  
  <author>
    <name>neal.ma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Native (十二) 导出ipa遇到的问题</title>
    <link href="http://www.nealma.com/2016/09/03/react-native-12-archive/"/>
    <id>http://www.nealma.com/2016/09/03/react-native-12-archive/</id>
    <published>2016-09-03T06:46:45.000Z</published>
    <updated>2016-10-29T18:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>导出分发包的过程中，遇到了许多小问题，做个总结吧
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="For-iOS"><a href="#For-iOS" class="headerlink" title="For iOS"></a>For iOS</h3><ul>
<li><p>突然Products中的archive变成灰色，不能archive了</p>
<p>  把device换成Generic iOS Device</p>
</li>
<li><p>在模拟器中运行出现</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang: error: no such file or directory: &apos;/Users/neal/Library/Developer/Xcode/DerivedData/haiji-hakrywogbjraxiheecjpbwbxsood/Build/Products/Debug-iphonesimulator/libReact.a&apos;</div></pre></td></tr></table></figure>
<pre><code>把Build Settings -&gt; Architectures -&gt; Build Active Architectures Only 设置成 NO
</code></pre><ul>
<li><p>修改应用名称</p>
<p>  还有一点就是，App name ，默认会是你的项目的名称。我们呢，都用中文，当然得提前设置了。</p>
<p>  在哪设置呢？</p>
<p>  在Xcode中，单击项目，左侧出现跟项目相关的信息。<br>  选择info -&gt; Custom iOS Target Properties , 添加Bundle display name,值部分就是你要填的<br>  显示在AppIcon 下面的文本部分了。</p>
</li>
</ul>
<p><img src="/images/appicon.png" alt=""></p>
<h3 id="For-Android"><a href="#For-Android" class="headerlink" title="For Android"></a>For Android</h3><ul>
<li><p>修改应用icon</p>
<p>   把 ic_launcher.png 放到文件夹 [PrjDir]/android/app/src/main/res/mipmap-*.</p>
<p>  相应的尺寸：</p>
<pre><code>72*72 ic_launcher.png to mipmap-hdpi.
48*48 ic_launcher.png to mipmap-mdpi.
96*96 ic_launcher.png to mipmap-xhdpi.
144*144 ic_launcher.png to mipmap-xxhdpi.
</code></pre></li>
<li><p>修改应用名称</p>
<p>  在a[PrjDir]/ndroid/app/src/main/res/values/strings.xml中，<br>  找到<string name="app_name">MyProject</string>, MyProject替换为你自己的应用名称即可。</p>
</li>
</ul>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;导出分发包的过程中，遇到了许多小问题，做个总结吧
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开发环境：&lt;br&gt;OS: Mac 10.1
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="ipa" scheme="http://www.nealma.com/tags/ipa/"/>
    
  </entry>
  
  <entry>
    <title>React Native (十一) bundle打离线</title>
    <link href="http://www.nealma.com/2016/09/02/react-native-11-bundle/"/>
    <id>http://www.nealma.com/2016/09/02/react-native-11-bundle/</id>
    <published>2016-09-02T06:46:45.000Z</published>
    <updated>2016-10-31T02:53:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>在开发阶段，我们都是通过模拟器，或者自己的手机，直接连接Xcode和Android Studio,
这样调试代码非常方便，然而我们的App开发好了，最终的目的是上线App Store和各个Android市场。
最后还是要进行打包，把所有的资源打包成一个最终能够安装的应用包。iOS对应的ipa，Android对应的apk。

那如何打包呢？
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="react-native-bundle"><a href="#react-native-bundle" class="headerlink" title="react-native bundle"></a>react-native bundle</h3><ul>
<li>–entry-file ,ios或者android入口的js名称，比如index.ios.js</li>
<li>–platform ,平台名称(ios或者android)</li>
<li>–dev ,设置为false的时候将会对JavaScript代码进行优化处理</li>
<li>–bundle-output, 生成的jsbundle文件的名称，比如./ios/index.ios.jsbundle</li>
<li><p>–assets-dest 图片以及其他资源存放的目录,比如./ios 默认会生成一个新的文件夹assets</p>
</li>
<li><p>For iOS</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --entry-file index.ios.js --bundle-output ./ios/main.jsbundle --platform ios --assets-dest ./ios --dev false</div></pre></td></tr></table></figure>
<ul>
<li>For Android<br>  跟iOS差不多，只不过变量变为android，同时资源文件指定到现有的文件即可。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --entry-file index.android.js --bundle-output ./android/app/src/main/assets/index.android.bundle --platform android --assets-dest ./android/app/src/main/res --dev false</div></pre></td></tr></table></figure>
<ul>
<li>Repeat Work</li>
</ul>
<p>这样的一串命令以后还得用呢，那是不是可以写个脚本留给以后重复用呢？<br>其实可以利用npm的脚本就可以，在package.json中添加（bundle-ios）如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;,</div><div class="line">    &quot;bundle-ios&quot;: &quot;react-native bundle --entry-file index.ios.js --bundle-output ./ios/main.jsbundle --platform ios --assets-dest ./ios --dev false&quot;,</div><div class="line">    &quot;bundle-android&quot;: &quot;react-native bundle --entry-file index.android.js --bundle-output ./android/app/src/main/assets/index.android.bundle --platform android --assets-dest ./android/app/src/main/res --dev false&quot;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>以后每次打包直接运行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm run bundle-ios</div><div class="line"></div><div class="line">npm run bundle-android</div></pre></td></tr></table></figure></p>
<h3 id="把打包好的资源文件添加到Xcode"><a href="#把打包好的资源文件添加到Xcode" class="headerlink" title="把打包好的资源文件添加到Xcode"></a>把打包好的资源文件添加到Xcode</h3><ul>
<li>添加文件到项目</li>
</ul>
<p><img src="/images/addfilesto.png" alt=""></p>
<ul>
<li>找到刚才的assets文件夹</li>
</ul>
<p><img src="/images/assets.png" alt=""></p>
<h3 id="修改程序加载js的方式-AppDelegate-m"><a href="#修改程序加载js的方式-AppDelegate-m" class="headerlink" title="修改程序加载js的方式(AppDelegate.m)"></a>修改程序加载js的方式(AppDelegate.m)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</div><div class="line"></div><div class="line">  jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;在开发阶段，我们都是通过模拟器，或者自己的手机，直接连接Xcode和Android Studio,
这样调试代码非常方便，然
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="bundle" scheme="http://www.nealma.com/tags/bundle/"/>
    
  </entry>
  
  <entry>
    <title>React Native (十) 给App设置icon</title>
    <link href="http://www.nealma.com/2016/09/01/react-native-10-app-icon/"/>
    <id>http://www.nealma.com/2016/09/01/react-native-10-app-icon/</id>
    <published>2016-09-01T06:46:45.000Z</published>
    <updated>2016-10-29T22:59:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>App开发好了，在你的手机桌面上就能看到，一个好的icon会给人耳目一新的感觉。
作为一个专业搬砖的来说，很有难度。主要看你的设计和视觉天赋了。我们一般运行个helloworld，
你会在手机上找你的App，但都是各个平台默认的，iOS里面是多个同心圆，一环一环的，
具体叫啥还真不知道，Android则是那个呆萌的小机器人。

那如何替换成我们自己的icon呢？
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="For-iOS"><a href="#For-iOS" class="headerlink" title="For iOS"></a>For iOS</h3><ul>
<li><p>修改应用icon</p>
<p>  在Xcode中单击Images.xcassets文件夹，右侧会看到AppIcon。<br>  单击AppIcon，映入你眼帘的是一个个待填补的虚线😊方框。<br>  看到这个你不要慌，也不用管这些是什么，你只看每组对应说明的单位即可。</p>
<p>  比如第一组20pt，2x就是40pt，3x就是60pt，我都是用的像素，也没问题。<br>  按照这些尺寸制作icon即可，其他以此类推。</p>
<p>  做好所有尺寸的icon后，拖拽到相应的位置上就OK。<br>  即：更新不同的尺寸 29pt 29pt<em>2 29pt</em>3 40pt<em>2 40pt</em>3 57pt 57pt<em>2 60pt</em>2 60pt*3</p>
</li>
<li><p>修改应用名称</p>
<p>  还有一点就是，App name ，默认会是你的项目的名称。我们呢，都用中文，当然得提前设置了。</p>
<p>  在哪设置呢？</p>
<p>  在Xcode 8中，单击项目，左侧出现跟项目相关的信息。<br>  选择Targets -&gt; General -&gt; Display Name,值部分就是你要填的<br>  显示在AppIcon 下面的文本部分了。</p>
</li>
</ul>
<p><img src="/images/appicon.png" alt=""></p>
<h3 id="For-Android"><a href="#For-Android" class="headerlink" title="For Android"></a>For Android</h3><ul>
<li><p>修改应用icon</p>
<p>   把 ic_launcher.png 放到文件夹 [PrjDir]/android/app/src/main/res/mipmap-*.</p>
<p>  相应的尺寸：</p>
<pre><code>72*72 ic_launcher.png to mipmap-hdpi.
48*48 ic_launcher.png to mipmap-mdpi.
96*96 ic_launcher.png to mipmap-xhdpi.
144*144 ic_launcher.png to mipmap-xxhdpi.
</code></pre></li>
<li><p>修改应用名称</p>
<p>  在a[PrjDir]/ndroid/app/src/main/res/values/strings.xml中，<br>  找到<string name="app_name">MyProject</string>, MyProject替换为你自己的应用名称即可。</p>
</li>
</ul>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;App开发好了，在你的手机桌面上就能看到，一个好的icon会给人耳目一新的感觉。
作为一个专业搬砖的来说，很有难度。主要看你
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="AppIcon" scheme="http://www.nealma.com/tags/AppIcon/"/>
    
      <category term="AppName" scheme="http://www.nealma.com/tags/AppName/"/>
    
  </entry>
  
  <entry>
    <title>React Native (九) TextInput 文本输入</title>
    <link href="http://www.nealma.com/2016/08/31/react-native-9-TextInput/"/>
    <id>http://www.nealma.com/2016/08/31/react-native-9-TextInput/</id>
    <published>2016-08-31T03:46:45.000Z</published>
    <updated>2016-10-29T07:44:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>TextInput组件作为基础部分，必不可少。
我们在做登录、提交信息时经常使用。
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="简单用例"><a href="#简单用例" class="headerlink" title="简单用例"></a>简单用例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;TextInput</div><div class="line">    style=&#123;Styles.postTextInput&#125;</div><div class="line">    autoCapitalize=&quot;none&quot;</div><div class="line">    multiline=&#123;true&#125; //是否多行</div><div class="line">    keyboardType=&apos;numeric&apos; //键盘类型：default, numeric, </div><div class="line">    placeholder=&#123;this.state.placeHolder&#125; //占位字符 背景提示,这里犯了错误，当时把颜色和背景设置一样了，死活看不到，满眼都是泪啊</div><div class="line">    placeholderTextColor=&quot;#bfbfbf&quot; //占位符颜色</div><div class="line">    onChangeText=&#123;(text) =&gt; this.setState(&#123;text&#125;)&#125; //文本改变时触发这个事件, 获取本文时需要这个方法</div><div class="line">/&gt;</div><div class="line"></div><div class="line"># keyboardType决定键盘类型,是个枚举</div><div class="line"># enum(&apos;default&apos;, &quot;ascii-capable&quot;, &apos;numbers-and-punctuation&apos;, &apos;url&apos;, &apos;number-pad&apos;, &apos;phone-pad&apos;, </div><div class="line">#&apos;name-phone-pad&apos;, &apos;email-address&apos;, &apos;decimal-pad&apos;, &apos;twitter&apos;, &apos;web-search&apos;, &quot;numeric&quot;)</div></pre></td></tr></table></figure>
<h3 id="获取文本内容"><a href="#获取文本内容" class="headerlink" title="获取文本内容"></a>获取文本内容</h3><pre><code>在onChangeText中，我们已经告知文本内容，并实时保存在了state中，

我们只要在相应的处理函数中进行处理即可。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">_handleInput() &#123;</div><div class="line">    console.log(this.state.text);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设置width和height"><a href="#设置width和height" class="headerlink" title="设置width和height"></a>设置width和height</h3><pre><code>如果你没有设置TextInput的样式，并且没有文本内容，那么默认是wrap的，因为TextInput不是块元素，
初次调试的时候，总是觉得很蹊跷，怎么看不到内容呢？在这里耽误了很长时间...
</code></pre><h3 id="获得焦点，呼出键盘"><a href="#获得焦点，呼出键盘" class="headerlink" title="获得焦点，呼出键盘"></a>获得焦点，呼出键盘</h3><pre><code>从使用来看，当你单击输入框的时候，如果单击的位置偏上了或者偏下了，都不会触发onFocus事件，这时候不要谎，
单击中间部分，看到键盘了吧。

当然如果是iOS，需要打开Simulator-&gt;Hardware-&gt;Keyboard-&gt;Toggle Software Keyboard
快捷键   Command + K
</code></pre><h3 id="失去焦点，隐藏键盘"><a href="#失去焦点，隐藏键盘" class="headerlink" title="失去焦点，隐藏键盘"></a>失去焦点，隐藏键盘</h3><pre><code>这里有两个方法，也是经过搜索和尝试的，都可以正常满足你的需求。
</code></pre><ul>
<li>把整个视图换成ScrollView</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ScrollView style=&#123;styles.container&#125; keyboardShouldPersistTaps=&#123;false&#125;&gt;</div><div class="line">    &lt;TextInput</div><div class="line">        placeholder=&quot;Post Title&quot;</div><div class="line">        onChange=&#123;(event) =&gt; this.updateTitle(event.nativeEvent.text)&#125;</div><div class="line">        style=&#123;styles.default&#125;/&gt;</div><div class="line"> &lt;/ScrollView&gt;</div></pre></td></tr></table></figure>
<ul>
<li>使用dismissKeyboard和TouchableWithoutFeedback配合</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import DismissKeyboard from &apos;dismissKeyboard&apos;;</div><div class="line"></div><div class="line">&lt;View style=&#123;styles.container&#125;&gt;</div><div class="line"></div><div class="line">  &lt;TouchableWithoutFeedback onPress=&#123; DismissKeyboard &#125;&gt;</div><div class="line"></div><div class="line">    &lt;View&gt;</div><div class="line">      &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class="line">        Welcome to React Native!</div><div class="line">      &lt;/Text&gt;</div><div class="line">      &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">        To get started, edit index.ios.js</div><div class="line">      &lt;/Text&gt;</div><div class="line">      &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">        Press Cmd+R to reload,&#123;&apos;\n&apos;&#125;</div><div class="line">        Cmd+D or shake for dev menu</div><div class="line">      &lt;/Text&gt;</div><div class="line">      &lt;TextInput style=&#123;&#123;height: 40, borderColor: &apos;gray&apos;, borderWidth: 1&#125;&#125; /&gt;</div><div class="line">    &lt;/View&gt;</div><div class="line">  &lt;/TouchableWithoutFeedback&gt;</div><div class="line"></div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<h3 id="Android-取消默认文本下划线"><a href="#Android-取消默认文本下划线" class="headerlink" title="Android 取消默认文本下划线"></a>Android 取消默认文本下划线</h3><pre><code>一开始不知道设置这个属性，导致在Android平台上出现不一致的风格。如果匹配还好，

事实上，很别扭。一开始以为可以通过设置边框可以改变，通过尝试是行不通的。后来发现

下面的属性，一下子解决了我的问题。还是得看书啊
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#TextInput 属性</div><div class="line">   underlineColorAndroid=&#123;&apos;transparent&apos;&#125;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;TextInput组件作为基础部分，必不可少。
我们在做登录、提交信息时经常使用。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开发环境
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="TextInput" scheme="http://www.nealma.com/tags/TextInput/"/>
    
  </entry>
  
  <entry>
    <title>React Native (八) 自定义组件</title>
    <link href="http://www.nealma.com/2016/08/30/react-native-8-define-component/"/>
    <id>http://www.nealma.com/2016/08/30/react-native-8-define-component/</id>
    <published>2016-08-30T03:46:45.000Z</published>
    <updated>2016-10-28T05:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>再前面一篇文章中，我使用了listview，当加载到最后，没有更多了，要更新提示；
一个方法是定义两个class，一个加载更多Footer，一个没有更多啦Footer, 很显热
只是为了一个string的变量，定义两个class有点浪费，从组件服用角度也是不合理的。
那怎么办呢？下面慢慢分解...
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="首先要定义一个简单的calss"><a href="#首先要定义一个简单的calss" class="headerlink" title="首先要定义一个简单的calss"></a>首先要定义一个简单的calss</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">export default class Footer extends React.Component &#123;</div><div class="line">	componentWillMount()&#123;//主要是绘制界面前，做一些初始化的工作</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;//主要是绘制界面后，相关操作</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">    render() &#123;//必须有的函数，主要是绘制界面，可多次调用。</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="props-和-state"><a href="#props-和-state" class="headerlink" title="props 和 state"></a>props 和 state</h3><ul>
<li><p>props<br>  是组件的属性，定义组件的时候key部分已经定义好了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#125; /&gt;</div><div class="line"></div><div class="line">#style 就是属性，style就是key</div></pre></td></tr></table></figure>
</li>
<li><p>state<br>  是状态，是变化的，render函数会随着state的变化而执行<br>  注意以下两种写法,<br>  ＃1，是初始化数据，不会调用render方法，可以在constructor中进行数据初始化<br>  ＃2，是状态更新，会调用render方法，切记在render中使用此种方法</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">＃1 </div><div class="line">this.state = &#123;</div><div class="line">            text: &apos;xxx&apos;</div><div class="line">        &#125;;</div><div class="line">＃2</div><div class="line">this.setState(&#123;</div><div class="line">                text: &apos;text&apos;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">#定义一个Footer组件</div><div class="line">class Footer extends Component &#123;</div><div class="line">    static propTypes = &#123;</div><div class="line">        text: React.PropTypes.string.isRequired,</div><div class="line">    &#125;;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        return(</div><div class="line">            &lt;View style=&#123;[Styles.footer, Styles.bgColorDarkRed]&#125;&gt;</div><div class="line">                &lt;Text&gt;&lt;/Text&gt;</div><div class="line">                &lt;Text style=&#123;[Styles.fontColorWhite, Styles.centerText]&#125;&gt;&#123;this.props.text&#125;&lt;/Text&gt;</div><div class="line">                &lt;Text&gt;&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">＃调用Footer</div><div class="line">class CallFooter extends Component &#123;</div><div class="line">    static propTypes = &#123;</div><div class="line">        text: React.PropTypes.string.isRequired,</div><div class="line">    &#125;;</div><div class="line">    renderFooter()&#123;</div><div class="line">        let text = this.state.hasLoadMore ? &apos;努力加载中...&apos;:&apos;没有更多了:)~&apos;;</div><div class="line">        return (</div><div class="line">            &lt;Footer text=&#123;text&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        return(</div><div class="line">            &lt;View style=&#123;[Styles.footer, Styles.bgColorDarkRed]&#125;&gt;</div><div class="line">                &#123;this.renderFooter()&#125;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义属性问题"><a href="#自定义属性问题" class="headerlink" title="自定义属性问题"></a>自定义属性问题</h3><pre><code>在定义属性事件时，不要把自定义属性取名为系统函数名，比如你自己也定义onPress,此时不会工作。
</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;再前面一篇文章中，我使用了listview，当加载到最后，没有更多了，要更新提示；
一个方法是定义两个class，一个加载更
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>React Native (七) Navigator 导航组件</title>
    <link href="http://www.nealma.com/2016/07/30/react-native-7-navigator/"/>
    <id>http://www.nealma.com/2016/07/30/react-native-7-navigator/</id>
    <published>2016-07-30T03:46:45.000Z</published>
    <updated>2016-10-24T16:11:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>Navigator组件作为基础部分，必不可少。前面我们使用了sidemenu，每个menu的触发事件都会跳到
一个新的视图，此时就要用Navigator了。说白了，就是控制路由的这么一个东西，从一个视图跳到另一个视图。
</code></pre><p><img src="/images/navigator.gif" alt=""></p>
<p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="首先要定义Navigator作为入口"><a href="#首先要定义Navigator作为入口" class="headerlink" title="首先要定义Navigator作为入口"></a>首先要定义Navigator作为入口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import FirstPage from &apos;./navigator-first-page&apos;;</div><div class="line"></div><div class="line">export default class Main extends React.Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        let defaultName = &apos;FirstPage&apos;;</div><div class="line">        let defaultComponent = FirstPage;</div><div class="line">        return (</div><div class="line">            &lt;Navigator</div><div class="line">                initialRoute=&#123;&#123; name: defaultName, component: defaultComponent &#125;&#125;</div><div class="line">                configureScene=&#123;(route) =&gt; &#123;</div><div class="line">                    return Navigator.SceneConfigs.VerticalDownSwipeJump;</div><div class="line">                &#125;&#125;</div><div class="line">                renderScene=&#123;(route, navigator) =&gt; &#123;</div><div class="line">                const Component = route.component;</div><div class="line">                    return (&lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;);</div><div class="line">                &#125;&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>＊ initialRoute: 初始化首屏视图，name可以看作页面的ID; component: 视图组件，即要显示的内容
＊ configureScene: 过场动画
＊ renderScene: 动态路由
</code></pre><h3 id="定义第一个页面navigator-first-page-js"><a href="#定义第一个页面navigator-first-page-js" class="headerlink" title="定义第一个页面navigator-first-page.js"></a>定义第一个页面navigator-first-page.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import SecondPage from &apos;./navigator-second-page&apos;;</div><div class="line"></div><div class="line">export default class FirstPage extends React.Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;&#125;;</div><div class="line">    &#125;</div><div class="line">    _pressButton() &#123;</div><div class="line">        const &#123; navigator &#125; = this.props;</div><div class="line">        if(navigator) &#123;</div><div class="line">            navigator.push(&#123;</div><div class="line">                name: &apos;SecondPage&apos;,</div><div class="line">                component: SecondPage</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;#fcb064&apos;, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class="line">                &lt;TouchableOpacity onPress=&#123;()=&gt;&#123;this._pressButton();&#125;&#125;&gt;</div><div class="line">                            &lt;Text style=&#123;&#123;height: 30, width: 80&#125;&#125;&gt;第一页&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定义第二个页面navigator-second-page-js"><a href="#定义第二个页面navigator-second-page-js" class="headerlink" title="定义第二个页面navigator-second-page.js"></a>定义第二个页面navigator-second-page.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">export default class SecondPage extends React.Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    _pressButton() &#123;</div><div class="line">        const &#123; navigator &#125; = this.props;</div><div class="line">        if(navigator) &#123;</div><div class="line">            //入栈出栈, 把当前的页面pop掉，返回到了上一个页面:FirstPage</div><div class="line">            navigator.pop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;#fb9696&apos;, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class="line">                &lt;TouchableOpacity onPress=&#123;()=&gt;&#123;this._pressButton();&#125;&#125;&gt;</div><div class="line">                    &lt;Text style=&#123;&#123;height: 30, width: 80&#125;&#125;&gt;第二页&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>总体上很清晰，如果涉及到事件，待续...
</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Navigator组件作为基础部分，必不可少。前面我们使用了sidemenu，每个menu的触发事件都会跳到
一个新的视图，
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="Navigator" scheme="http://www.nealma.com/tags/Navigator/"/>
    
  </entry>
  
  <entry>
    <title>React Native (六) CameraRoll 相册组件</title>
    <link href="http://www.nealma.com/2016/07/29/react-native-6-cameraroll/"/>
    <id>http://www.nealma.com/2016/07/29/react-native-6-cameraroll/</id>
    <published>2016-07-29T04:46:45.000Z</published>
    <updated>2016-10-24T04:56:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>CameraRoll模块提供了访问本地相册的功能。
</code></pre><p><img src="/images/cameraroll.gif" alt=""></p>
<p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="简单用例"><a href="#简单用例" class="headerlink" title="简单用例"></a>简单用例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">export default class HaiJiCameraRoll extends Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;</div><div class="line">            photos: [],</div><div class="line">            selected: &apos;&apos;,</div><div class="line">            placeHolder: &apos;这一刻的想法...&apos;,</div><div class="line">            text: null</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount() &#123;</div><div class="line">        let fetchParams = &#123;</div><div class="line">            first: 10,</div><div class="line">            assetType: &apos;Photos&apos;</div><div class="line">        &#125;;</div><div class="line">        CameraRoll.getPhotos(fetchParams).then((data) =&gt; &#123;</div><div class="line">            const edges = data.edges;</div><div class="line">            let photos = edges.map(photo=&gt;&#123;</div><div class="line">                return photo.node.image.uri</div><div class="line">            &#125;);</div><div class="line">            this.setState(&#123;</div><div class="line">                photos: photos</div><div class="line">            &#125;);</div><div class="line">        &#125;).catch(alert);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    selectImage(image) &#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            selected: image</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line"></div><div class="line">        const photos = this.state.photos || [];</div><div class="line">        let photosView = [];</div><div class="line">        for(let i = 0; i &lt; photos.length; i+=4) &#123;</div><div class="line">            let imageUri = photos[parseInt(i)];</div><div class="line">            let imageUri1 = photos[parseInt(i+1)];</div><div class="line">            let imageUri2 = photos[parseInt(i+2)];</div><div class="line">            let imageUri3 = photos[parseInt(i+3)];</div><div class="line">            photosView.push(</div><div class="line">                &lt;View style=&#123;Styles.postCameraRollRow&#125; key=&#123;i&#125;&gt;</div><div class="line">                    &lt;View style=&#123;Styles.container&#125;&gt;</div><div class="line">                        &lt;TouchableOpacity  onPress=&#123;this.selectImage.bind(this,imageUri)&#125;&gt;</div><div class="line">                            &lt;Image</div><div class="line">                                resizeMode=&apos;stretch&apos;</div><div class="line">                                style=&#123;[Styles.postCameraRollPhoto]&#125;</div><div class="line">                                source=&#123;&#123;uri: imageUri&#125;&#125; /&gt;</div><div class="line">                        &lt;/TouchableOpacity&gt;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                    &lt;View style=&#123;Styles.container&#125;&gt;</div><div class="line">                        &lt;TouchableOpacity  onPress=&#123;this.selectImage.bind(this,imageUri1)&#125;&gt;</div><div class="line">                            &lt;Image</div><div class="line">                                resizeMode=&apos;stretch&apos;</div><div class="line">                                style=&#123;[Styles.postCameraRollPhoto]&#125;</div><div class="line">                                source=&#123;&#123;uri: imageUri1&#125;&#125; /&gt;</div><div class="line">                        &lt;/TouchableOpacity&gt;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                    &lt;View style=&#123;Styles.container&#125;&gt;</div><div class="line">                        &lt;TouchableOpacity  onPress=&#123;this.selectImage.bind(this,imageUri2)&#125;&gt;</div><div class="line">                            &lt;Image</div><div class="line">                                resizeMode=&apos;stretch&apos;</div><div class="line">                                style=&#123;[Styles.postCameraRollPhoto]&#125;</div><div class="line">                                source=&#123;&#123;uri: imageUri2&#125;&#125; /&gt;</div><div class="line">                        &lt;/TouchableOpacity&gt;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                    &lt;View style=&#123;Styles.container&#125;&gt;</div><div class="line">                        &lt;TouchableOpacity  onPress=&#123;this.selectImage.bind(this,imageUri3)&#125;&gt;</div><div class="line">                            &lt;Image</div><div class="line">                                resizeMode=&apos;stretch&apos;</div><div class="line">                                style=&#123;[Styles.postCameraRollPhoto]&#125;</div><div class="line">                                source=&#123;&#123;uri: imageUri3&#125;&#125; /&gt;</div><div class="line">                        &lt;/TouchableOpacity&gt;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;[Styles.postContainer, Styles.bgColorWhite]&#125;&gt;</div><div class="line">                &lt;TextInput</div><div class="line">                    style=&#123;Styles.postTextInput&#125;</div><div class="line">                    multiline=&#123;true&#125;</div><div class="line">                    placeholder=&apos;这一刻的想法...&apos;</div><div class="line">                    placeholderTextColor=&#123;&apos;#f8f8f8&apos;&#125;</div><div class="line">                    onChangeText=&#123;(text) =&gt; this.setState(&#123;text&#125;)&#125;</div><div class="line">                    defaultValue=&#123;this.state.placeHolder&#125;</div><div class="line">                    value=&#123;this.state.text&#125;/&gt;</div><div class="line">                &lt;Image</div><div class="line">                    resizeMode=&apos;stretch&apos;</div><div class="line">                    style=&#123;[Styles.postPreviewPhoto]&#125;</div><div class="line">                    source=&#123;&#123;uri: this.state.selected&#125;&#125;/&gt;</div><div class="line">                &lt;TouchableOpacity style=&#123;[Styles.postButton,Styles.bgColorLightGray]&#125;&gt;</div><div class="line">                    &lt;Text style=&#123;[Styles.postButtonText]&#125;&gt;发布&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">                &lt;ScrollView style=&#123;[Styles.postCameraRoll]&#125;&gt;</div><div class="line">                    &lt;View&gt;</div><div class="line">                        &#123;photosView&#125;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                &lt;/ScrollView&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><ul>
<li>CameraRoll.getPhotos(fetchParams)<br>  返回的是Promise</li>
</ul>
<h3 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h3><ul>
<li><p>(iOS)解决ReactNative使用CameraRoll时undefined错误</p>
<p>  1, 将 node_modules/react-native/Libraries/CameraRoll/RCTCameraRoll.xcodeproj 工程添加到现有工程中<br>  2, 添加静态库依赖： (Build Phases -&gt; Binary With Libraries -&gt; libRCTCameraRoll.a)</p>
</li>
<li><p>(iOS)NSPhotoLibraryUsageDescription key must be present in Info.plist to use camera roll.</p>
<p>  在info.plist添加键值对</p>
<p>  1， Privacy - Camera Usage Description  使用相册<br>  2， Privacy - Photo Library Usage Description 使用相机</p>
</li>
<li><p>(Android)Error: /path/to/file: open failed: ENOENT (No such file or directory)<br>  Android上出现bug，还没有解决，待续…</p>
</li>
</ul>
<h3 id="新技能GET"><a href="#新技能GET" class="headerlink" title="新技能GET"></a>新技能GET</h3><p>＊ onPress 事件在<image>中失效，如果给<image>加onPress事件，需要用<touchableopacity>包裹</touchableopacity></image></image></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableOpacity onPress=&#123;()=&gt;alert(1)&#125;&gt;</div><div class="line">	&lt;Image /&gt;</div><div class="line">&lt;/TouchableOpacity&gt;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;CameraRoll模块提供了访问本地相册的功能。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/images/ca
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="CameraRoll" scheme="http://www.nealma.com/tags/CameraRoll/"/>
    
  </entry>
  
  <entry>
    <title>React Native (五) ListView 组件</title>
    <link href="http://www.nealma.com/2016/07/28/react-native-5-listview/"/>
    <id>http://www.nealma.com/2016/07/28/react-native-5-listview/</id>
    <published>2016-07-28T04:46:45.000Z</published>
    <updated>2016-10-21T09:25:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>ListView组件是每个App都用到的核心组件，RN当然也不能少。
</code></pre><p><img src="/images/listview.gif" alt=""></p>
<pre><code>开发环境：
OS: Mac 10.11.6
Xcode: Version 8.0 (8A218a)
</code></pre><h3 id="核心配置介绍"><a href="#核心配置介绍" class="headerlink" title="核心配置介绍"></a>核心配置介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">...</div><div class="line">constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    const ds = new ListView.DataSource(&#123;</div><div class="line">        rowHasChanged: (r1, r2) =&gt; r1 !== r2, //1, 对变化的行渲染</div><div class="line">        sectionHeaderHasChanged : (s1, s2) =&gt; s1 !== s2 //2, 分组头部信息变更</div><div class="line">    &#125;);</div><div class="line">    let rowData = Array.from(new Array(10)).map((val, i) =&gt; (&#123;title: &apos;初始化数据 &apos; + i&#125;));</div><div class="line">    this.state = &#123;</div><div class="line">        dataSource: ds.cloneWithRows(rowData),</div><div class="line">        data: rowData,</div><div class="line">        isLoaded: false,</div><div class="line">        isRefreshing: false</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">render() &#123;</div><div class="line">    if (!this.state.isLoaded) &#123;//3, loading</div><div class="line">        return &lt;Loading/&gt;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return (</div><div class="line">        &lt;ListView</div><div class="line">            style=&#123;styles.container&#125;</div><div class="line">            dataSource=&#123;this.state.dataSource&#125;/* 要渲染的数据源，类型是数组 */</div><div class="line">            renderRow=&#123;(rowData) =&gt; this._renderRowView(rowData, this._onPress)&#125;</div><div class="line">            onEndReached=&#123;this._handleLoadMore.bind(this)&#125; /* 滑动偏移量 &gt; onEndReachedThreshold的像素值时，触发 */</div><div class="line">            onEndReachedThreshold=&#123;5&#125; /* 调用onEndReached之前的临界值，单位是像素 */</div><div class="line">            initialListSize=&#123;8&#125; /* 初始值 */</div><div class="line">            pageSize=&#123;8&#125;/* 每次事件循环（每帧）渲染的行数 */</div><div class="line">            renderHeader=&#123; this._renderHeader.bind(this)&#125;</div><div class="line">            renderFooter=&#123;this._renderFooter.bind(this)&#125;</div><div class="line">            renderSectionHeader=&#123;this._renderSectionHeader.bind(this)&#125;</div><div class="line">            refreshControl=&#123;</div><div class="line">                &lt;RefreshControl // 下拉刷新</div><div class="line">                    refreshing=&#123;this.state.isRefreshing&#125;</div><div class="line">                    onRefresh=&#123;this._onRefresh.bind(this)&#125;/* 下拉刷新时，触发此事件*/</div><div class="line">                    title=&#123;this.state.isRefreshing? &apos;刷新中....&apos;:&apos;下拉刷新&apos;&#125;</div><div class="line">                    colors=&#123;[&apos;#fb96cf&apos;, &apos;#fb96cf&apos;,&apos;#fb96cf&apos;,&apos;#fb96cf&apos;]&#125;</div><div class="line">                    tintColor=&apos;#fb96cf&apos;</div><div class="line">                    progressBackgroundColor=&quot;#fb96cf&quot;</div><div class="line">                /&gt;</div><div class="line">            &#125;</div><div class="line">        /&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="添加loading状态"><a href="#添加loading状态" class="headerlink" title="添加loading状态"></a>添加loading状态</h3><pre><code>获取网络数据，必然会消耗时间。在等待的过程中，为了给用户很好的提示，我们都会添加loading图标，
如果什么都没有，让用户傻傻的干等，用户也不会对你的app有好的印象
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Loading extends Component &#123;</div><div class="line">    render()&#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">                &lt;View style=&#123;styles.loading&#125;&gt;</div><div class="line">                    &lt;ActivityIndicator</div><div class="line">                        size=&apos;large&apos;</div><div class="line">                        color=&apos;#eabb33&apos;/&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="列表中Item的onPress事件"><a href="#列表中Item的onPress事件" class="headerlink" title="列表中Item的onPress事件"></a>列表中Item的onPress事件</h3><pre><code>因为this的变更问题，_renderRowView做如下修改，onPress作为传递的处理函数
这里如果你用this._onPress, 会抛出异常，就是this已经不是原来的this了，
但是onPress还是原来的onPress。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_renderRowView(rowData, onPress) &#123;</div><div class="line">    return (</div><div class="line">        &lt;TouchableOpacity</div><div class="line">            underlayColor=&apos;#484848&apos;</div><div class="line">            onPress=&#123;(rowData) =&gt; onPress(rowData)&#125;&gt;</div><div class="line">            &lt;View style=&#123;styles.row&#125;&gt;</div><div class="line">                &lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;#c8c7cc&apos;&#125;&#125;/&gt;</div><div class="line">                &lt;View style=&#123;&#123;flex: 20, backgroundColor: &apos;#EFE&apos;,justifyContent: &apos;center&apos;, alignItems: &apos;center&apos; &#125;&#125;&gt;</div><div class="line">                    &lt;Text style=&#123;&#123;</div><div class="line">                        borderColor: &apos;#d1d1d1&apos;,</div><div class="line">                        borderWidth: 2,</div><div class="line">                        borderRadius: 5 &#125;&#125;&gt;&#123;rowData.title&#125;&lt;/Text&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        &lt;/TouchableOpacity&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><pre><code>需要用RefreshControl组件，通过isRefreshing改变 正在刷新(true)、刷新完成(false),
onRefresh触发该事件，进入onRefresh时，设置isRefreshing=true,处理完成onRefresh时，设置isRefreshing=false
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">_onRefresh() &#123;</div><div class="line">    // 刷新</div><div class="line">    this.setState(&#123;isRefreshing: true&#125;);</div><div class="line">    console.log(&apos;refresh&apos;, this.state.data);</div><div class="line">    setTimeout(() =&gt; &#123;</div><div class="line">        this._onFetch(false);</div><div class="line">        this.setState(&#123;isRefreshing: false&#125;);</div><div class="line">    &#125;,2000);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Load-More-指示器"><a href="#Load-More-指示器" class="headerlink" title="Load More 指示器"></a>Load More 指示器</h3><pre><code>ListView可以使用renderFooter属性实现加载更多指示器，这里只用简单的文字实现，更多的效果请自行玩耍
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">_renderFooter()&#123;</div><div class="line">    return(</div><div class="line">        &lt;Footer /&gt;</div><div class="line">    );</div><div class="line">&#125;</div><div class="line">...</div><div class="line"></div><div class="line">class Footer extends Component &#123;</div><div class="line">    render()&#123;</div><div class="line">        return(</div><div class="line">            &lt;StaticContainer&gt;</div><div class="line">                &lt;View style=&#123;&#123; flex:1, flexDirection: &apos;row&apos;, justifyContent: &apos;space-between&apos;,</div><div class="line">                    alignItems: &apos;center&apos;, height:50, backgroundColor:&apos;#fb96cf&apos;&#125;&#125;&gt;</div><div class="line">                    &lt;Text&gt;&lt;/Text&gt;</div><div class="line">                    &lt;Text&gt;加载更多&lt;/Text&gt;</div><div class="line">                    &lt;Text&gt;&lt;/Text&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/StaticContainer&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="有关显示隐藏"><a href="#有关显示隐藏" class="headerlink" title="有关显示隐藏"></a>有关显示隐藏</h3><pre><code>RN中没有display:none可用，可以换一种方式实现
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isHidden?&lt;View/&gt;:null</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>这里用到了StaticContainer，据说性能好，没有具体看呢？了解的同学可以给我留言
：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;ListView组件是每个App都用到的核心组件，RN当然也不能少。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="Listview" scheme="http://www.nealma.com/tags/Listview/"/>
    
  </entry>
  
  <entry>
    <title>React Native (四) react-native-side-menu组件</title>
    <link href="http://www.nealma.com/2016/07/28/react-native-4-sidemenu/"/>
    <id>http://www.nealma.com/2016/07/28/react-native-4-sidemenu/</id>
    <published>2016-07-28T03:46:45.000Z</published>
    <updated>2016-10-20T13:39:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>侧滑菜单在实际工作中，很常见，是比较流行的一种设计，
RN怎会没有呢。一开始接触RN，总是乐于社区的活跃，你需要什么，大都会能找到
现成，最初使用了react-native-jelly-side-menu，但是在安卓上死活run不起来，
后来辗转到了react-native-side-menu,可以很好的在iOS、Android中玩耍。
</code></pre><p><img src="/images/sidemenu.gif" alt=""></p>
<p>开发环境<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="react-native-jelly-side-menu-爱恨"><a href="#react-native-jelly-side-menu-爱恨" class="headerlink" title="react-native-jelly-side-menu 爱恨"></a>react-native-jelly-side-menu 爱恨</h3><pre><code>jelly的动画很吸引我，就用了
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import JellySideMenu from &apos;react-native-jelly-side-menu&apos;;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">#render</div><div class="line"></div><div class="line">render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;#FF6644&apos;&#125;&#125;&gt;</div><div class="line">                &lt;JellySideMenu</div><div class="line">                    ref=&#123;(view) =&gt; &#123;this.jsm = view&#125;&#125;</div><div class="line">                    fill=&#123;&quot;#FFF&quot;&#125; fillOpacity=&#123;1.0&#125;</div><div class="line">                    renderMenu=&#123;this.renderMenu&#125;&gt;</div><div class="line">                    &lt;TouchableOpacity onPress=&#123;() =&gt; &#123;this.jsm.toggleSideMenu(true)&#125;&#125;&gt;</div><div class="line">	                    &lt;Icon name=&quot;navicon&quot; size=&#123;30&#125; color=&quot;#4F8EF7&quot; style=&#123;&#123;marginTop: 20, marginLeft: 20&#125;&#125;/&gt;  //1</div><div class="line">	                &lt;/TouchableOpacity&gt;</div><div class="line">                &lt;/JellySideMenu&gt;</div><div class="line"></div><div class="line">                &lt;TouchableOpacity onPress=&#123;() =&gt; &#123;this.jsm.toggleSideMenu(true)&#125;&#125;&gt;</div><div class="line">                    &lt;Icon name=&quot;navicon&quot; size=&#123;30&#125; color=&quot;#4F8EF7&quot; style=&#123;&#123;marginTop: 20, marginLeft: 20&#125;&#125;/&gt;  //2</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        )</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<pre><code>如果按照官方的demo，即代码1处，当滑出左侧菜单，关闭，再次点击1处的button，此时事件失效。
你可以把open menu放在2处，可以很好的工作。
</code></pre><h3 id="追加1-换回官方的react-native-side-menu"><a href="#追加1-换回官方的react-native-side-menu" class="headerlink" title="追加1: 换回官方的react-native-side-menu"></a>追加1: 换回官方的react-native-side-menu</h3><pre><code>因为在android上运行的时候，报错了，联系作者没反应，自己短时间内无从下手，只好换了。
</code></pre><h3 id="react-native-side-menu-简单使用"><a href="#react-native-side-menu-简单使用" class="headerlink" title="react-native-side-menu 简单使用"></a>react-native-side-menu 简单使用</h3><pre><code>给出一个简单的例子
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">export  default  class Main extends Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    updateMenuState(isOpen) &#123;</div><div class="line">        this.setState(&#123; isOpen, &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    onMenuItemSelected = (item) =&gt; &#123;</div><div class="line">        //TODO：单击菜单的后续动作, 跳转到相应的页面</div><div class="line">        alert(&quot;单击 &quot; + item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const menu = &lt;LeftView onItemSelected=&#123;this.onMenuItemSelected&#125; /&gt;;</div><div class="line">        return (</div><div class="line">            &lt;SideMenu</div><div class="line">                menu=&#123;menu&#125; /* 设置左侧页面(菜单) */</div><div class="line">                isOpen=&#123;this.state.isOpen&#125;/* 状态控制: true 打开，false 关闭*/</div><div class="line">                onChange=&#123;(isOpen) =&gt; this.updateMenuState(isOpen)&#125;&gt;</div><div class="line">                &lt;ContentView /&gt;</div><div class="line">            &lt;/SideMenu&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ContentView extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.page&#125;&gt;&lt;Text style=&#123;styles.pageContent&#125;&gt;Content&lt;/Text&gt;&lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class LeftView extends Component &#123;</div><div class="line"></div><div class="line">    static propTypes = &#123;</div><div class="line">        onItemSelected: React.PropTypes.func.isRequired,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;ScrollView scrollsToTop=&#123;true&#125; style=&#123;styles.menu&#125;&gt;</div><div class="line">                &lt;Text</div><div class="line">                    onPress=&#123;() =&gt; this.props.onItemSelected(&apos;first&apos;)&#125;</div><div class="line">                    style=&#123;styles.item&#125;&gt;</div><div class="line">                    First</div><div class="line">                &lt;/Text&gt;</div><div class="line"></div><div class="line">                &lt;Text</div><div class="line">                    onPress=&#123;() =&gt; this.props.onItemSelected(&apos;second&apos;)&#125;</div><div class="line">                    style=&#123;styles.item&#125;&gt;</div><div class="line">                    Second</div><div class="line">                &lt;/Text&gt;</div><div class="line"></div><div class="line">                &lt;Text</div><div class="line">                    onPress=&#123;() =&gt; this.props.onItemSelected(&apos;third&apos;)&#125;</div><div class="line">                    style=&#123;styles.item&#125;&gt;</div><div class="line">                    Third</div><div class="line">                &lt;/Text&gt;</div><div class="line">            &lt;/ScrollView&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<pre><code>在使用过程中，比较费解的是onMenuItemSelected, 该函数在LeftView中进行声明并指定类型为function，
并没有实现，而是留给引用者去实现具体业务， 也就是TODO的位置。
</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>menu的导航需要Navigator组件配置使用，后面会做个结合使用的例子。

：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;侧滑菜单在实际工作中，很常见，是比较流行的一种设计，
RN怎会没有呢。一开始接触RN，总是乐于社区的活跃，你需要什么，大都会
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="Slide Menu" scheme="http://www.nealma.com/tags/Slide-Menu/"/>
    
  </entry>
  
  <entry>
    <title>React Native (三) react-native-vector-icons 图标组件</title>
    <link href="http://www.nealma.com/2016/07/27/react-native-3-icons/"/>
    <id>http://www.nealma.com/2016/07/27/react-native-3-icons/</id>
    <published>2016-07-27T03:46:45.000Z</published>
    <updated>2016-10-29T22:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>react-native-vector-icons组件,
对于非设计人员，可以免费使用更多的icons资源
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install react-native-vector-icons --save</div><div class="line">rnpm link</div></pre></td></tr></table></figure>
<ul>
<li>iOS<br>  之后会在Xcode中的info.plis里面看到如下键值信息：<br>  Fonts provided by application（item0-item7）<br>  如果没有此项信息，需要手动添加Fonts provided by application。</li>
<li>Android<br>  Edit android/app/build.gradle ( NOT android/build.gradle ) and add the following:<br>  添加如下内容:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">project.ext.vectoricons = [</div><div class="line">    iconFontNames: [ &apos;MaterialIcons.ttf&apos;, &apos;EvilIcons.ttf&apos;, &apos;FontAwesome.ttf&apos;, &apos;Entypo.fft&apos;, &apos;EvilIcons.ttf&apos;, &apos;Octicons.ttf&apos;, &apos;Zocial.ttf&apos;, &apos;Ionicons.ttf&apos; ] // Name of the font files you want to copy</div><div class="line">]</div><div class="line"></div><div class="line">apply from: &quot;../../node_modules/react-native-vector-icons/fonts.gradle&quot;</div></pre></td></tr></table></figure>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import Icon from &apos;react-native-vector-icons/FontAwesome&apos;;</div><div class="line"></div><div class="line">&lt;Icon name=&quot;navicon&quot; size=&#123;30&#125; color=&quot;#4F8EF7&quot; style=&#123;&#123;marginTop: 20, marginLeft: 20&#125;&#125;/&gt;</div></pre></td></tr></table></figure>
<pre><code>FontAwesome网站：http://fontawesome.io/icons/,其中name的值对应网站中每个icon的名字。
</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>资源添加玩，别忘了重新run哦。

：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;react-native-vector-icons组件,
对于非设计人员，可以免费使用更多的icons资源
&lt;/code&gt;&lt;
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="icons" scheme="http://www.nealma.com/tags/icons/"/>
    
  </entry>
  
  <entry>
    <title>React Native (二) Image图片组件</title>
    <link href="http://www.nealma.com/2016/07/26/react-native-2-image/"/>
    <id>http://www.nealma.com/2016/07/26/react-native-2-image/</id>
    <published>2016-07-26T03:46:45.000Z</published>
    <updated>2016-10-20T06:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>在RN中使用Image组件，即使很简单，总会出现这个那个的问题。
</code></pre><p>本记录使用的开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ul>
<li>require</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./resources/ly.png'</span>)&#125; style=&#123;&#123;<span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<pre><code>注意这里面一定要显示定义图片大小，否则一旦图片尺寸很大，会不显示。
</code></pre><ul>
<li>uri</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span>&#125;&#125;&gt;</div><div class="line">    &lt;Image source=&#123;&#123;uri: 'http://cdn.crunchify.com/wp-content/uploads/2013/01/html5-canvas.png'&#125;&#125; /&gt;</div><div class="line">    &lt;Image source=&#123;&#123;uri: 'https://facebook.github.io/react/img/logo_og.png'&#125;&#125; /&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<pre><code>注意如果是iOS,HTTP协议的uri会受到限制，可能什么也看不到，
这是因为iOS9之后，默认HTTPs请求，如需支持HTTP，
修改info.plist文件, 添加键值对就OK

需要在info.plist中设置

App Transport Security Settings
Allow Arbitrary Loads 设置为 YES

设置好后，重新执行react-native run-ios
</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>切记下面的内容

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">style=&#123;&#123;width: 100, height: 100&#125;&#125;</div></pre></td></tr></table></figure>

否则，你将看不到图片
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;在RN中使用Image组件，即使很简单，总会出现这个那个的问题。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本记录使用的开发环境：&lt;b
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
      <category term="Image" scheme="http://www.nealma.com/tags/Image/"/>
    
  </entry>
  
  <entry>
    <title>账号申请(一) 苹果开发者账号</title>
    <link href="http://www.nealma.com/2016/07/25/enrollment-1-apple-developer/"/>
    <id>http://www.nealma.com/2016/07/25/enrollment-1-apple-developer/</id>
    <published>2016-07-25T04:46:45.000Z</published>
    <updated>2016-10-31T15:20:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>辞职在家了，做了个独立开发者。最近一段时间在做App，大部分的功能可以用Simulator调试，
可偏偏我用到了相机功能，这个无法使用，只能在真机上开发了。
然而，Xcode真机调试必须要有苹果开发者证书才能工作，word天，没办法，那就注册一个吧。
</code></pre><h3 id="开发者中心"><a href="#开发者中心" class="headerlink" title="开发者中心"></a>开发者中心</h3><pre><code>我也是够笨的啦，想注册开发者，都不知道去哪注册，找了半天注册链接，要了我的命了。
</code></pre><p><a href="https://developer.apple.com/enroll" target="_blank" rel="external">传送门 开发者注册中心</a></p>
<pre><code>找到 Enrollment , 这个就是入口了
</code></pre><h3 id="注册信息及流程"><a href="#注册信息及流程" class="headerlink" title="注册信息及流程"></a>注册信息及流程</h3><pre><code>* 首先你要有Apple ID， 没有的先去注册一个吧
* Entity Type 是个人还是公司
* Authority to Sign Legal Agreements 你的角色
* 系统会查询你的公司是否申请过DUNS Number，如果咩有DUNS Number，可以免费申请一个（大概两周时间）
</code></pre><h3 id="放弃公司账号-改为个人账号"><a href="#放弃公司账号-改为个人账号" class="headerlink" title="放弃公司账号,改为个人账号"></a>放弃公司账号,改为个人账号</h3><pre><code>跟朋友聊天，无意提到了苹果开发者账号的事儿，才知道个人号4天左右就能申请下来。
对比了下个人账号和公司账号对于目前的我来说，没有大的影响。晚上回到家立即开始申请
个人开发者账号，放弃了DUNS码的等待。让人很欣慰啊，注册完个人信息，发票信息，信用卡信息，提交订单，
这就完事了，白等了很多天...
</code></pre><h3 id="真机调试"><a href="#真机调试" class="headerlink" title="真机调试"></a>真机调试</h3><pre><code>需要给Xcode添加证书
添加设备UDID（iTunes可以查看）
添加Team信息
添加Test Team信息
Build Setting添加Code Signing Identity为iOS Developer
</code></pre><h3 id="DUNS来邮件了"><a href="#DUNS来邮件了" class="headerlink" title="DUNS来邮件了"></a>DUNS来邮件了</h3><pre><code>今天早上带闺女去游泳，一个上海的电话打来，说是华夏邓白氏的，我猜恍然明白过来。
可是我的个人号都已经申请好了，既然有结果了，那就继续申请后续流程吧。
下面是需要提供的内容，填好，回复就可以了
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1.公司名称(中和英文后缀规范Co., Ltd.或者Inc.)必须填写</div><div class="line"></div><div class="line">2.办公地址(中和英，实际上班地址) 必须填写,地址从后往前翻译</div><div class="line"></div><div class="line">3.邮编</div><div class="line"></div><div class="line">4.企业性质</div><div class="line"></div><div class="line">5.公司有无英文简称</div><div class="line"></div><div class="line">6.有分公司办事处吗</div><div class="line"></div><div class="line">7.公司的主营业务(一个最主要的)</div><div class="line"></div><div class="line">8. 员工总数，联系人姓名（一个）,电话及职位（最好是座机、分机,和手机）</div><div class="line"></div><div class="line">9.营业执照的照片或扫描件(看的清楚就可以)</div></pre></td></tr></table></figure>
<h3 id="DUNS给我了"><a href="#DUNS给我了" class="headerlink" title="DUNS给我了"></a>DUNS给我了</h3><pre><code>大概一周之后，华夏邓白氏的人发来邮件，我的邓白氏编码终于来了。
可是我仔细看了下发来的信息，oh my god, 英文公司名字给多加了一个字母，那怎么办呢？
打客服电话修改吧。
</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>：）～
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;辞职在家了，做了个独立开发者。最近一段时间在做App，大部分的功能可以用Simulator调试，
可偏偏我用到了相机功能，这
    
    </summary>
    
      <category term="Enrollment" scheme="http://www.nealma.com/categories/Enrollment/"/>
    
    
      <category term="苹果开发者" scheme="http://www.nealma.com/tags/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
      <category term="账号申请" scheme="http://www.nealma.com/tags/%E8%B4%A6%E5%8F%B7%E7%94%B3%E8%AF%B7/"/>
    
  </entry>
  
  <entry>
    <title>React Native (一) 环境搭建</title>
    <link href="http://www.nealma.com/2016/06/26/react-native-1-envirment/"/>
    <id>http://www.nealma.com/2016/06/26/react-native-1-envirment/</id>
    <published>2016-06-26T03:46:45.000Z</published>
    <updated>2016-10-27T12:20:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>对于人员缺少，功能又不复杂的app来说，使用RN这种方式效率还是很高的;
在使用的过程中，即使你按照参考资料，一个代码一个代码的敲，最后还是报bug，
总会让你头疼，这个过程中，记录了下遇到的问题，可以让看到的人少走些弯路。
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>Xcode: Version 8.0 (8A218a)</p>
<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><pre><code>根据RN中文网的步骤来，都没啥问题。
</code></pre><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><ul>
<li>Failure to call AppRegistry.registerComponent</li>
</ul>
<p>解决办法：</p>
<pre><code>可能是你打开了A又打开了B应用，会遇到这种情况；这时候你把所有的terminal窗口kill掉，
在重新运行react-native run-xxx.
</code></pre><ul>
<li>xcrun can’t find Xcode path</li>
</ul>
<p>解决办法:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DEVELOPER_DIR=<span class="string">"/Applications/Xcode.app/Contents/Developer/"</span></div><div class="line"><span class="built_in">export</span> DEVELOPER_DIR</div></pre></td></tr></table></figure>
<p>最好是放到.bashrc文件中,如果安装了zsh，需要在.zshrc中加入如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer/</div></pre></td></tr></table></figure>
<ul>
<li>run-android时，总是停留在Download grandle的环节</li>
</ul>
<p>解决办法:</p>
<p>将.properties文件总的URL换成下面的地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://mta.zttit.com:8080/images/gradle-2.4-all.zip</div></pre></td></tr></table></figure>
<ul>
<li>创建avd的时候，检查是否下载了image</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android avd</div></pre></td></tr></table></figure>
<ul>
<li>Android Emulator 找不到Relaod按钮</li>
</ul>
<p>解决对策:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 82</div></pre></td></tr></table></figure>
<ul>
<li><p>Expected a component class, got [object, Object]<br>  自定义组件首字母要大写,<br>  在AppRegistry.registerComponent(‘AppName’, () =&gt; mainComponentName)中，<br>  mainComponentName可以是小写字母开头，其他自定义组件要注意<font color="red">大写字母开头</font></p>
<h3 id="reload菜单shortcut"><a href="#reload菜单shortcut" class="headerlink" title="reload菜单shortcut"></a>reload菜单shortcut</h3></li>
<li><p>iOS        command + d</p>
</li>
<li>Android     command + m</li>
</ul>
<h3 id="离线包"><a href="#离线包" class="headerlink" title="离线包"></a>离线包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --entry-file index.ios.js --bundle-output ./ios/main.jsbundle --platform ios --assets-dest ./ios --dev false</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>还是很方便的吗
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;对于人员缺少，功能又不复杂的app来说，使用RN这种方式效率还是很高的;
在使用的过程中，即使你按照参考资料，一个代码一个代
    
    </summary>
    
      <category term="React-Native" scheme="http://www.nealma.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.nealma.com/tags/React-Native/"/>
    
      <category term="RN" scheme="http://www.nealma.com/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>npm 网络难以忍受</title>
    <link href="http://www.nealma.com/2016/05/30/nodejs-1-very-slow/"/>
    <id>http://www.nealma.com/2016/05/30/nodejs-1-very-slow/</id>
    <published>2016-05-30T03:46:45.000Z</published>
    <updated>2016-10-15T14:09:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="那就换成淘宝的吧"><a href="#那就换成淘宝的吧" class="headerlink" title="那就换成淘宝的吧"></a>那就换成淘宝的吧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm --registry=https://registry.npm.taobao.org install cnpm -g</div></pre></td></tr></table></figure>
<h3 id="或者改变registry"><a href="#或者改变registry" class="headerlink" title="或者改变registry"></a>或者改变registry</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#vim ~/.npmrc</div><div class="line"></div><div class="line">registry = https://registry.npm.taobao.org</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;那就换成淘宝的吧&quot;&gt;&lt;a href=&quot;#那就换成淘宝的吧&quot; class=&quot;headerlink&quot; title=&quot;那就换成淘宝的吧&quot;&gt;&lt;/a&gt;那就换成淘宝的吧&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="NodeJS" scheme="http://www.nealma.com/categories/NodeJS/"/>
    
    
      <category term="nodejs" scheme="http://www.nealma.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（五) 全局异常处理</title>
    <link href="http://www.nealma.com/2016/05/30/spring-boot-5-exception/"/>
    <id>http://www.nealma.com/2016/05/30/spring-boot-5-exception/</id>
    <published>2016-05-30T03:46:45.000Z</published>
    <updated>2016-10-15T14:11:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>广大码农同胞在写程序的时候，总是会遇到处理各种Exception，神马空指针啦，
再有就是处理DataBase的IO异常啦，反正哪都有他们的影子，真是阴魂不散啊。但是呢，
你又不能置之不理，那就求救于Spring的全局处理吧
</code></pre><p>：）～</p>
<pre><code>Spring-Boot默认实现了简单的错误页面，但是那个真是惨不忍睹。追求用户体验的你，当然想
换成自己的页面了，看着美美哒。

在实际工作中，我们不可能都是一出错就跳到html页面，根据我们自己的业务，我们通常还要以接口的形式
返回固定格式的数据，最多的就是json啦。
</code></pre><p>下面就以html和json两种形式介绍如何实现。</p>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><pre><code>现在只要能用注解，谁还实用xml来配置啊。
正好这里涉及到两个annotation类：
* @ControllerAdvice 全局异常处理类，不再需要每个Controller里一一定义
* @ExceptionHandler 定义针对每种类型的Exception

当然啦，如果你在业务中已经trycatch啦，那就别指望被处理了，你自己都处理了
别人当然不操心了
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 全局异常处理类</div><div class="line"> */</div><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(getClass());</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(value = NullPointerException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">defaultErrorHandler</span><span class="params">(HttpServletRequest req, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.error(<span class="string">"[error] --&gt; &#123;&#125;"</span>, e);</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</div><div class="line">        mav.addObject(<span class="string">"exception"</span>, e);</div><div class="line">        mav.addObject(<span class="string">"url"</span>, req.getRequestURL());</div><div class="line">        mav.setViewName(<span class="string">"error"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><pre><code>在前面的基础上，添加输出json的方法，其中@ResponseBody是必须条件
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 全局异常处理类</div><div class="line"> */</div><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(getClass());</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(value = NullPointerException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">defaultErrorHandler</span><span class="params">(HttpServletRequest req, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.error(<span class="string">"[error] --&gt; &#123;&#125;"</span>, e);</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</div><div class="line">        mav.addObject(<span class="string">"exception"</span>, e);</div><div class="line">        mav.addObject(<span class="string">"url"</span>, req.getRequestURL());</div><div class="line">        mav.setViewName(<span class="string">"error"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(value = AppException.class)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MsgOut <span class="title">json</span><span class="params">(Exception ex)</span> </span>&#123;</div><div class="line">        <span class="comment">//<span class="doctag">TODO:</span>记录日志</span></div><div class="line">        LOGGER.error(<span class="string">"AppException"</span>, ex);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> MsgOut.error(ex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>在Spring-Boot中，没有被全局处理类（GlobalExceptionHandler）捕获的异常，ErrorController会帮你补漏。
如果你使用Spring Validation来校验,要成功捕获 MethodArgumentNotValidException，
在控制器方法上就不能定义 BindingResult 参数接收校验结果，
不然如果校验失败 Spring 是不会抛出 MethodArgumentNotValidException 异常的，
自然而然在我们的 GlobalExceptionHandler 就无法处理了。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;广大码农同胞在写程序的时候，总是会遇到处理各种Exception，神马空指针啦，
再有就是处理DataBase的IO异常啦，
    
    </summary>
    
      <category term="Java" scheme="http://www.nealma.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Exception" scheme="http://www.nealma.com/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot （四) 集成Spring Security</title>
    <link href="http://www.nealma.com/2016/04/30/spring-boot-4-security/"/>
    <id>http://www.nealma.com/2016/04/30/spring-boot-4-security/</id>
    <published>2016-04-30T03:46:45.000Z</published>
    <updated>2016-10-16T10:46:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>shiro可以完全解决有关安全的问题，但是项目大多使用的是Spring框架，所以没必要在引入其他依赖，
so，还是折腾下亲儿子的东东吧
</code></pre><p>使用的开发环境：<br>OS: Mac 10.11.6<br>IDE: idea<br>Build: maven</p>
<pre><code>以前都是使用xml来配置，但是spring-boot提倡Java Config的使用，
折腾下来还是很多收获的。有关权限管理，行内大都秉承
以角色为基础的访问控制（Role-based access control, RBAC）
在Spring Security中，实现原理很简单，通过AOP对所要管理的资源（url或者method）进行拦截，
在其内部维护了一条安全过滤链，有用户服务（UserDetailsService)、身份认证服务（AuthenticationProvider）、
访问决策管理（AccessDecisionManager）、记住我(remember-me)等普世功能。
当然，使用Spring-boot离不开Java Config，come on,just do it.
</code></pre><h3 id="WebSecurityConfig"><a href="#WebSecurityConfig" class="headerlink" title="WebSecurityConfig"></a>WebSecurityConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.caogen"</span>)</div><div class="line"><span class="meta">@EnableWebSecurity</span></div><div class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>, jsr250Enabled = <span class="keyword">true</span>)</div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:application.properties"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(getClass());</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MyAuthenticationProvider authenticationProvider;<span class="comment">//自定义验证</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MyUserDetailsService userDetailsService;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MyPersistentTokenRepository tokenRepository;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MyAccessDecisionManager accessDecisionManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.authenticationProvider(authenticationProvider);</div><div class="line">        auth.userDetailsService(userDetailsService);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        http</div><div class="line">                .headers()</div><div class="line">                    .frameOptions().sameOrigin().disable()<span class="comment">//disable X-Frame-Options</span></div><div class="line">                .authorizeRequests()</div><div class="line"><span class="comment">//                    .accessDecisionManager(accessDecisionManager)//用注解替换,如果不使用注解，取消注释</span></div><div class="line">                    .anyRequest().fullyAuthenticated()<span class="comment">//其他url需要鉴权</span></div><div class="line">                .and()</div><div class="line">                    .formLogin()</div><div class="line">                        .usernameParameter(<span class="string">"username"</span>)</div><div class="line">                        .passwordParameter(<span class="string">"password"</span>)</div><div class="line">                        .loginProcessingUrl(<span class="string">"/login"</span>)</div><div class="line">                        .loginPage(<span class="string">"/login"</span>)</div><div class="line">                        .failureUrl(<span class="string">"/login?error"</span>)</div><div class="line">                        .permitAll()</div><div class="line">                .and()</div><div class="line">                    .logout()</div><div class="line">                        .deleteCookies(<span class="string">"JSESSIONID"</span>)</div><div class="line">                        .logoutRequestMatcher(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">"/logout"</span>))</div><div class="line">                        .logoutSuccessUrl(<span class="string">"/login"</span>)</div><div class="line">                .and()</div><div class="line">                    .rememberMe()</div><div class="line">                        .tokenRepository(tokenRepository)</div><div class="line">                        .rememberMeServices(rememberMeServices())</div><div class="line">                        .rememberMeParameter(<span class="string">"remember-me"</span>).key(<span class="string">"key"</span>)</div><div class="line">                        .tokenValiditySeconds(<span class="number">86400</span>)</div><div class="line">                .and()</div><div class="line">                    .csrf().disable() <span class="comment">//disable csrf</span></div><div class="line">                    .sessionManagement().maximumSessions(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RememberMeServices <span class="title">rememberMeServices</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Key must be equal to rememberMe().key()</span></div><div class="line">        PersistentTokenBasedRememberMeServices rememberMeServices =</div><div class="line">                <span class="keyword">new</span> PersistentTokenBasedRememberMeServices(<span class="string">"key"</span>, userDetailsService, tokenRepository);</div><div class="line">        rememberMeServices.setCookieName(<span class="string">"remember-me"</span>);</div><div class="line">        rememberMeServices.setParameter(<span class="string">"remember-me"</span>);</div><div class="line">        rememberMeServices.setTokenValiditySeconds(<span class="number">864000</span>);</div><div class="line">        <span class="keyword">return</span> rememberMeServices;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="MyUserDetailsService"><a href="#MyUserDetailsService" class="headerlink" title="MyUserDetailsService"></a>MyUserDetailsService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * SPRING SECURITY用户登录处理</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span>(<span class="string">"MyUserDetailsServiceImpl"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(getClass());</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> SysUserMapper sysUserMapper;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RoleMapper roleMapper;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRoleLinkMapper userRoleLinkMapper;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ResourceService resourceService;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</div><div class="line"></div><div class="line">        LOGGER.info(<span class="string">"loadUserByUsername --&gt; [&#123;&#125;]"</span>, username);</div><div class="line"></div><div class="line">        SysUser sysUser = <span class="keyword">new</span> SysUser();</div><div class="line">        sysUser.setUsername(username);</div><div class="line">        List&lt;SysUser&gt; userList = sysUserMapper.select(sysUser);</div><div class="line">        <span class="keyword">if</span> (userList == <span class="keyword">null</span> || userList.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"username not found."</span>);</div><div class="line">        &#125;</div><div class="line">        sysUser = userList.get(<span class="number">0</span>);</div><div class="line">        UserRoleLink userRoleLink = <span class="keyword">new</span> UserRoleLink();</div><div class="line">        userRoleLink.setUserId(sysUser.getId());</div><div class="line"></div><div class="line">        List&lt;UserRoleLink&gt; userRoleLinks = userRoleLinkMapper.select(userRoleLink);</div><div class="line">        List&lt;GrantedAuthority&gt; grantedAuthorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        List&lt;Long&gt; roleIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        Optional&lt;List&lt;UserRoleLink&gt;&gt; userRoleLinksOptional = Optional.ofNullable(userRoleLinks);</div><div class="line">        userRoleLinksOptional.ifPresent(userRoleLinks1 -&gt; &#123;</div><div class="line">            userRoleLinks1.forEach(userRoleLink1 -&gt; &#123;</div><div class="line">                roleIds.add(userRoleLink1.getRoleId());</div><div class="line">                <span class="keyword">if</span>(userRoleLink1.getRoleId() == <span class="number">1L</span>)&#123;</div><div class="line">                    GrantedAuthority grantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_root"</span>);<span class="comment">//root角色特权</span></div><div class="line">                    grantedAuthorities.add(grantedAuthority);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//        List&lt;Role&gt; roles = roleMapper.selectBatch(roleIds);//V1.0</span></div><div class="line">        List&lt;Resource&gt; resources = resourceService.selectByRoleId(roleIds.toArray(<span class="keyword">new</span> Long[<span class="number">0</span>]));</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(resources != <span class="keyword">null</span> &amp;&amp; resources.size() &gt; <span class="number">0</span>)&#123;</div><div class="line">            resources.forEach(resource -&gt; &#123;</div><div class="line">                GrantedAuthority grantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_"</span>+resource.getLink());<span class="comment">//必须ROLE_为前缀</span></div><div class="line">                grantedAuthorities.add(grantedAuthority);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        LOGGER.info(<span class="string">"grantedAuthorities --&gt; &#123;&#125;"</span>, grantedAuthorities);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username, sysUser.getPassword(), <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, grantedAuthorities);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="MyAuthenticationProvider"><a href="#MyAuthenticationProvider" class="headerlink" title="MyAuthenticationProvider"></a>MyAuthenticationProvider</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义验证方式</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(getClass());</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MyUserDetailsService userService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></div><div class="line">                                                <span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">        String username = authentication.getName();</div><div class="line">        String password = (String) authentication.getCredentials();</div><div class="line"></div><div class="line">        UserDetails user = userService.loadUserByUsername(username);</div><div class="line"></div><div class="line">        LOGGER.info(<span class="string">"password=&#123;&#125;, needPassword=&#123;&#125;"</span>, password, user.getPassword());</div><div class="line">        <span class="comment">//密码匹配验证</span></div><div class="line">        <span class="keyword">if</span> (passwordEncoder().matches(password, user.getPassword())) &#123;</div><div class="line">            Collection&lt;? extends GrantedAuthority&gt; authorities = user.getAuthorities();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user, password, authorities);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"Wrong password."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Bean</span></div><div class="line">   <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="MyAccessDecisionManager"><a href="#MyAccessDecisionManager" class="headerlink" title="MyAccessDecisionManager"></a>MyAccessDecisionManager</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 验证资源跟角色之间的关系</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(getClass());</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RoleService roleService;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * // authentication 为用户所被赋予的权限, configAttributes 为访问相应的资源应该具有的权限。</div><div class="line">     * <span class="doctag">@param</span> authentication</div><div class="line">     * <span class="doctag">@param</span> object</div><div class="line">     * <span class="doctag">@param</span> configAttributes</div><div class="line">     * <span class="doctag">@throws</span> AccessDeniedException</div><div class="line">     * <span class="doctag">@throws</span> InsufficientAuthenticationException</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span></span></div><div class="line">            <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException &#123;</div><div class="line"></div><div class="line">        Collection&lt;GrantedAuthority&gt; userHasRoles =</div><div class="line">                (Collection&lt;GrantedAuthority&gt;) authentication.getAuthorities();</div><div class="line"></div><div class="line">        LOGGER.info(<span class="string">"CurrentUser=&#123;&#125; CurrentHasRoles = &#123;&#125;"</span>, authentication.getName(), Arrays.asList(userHasRoles));</div><div class="line"></div><div class="line">        <span class="comment">//放行[超级管理员]角色</span></div><div class="line">        Iterator&lt;GrantedAuthority&gt; iterator = userHasRoles.iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</div><div class="line">            GrantedAuthority grantedAuthority = iterator.next();</div><div class="line">            <span class="keyword">if</span>(<span class="string">"系统管理员"</span>.equals(grantedAuthority.getAuthority()))&#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        LOGGER.info(<span class="string">"1 CurrentUser=&#123;&#125; CurrentHasRoles = &#123;&#125;"</span>, authentication.getName(), Arrays.asList(userHasRoles));</div><div class="line"></div><div class="line">        Collection&lt;GrantedAuthority&gt; uriHasRoles = getGrantedAuthoritys(object);</div><div class="line">        <span class="keyword">if</span> (uriHasRoles == <span class="keyword">null</span> || uriHasRoles.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Optional&lt;Collection&lt;GrantedAuthority&gt;&gt; grantedAuthoritiesForOptional =</div><div class="line">                Optional.ofNullable(userHasRoles);</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            grantedAuthoritiesForOptional.ifPresent(userHasRolesNotNull -&gt; &#123;</div><div class="line">                userHasRolesNotNull.forEach(userHasRole -&gt; &#123;</div><div class="line">                    uriHasRoles.forEach(uriHasRole -&gt; &#123;</div><div class="line">                        LOGGER.info(<span class="string">"userHasRole=&#123;&#125;, uriHasRole=&#123;&#125;"</span>, userHasRole, uriHasRole);</div><div class="line">                        <span class="keyword">if</span> (userHasRole.getAuthority().equals(uriHasRole.getAuthority())) &#123;</div><div class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> AppException(<span class="string">"break"</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;<span class="keyword">catch</span>(AppException be)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">"Access Denied."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;GrantedAuthority&gt; <span class="title">getGrantedAuthoritys</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        FilterInvocation filterInvocation = (FilterInvocation) object;</div><div class="line">        String uri = <span class="keyword">new</span> StringBuilder(filterInvocation.getRequestUrl()).deleteCharAt(<span class="number">0</span>).toString();</div><div class="line">        <span class="keyword">if</span>(<span class="string">""</span>.equals(uri))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        List&lt;Role&gt; uriHasRoles = roleService.selectByResourceURI(uri);</div><div class="line">        LOGGER.info(<span class="string">"fullRequestUrl=&#123;&#125;, requestUrl=&#123;&#125;, uriHasRoles=&#123;&#125;"</span>,</div><div class="line">                filterInvocation.getFullRequestUrl(),</div><div class="line">                filterInvocation.getRequestUrl(),</div><div class="line">                uriHasRoles);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (uriHasRoles == <span class="keyword">null</span> || uriHasRoles.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        Collection&lt;GrantedAuthority&gt; grantedAuthorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        uriHasRoles.forEach(item -&gt; &#123;</div><div class="line">            GrantedAuthority grantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(item.getName());</div><div class="line">            grantedAuthorities.add(grantedAuthority);</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> grantedAuthorities;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute configAttribute)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Remember-Me-使用database方式，MyPersistentTokenRepository"><a href="#Remember-Me-使用database方式，MyPersistentTokenRepository" class="headerlink" title="Remember-Me 使用database方式，MyPersistentTokenRepository"></a>Remember-Me 使用database方式，MyPersistentTokenRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 记住我 持久化方式</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPersistentTokenRepository</span> <span class="keyword">implements</span> <span class="title">PersistentTokenRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(getClass());</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RememberMeMapper remembermeMapper;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNewToken</span><span class="params">(PersistentRememberMeToken persistentRememberMeToken)</span> </span>&#123;</div><div class="line">        RememberMe rememberMe = <span class="keyword">new</span> RememberMe();</div><div class="line">        rememberMe.setUsername(persistentRememberMeToken.getUsername());</div><div class="line">        rememberMe.setSeries(persistentRememberMeToken.getSeries());</div><div class="line">        rememberMe.setDate(persistentRememberMeToken.getDate());</div><div class="line">        rememberMe.setTokenValue(persistentRememberMeToken.getTokenValue());</div><div class="line">        remembermeMapper.insert(rememberMe);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateToken</span><span class="params">(String s, String s1, Date date)</span> </span>&#123;</div><div class="line">        RememberMe rememberMe = <span class="keyword">new</span> RememberMe();</div><div class="line">        rememberMe.setUsername(<span class="string">""</span>);</div><div class="line">        rememberMe.setSeries(s);</div><div class="line">        rememberMe.setTokenValue(s1);</div><div class="line">        rememberMe.setDate(date);</div><div class="line">        remembermeMapper.updateByPK(rememberMe);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PersistentRememberMeToken <span class="title">getTokenForSeries</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        RememberMe rememberMe = remembermeMapper.selectByPK(s);</div><div class="line">        PersistentRememberMeToken persistentRememberMeToken =</div><div class="line">                <span class="keyword">new</span> PersistentRememberMeToken(rememberMe.getUsername(),</div><div class="line">                        rememberMe.getSeries(),</div><div class="line">                        rememberMe.getTokenValue(),</div><div class="line">                        rememberMe.getDate()</div><div class="line">                );</div><div class="line">        <span class="keyword">return</span> persistentRememberMeToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeUserTokens</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        remembermeMapper.deleteByPK(s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如果用注解的方式，及-RolesAllowed（jsr250）"><a href="#如果用注解的方式，及-RolesAllowed（jsr250）" class="headerlink" title="如果用注解的方式，及@RolesAllowed（jsr250）"></a>如果用注解的方式，及@RolesAllowed（jsr250）</h3><p>   那么务必将jsr250Enabled＝true在config中声明，然后再所需控制的方法上加上注解，<br>   jsr250有三个注解，分别是@RolesAllowed,@PermitAll,@DenyAll,功能跟名字一样，<br>   一目了然，如果有多个角色，可以@RolesAllowed({“ROLE_A”, “ROLE<em>B”}),这里角色的前缀<br>   一定是”ROLE</em>“,约定好的，就不要计较了。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>   使用过程中，总是下意识的按照Spring Security提供的思路去实现，无可厚非，但是我仔细琢磨后，<br>   觉得从便利性和实用方面考虑，每个方法上的注解要约定好名称，例如：</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@RolesAllowed(&#123;&quot;ROLE_roles:view&quot;&#125;)</div><div class="line">public void find&#123;...&#125;</div><div class="line"></div><div class="line">@RolesAllowed(&#123;&quot;ROLE_roles:update&quot;&#125;)</div><div class="line">public void update&#123;...&#125;</div><div class="line"></div><div class="line">@RolesAllowed(&#123;&quot;ROLE_roles:delete&quot;&#125;)</div><div class="line">public void delete&#123;...&#125;</div><div class="line"></div><div class="line">@RolesAllowed(&#123;&quot;ROLE_roles:create&quot;&#125;)</div><div class="line">public void create&#123;...&#125;</div><div class="line"></div><div class="line">`</div></pre></td></tr></table></figure>
<p>   这样，表面是把权限赋予了角色，还能Dynamic Resource，何乐而不为呢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;shiro可以完全解决有关安全的问题，但是项目大多使用的是Spring框架，所以没必要在引入其他依赖，
so，还是折腾下亲儿
    
    </summary>
    
      <category term="Java" scheme="http://www.nealma.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Spring-Security" scheme="http://www.nealma.com/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（三） 集成MyBatis</title>
    <link href="http://www.nealma.com/2016/04/29/spring-boot-3-mybatis/"/>
    <id>http://www.nealma.com/2016/04/29/spring-boot-3-mybatis/</id>
    <published>2016-04-29T03:46:45.000Z</published>
    <updated>2016-10-16T10:47:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis在国内一直很流行，在ORM框架中使用比例很高。<br>由于MyBatis不是Spring的亲生儿子，所以依赖的版本很发麻，不像其他的依赖，直接引入就可以，还得看版本。<br>经过几次尝试，下文给出的是可以正常使用的。</p>
<p>本记录使用的开发环境：<br>OS: Mac 10.11.6<br>IDE: idea<br>Build: maven</p>
<h3 id="POM依赖"><a href="#POM依赖" class="headerlink" title="POM依赖"></a>POM依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!-- properties --&gt;</div><div class="line">&lt;properties&gt;</div><div class="line">    &lt;spring.boot.mybatis&gt;1.0.2&lt;/spring.boot.mybatis&gt;</div><div class="line">    &lt;mybatis.version&gt;3.4.1&lt;/mybatis.version&gt;</div><div class="line">    &lt;mybatis.spring.version&gt;1.3.0&lt;/mybatis.spring.version&gt;</div><div class="line">&lt;/properties</div><div class="line">&lt;!-- mybatis --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!-- mybatis-spring --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;$&#123;mybatis.spring.version&#125;&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="属性配置application-properties"><a href="#属性配置application-properties" class="headerlink" title="属性配置application.properties"></a>属性配置application.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#datasource</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/db_name?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</div><div class="line">spring.datasource.username=******</div><div class="line">spring.datasource.password=******</div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line"></div><div class="line">#mybatis</div><div class="line">#mapper路径</div><div class="line">mybatis.mapperLocations=classpath*:**/mappers/*.xml</div><div class="line">#model包</div><div class="line">mybatis.typeAliasesPackage=com.xxxx.domain</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>是不是很简单，没有太多的配置，清爽多了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyBatis在国内一直很流行，在ORM框架中使用比例很高。&lt;br&gt;由于MyBatis不是Spring的亲生儿子，所以依赖的版本很发麻，不像其他的依赖，直接引入就可以，还得看版本。&lt;br&gt;经过几次尝试，下文给出的是可以正常使用的。&lt;/p&gt;
&lt;p&gt;本记录使用的开发环境：&lt;br
    
    </summary>
    
      <category term="Java" scheme="http://www.nealma.com/categories/Java/"/>
    
    
      <category term="MyBatis" scheme="http://www.nealma.com/tags/MyBatis/"/>
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（二） 集成springloaded</title>
    <link href="http://www.nealma.com/2016/04/28/spring-boot-2-hot-swap/"/>
    <id>http://www.nealma.com/2016/04/28/spring-boot-2-hot-swap/</id>
    <published>2016-04-28T03:46:45.000Z</published>
    <updated>2016-10-27T12:22:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>我在开发的时候，总是会及时对自己的程序进行测试，总是频繁的重启web server，容器不烦我们都觉得烦了。
福音来了，正好有springloaded，解决了我们的烦恼。
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>IDE: idea<br>Build: maven<br>spring-boot-version: 1.4.0.RELEASE</p>
<h3 id="POM依赖"><a href="#POM依赖" class="headerlink" title="POM依赖"></a>POM依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span></span></div></pre></td></tr></table></figure>
<h3 id="Maven-Plugin"><a href="#Maven-Plugin" class="headerlink" title="Maven Plugin"></a>Maven Plugin</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p> 一开始以为直接在maven plugin中加入依赖就可以了，而在实际当中没有任何动静，直到把devtools和springloaded加入依赖，才能如愿以偿。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;我在开发的时候，总是会及时对自己的程序进行测试，总是频繁的重启web server，容器不烦我们都觉得烦了。
福音来了，正好
    
    </summary>
    
      <category term="Java" scheme="http://www.nealma.com/categories/Java/"/>
    
    
      <category term="MyBatis" scheme="http://www.nealma.com/tags/MyBatis/"/>
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Vim Plugin 自动补全(NERDTree)</title>
    <link href="http://www.nealma.com/2016/04/26/vim-plugin-install-nerttree/"/>
    <id>http://www.nealma.com/2016/04/26/vim-plugin-install-nerttree/</id>
    <published>2016-04-26T04:46:45.000Z</published>
    <updated>2016-10-16T10:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vim在安装目录工具NERDTree的时候，遇到了坑。</p>
<p>本记录使用的开发环境：<br>OS: Mac</p>
<h3 id="其实也没啥，就是不知道怎么启用，哈哈"><a href="#其实也没啥，就是不知道怎么启用，哈哈" class="headerlink" title="其实也没啥，就是不知道怎么启用，哈哈"></a>其实也没啥，就是不知道怎么启用，哈哈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#进入vim</div><div class="line"></div><div class="line">:NERDTree ＃回车，就看到啦</div><div class="line"></div><div class="line">#Crtl + w 是前缀唤醒组合</div><div class="line"></div><div class="line">#左右切换</div><div class="line">h l </div><div class="line"></div><div class="line">#退出</div><div class="line">q</div><div class="line"></div><div class="line">#每次都需要输入NERDTree是不是很麻烦，别怕，可以很省事的</div><div class="line"></div><div class="line">#vim ~/.vimrc 加入</div><div class="line">nnoremap &lt;silent&gt; &lt;F5&gt; :NERDTree&lt;CR&gt;</div></pre></td></tr></table></figure>
<p>:D-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vim在安装目录工具NERDTree的时候，遇到了坑。&lt;/p&gt;
&lt;p&gt;本记录使用的开发环境：&lt;br&gt;OS: Mac&lt;/p&gt;
&lt;h3 id=&quot;其实也没啥，就是不知道怎么启用，哈哈&quot;&gt;&lt;a href=&quot;#其实也没啥，就是不知道怎么启用，哈哈&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="Vim" scheme="http://www.nealma.com/categories/Vim/"/>
    
    
      <category term="Vim" scheme="http://www.nealma.com/tags/Vim/"/>
    
      <category term="NERDTree" scheme="http://www.nealma.com/tags/NERDTree/"/>
    
  </entry>
  
  <entry>
    <title>Vim Plugin 自动补全(YouCompleteMe)</title>
    <link href="http://www.nealma.com/2016/04/26/vim-plugin-install-youcompleteme/"/>
    <id>http://www.nealma.com/2016/04/26/vim-plugin-install-youcompleteme/</id>
    <published>2016-04-26T04:46:45.000Z</published>
    <updated>2016-10-16T10:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vim在安装自动补全插件YouCompleteMe的时候，遇到了坑。</p>
<p>本记录使用的开发环境：<br>OS: Mac</p>
<h3 id="首先Vim版本过低，提示7-3"><a href="#首先Vim版本过低，提示7-3" class="headerlink" title="首先Vim版本过低，提示7.3+"></a>首先Vim版本过低，提示7.3+</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">brew install vim</div><div class="line"></div><div class="line">#安装完之后，查看版本还是7.3的，经过搜索解决办法，发现执行如下可以解决</div><div class="line">exec $SHELL</div><div class="line"></div><div class="line">#重启terminal</div></pre></td></tr></table></figure>
<h3 id="再次抱错"><a href="#再次抱错" class="headerlink" title="再次抱错"></a>再次抱错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">YouCompleteMe unavailable: No module named future</div></pre></td></tr></table></figure>
<p>这次是因为python的问题，<br>于是进入YouCompleteMe目录，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./install.py -all</div></pre></td></tr></table></figure>
<p>回车，这时提示你一些第三方依赖缺失，执行下面的命令,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule update --init --recursive</div></pre></td></tr></table></figure>
<p>我的网速不给力，需要很长时间，耐心等待吧，要不就干别的去的</p>
<p>完成之后，重新安装一遍</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim +PluginInstall</div></pre></td></tr></table></figure>
<p>:D-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vim在安装自动补全插件YouCompleteMe的时候，遇到了坑。&lt;/p&gt;
&lt;p&gt;本记录使用的开发环境：&lt;br&gt;OS: Mac&lt;/p&gt;
&lt;h3 id=&quot;首先Vim版本过低，提示7-3&quot;&gt;&lt;a href=&quot;#首先Vim版本过低，提示7-3&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="Vim" scheme="http://www.nealma.com/categories/Vim/"/>
    
    
      <category term="Vim" scheme="http://www.nealma.com/tags/Vim/"/>
    
      <category term="Plugin" scheme="http://www.nealma.com/tags/Plugin/"/>
    
  </entry>
  
</feed>
