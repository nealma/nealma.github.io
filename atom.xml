<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nealma.com</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nealma.com/"/>
  <updated>2017-07-13T15:45:52.000Z</updated>
  <id>http://www.nealma.com/</id>
  
  <author>
    <name>马英乘Neal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud | 服务注册与发现</title>
    <link href="http://www.nealma.com/2017/07/02/spring-cloud-2-euraka/"/>
    <id>http://www.nealma.com/2017/07/02/spring-cloud-2-euraka/</id>
    <published>2017-07-02T03:46:45.000Z</published>
    <updated>2017-07-13T15:45:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud为我构建分布式微服务系统提供了一站式的解决方案，其中服务注册与发现只是整个系统的一个模块，<br>是由eureka来承担，下面我们来看看如何使用吧</p>
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spring Cloud为我构建分布式微服务系统提供了一站式的解决方案，其中服务注册与发现只是整个系统的一个模块，<br>是由eureka来承担，下面我们来看看如何使用吧</p>
<p>用起来so easy, 普通的Spring Boot项目，使用@EnableEurekaServer注解，就启动了<br>一个服务注册中心，是不是很容易。当然了，避免不了添加以下依赖</p>
<p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA 2016.2<br>Build: Maven</p>
<h3 id="首先是eureka-server端-添加POM依赖"><a href="#首先是eureka-server端-添加POM依赖" class="headerlink" title="首先是eureka server端 添加POM依赖"></a>首先是eureka server端 添加POM依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;Dalston.SR1&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-eureka-server&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<p>application.yml配置如下(单机模式)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 8082</div><div class="line">  tomcat:</div><div class="line">    uri-encoding: utf-8</div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: eureka-server</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    appname: $&#123;spring.application.name&#125;</div><div class="line">  client:</div><div class="line">    registerWithEureka: false #是否将自身注册</div><div class="line">    fetchRegistry: false</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</div></pre></td></tr></table></figure></p>
<h3 id="在入口类加上注解-EnableEurekaServer，开启服务发现与注册中心"><a href="#在入口类加上注解-EnableEurekaServer，开启服务发现与注册中心" class="headerlink" title="在入口类加上注解@EnableEurekaServer，开启服务发现与注册中心"></a>在入口类加上注解@EnableEurekaServer，开启服务发现与注册中心</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableEurekaServer</div><div class="line">public class EurekaServerApplication &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(ConfigServerApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其次是eureka-client端-添加POM依赖"><a href="#其次是eureka-client端-添加POM依赖" class="headerlink" title="其次是eureka client端 添加POM依赖"></a>其次是eureka client端 添加POM依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;Dalston.SR1&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<h3 id="在入口类加上注解-EnableEurekaClient"><a href="#在入口类加上注解-EnableEurekaClient" class="headerlink" title="在入口类加上注解@EnableEurekaClient"></a>在入口类加上注解@EnableEurekaClient</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableEurekaClient</div><div class="line">public class EurekaClientApplication &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(ConfigServerApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>application.yml增加eureka的配置内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">eureka:</div><div class="line">  client:</div><div class="line">    service-url:</div><div class="line">      defaultZone: http://localhost:8082/eureka/</div><div class="line">  instance:</div><div class="line">    appname: $&#123;spring.application.name&#125;</div></pre></td></tr></table></figure></p>
<h3 id="EnableDiscoveryClient-和-EnableEurekaClient-区别"><a href="#EnableDiscoveryClient-和-EnableEurekaClient-区别" class="headerlink" title="EnableDiscoveryClient 和 EnableEurekaClient 区别"></a>EnableDiscoveryClient 和 EnableEurekaClient 区别</h3><p>SpringCLoud中的“Discovery Service”有多种实现，比如：eureka, consul, zookeeper。</p>
<p>1，@EnableDiscoveryClient注解是基于spring-cloud-commons依赖<br>2，@EnableEurekaClient注解是基于spring-cloud-netflix依赖，只能为eureka作用；</p>
<p>如果你添加了eureka，则它们的作用是一样的。</p>
<h3 id="客户端查看已注册的instance"><a href="#客户端查看已注册的instance" class="headerlink" title="客户端查看已注册的instance"></a>客户端查看已注册的instance</h3><p>在客户段创建如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class EurekaClientController &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private DiscoveryClient discoveryClient;</div><div class="line"></div><div class="line">    @RequestMapping(value = &quot;/admin/eureka/client/test1&quot;)</div><div class="line">    public String hi()&#123;</div><div class="line"></div><div class="line">        for( String s :  discoveryClient.getServices())&#123;</div><div class="line">            System.out.println(&quot;services &quot; + s);</div><div class="line">            List&lt;ServiceInstance&gt; serviceInstances =  discoveryClient.getInstances(s);</div><div class="line">            for(ServiceInstance si : serviceInstances)&#123;</div><div class="line">                System.out.println(&quot;    services:&quot; + s + &quot;:getHost()=&quot; + si.getHost());</div><div class="line">                System.out.println(&quot;    services:&quot; + s + &quot;:getPort()=&quot; + si.getPort());</div><div class="line">                System.out.println(&quot;    services:&quot; + s + &quot;:getServiceId()=&quot; + si.getServiceId());</div><div class="line">                System.out.println(&quot;    services:&quot; + s + &quot;:getUri()=&quot; + si.getUri());</div><div class="line">                System.out.println(&quot;    services:&quot; + s + &quot;:getMetadata()=&quot; + si.getMetadata());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return &quot;hi, :)~&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ip、主机名问题"><a href="#ip、主机名问题" class="headerlink" title="ip、主机名问题"></a>ip、主机名问题</h3><pre><code>在实际工作中，我们需要发现的服务实例为http[s]://ip:port的形式，但是eureka服务端默认
使用的是主机域名：port的格式，那是不是有办法变更呢？
那当然可以了，so easy.
只需在服务端 添加如下即可
</code></pre><pre><code>eureka:
 instance:
   prefer-ip-address: true
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Cloud为我构建分布式微服务系统提供了一站式的解决方案，其中服务注册与发现只是整个系统的一个模块，&lt;br&gt;是由eureka来承担，下面我们来看看如何使用吧&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://www.nealma.com/categories/Spring-Cloud/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://www.nealma.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud | 配置服务 2</title>
    <link href="http://www.nealma.com/2017/07/01/spring-cloud-1-config2/"/>
    <id>http://www.nealma.com/2017/07/01/spring-cloud-1-config2/</id>
    <published>2017-07-01T03:46:45.000Z</published>
    <updated>2017-07-11T09:42:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>上文我们了解了Config Server的基本使用，以及手动更新具体的服务，<br>但是现在的应用都是分布式，微服务会随着App的增多，管理会更难，更辛苦。怎么解放我们<br>的运维伙伴呢，我们慢慢来探索吧。</p>
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>git的方式对于我们程序员来说，非常熟悉和了解，易于上手。对于版本控制更是拿手，下面我们来看看<br>如何才能让每个App自己来感知和自动更新配置信息。</p>
<p>Spring Cloud为我们送来了Spring Cloud Bus消息总线，让每个App自动感知和更新配置信息，<br>这里需要借助RabbitMQ、Redis、Kafka等第三方工具。</p>
<p>接下来，让我们以rabbitMQ为例，看看如何使用吧。</p>
<p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA 2016.2<br>Build: Maven</p>
<h3 id="安装rabbitMQ"><a href="#安装rabbitMQ" class="headerlink" title="安装rabbitMQ"></a>安装rabbitMQ</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">brew install rabbitmq</div><div class="line"></div><div class="line">#run</div><div class="line">brew services start rebbitmq</div><div class="line"></div><div class="line">#通过浏览器查看信息</div><div class="line">http://localhost:15672</div><div class="line"></div><div class="line">#初始化时只有guest用户，可以在操控台创建一个新用户，切记点击新用户，为他授权，否则访问不了</div></pre></td></tr></table></figure>
<p>注意浏览器里和配置文件里使用的是不同的端口，分别是：15672、5672</p>
<p>###继前文，ConfigServer端我们需要增加依赖和配置信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  rabbitmq:</div><div class="line">    host: localhost</div><div class="line">    port: 5672</div><div class="line">    username: neal</div><div class="line">    password: neal</div></pre></td></tr></table></figure>
<h3 id="根据上一篇文章，改造client端"><a href="#根据上一篇文章，改造client端" class="headerlink" title="根据上一篇文章，改造client端"></a>根据上一篇文章，改造client端</h3><ul>
<li>首先引入依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;!-- 增加bus-amqp依赖 --&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<ul>
<li>配置文件增加rabbitmq内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line"> rabbitmq:</div><div class="line">   host: localhost</div><div class="line">   port: 5672</div><div class="line">   username: neal</div><div class="line">   password: neal</div></pre></td></tr></table></figure>
<h3 id="手动更新ConfigServer服务器（刷新方式）"><a href="#手动更新ConfigServer服务器（刷新方式）" class="headerlink" title="手动更新ConfigServer服务器（刷新方式）"></a>手动更新ConfigServer服务器（刷新方式）</h3><ul>
<li>全部更新</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v -XPOST &apos;http://localhost:8080/bus/refresh&apos;</div></pre></td></tr></table></figure>
<p>这个时候，其他客户端也会同步自动更新</p>
<ul>
<li>只更新指定客户端,destination=appName:port为要刷新的服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v -XPOST &apos;http://localhost:8080/bus/refresh?destination=appName:port&apos;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>好了，这下不需要手动刷新每一台服务了...
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上文我们了解了Config Server的基本使用，以及手动更新具体的服务，&lt;br&gt;但是现在的应用都是分布式，微服务会随着App的增多，管理会更难，更辛苦。怎么解放我们&lt;br&gt;的运维伙伴呢，我们慢慢来探索吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://www.nealma.com/categories/Spring-Cloud/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://www.nealma.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud | 配置服务 1</title>
    <link href="http://www.nealma.com/2017/06/30/spring-cloud-1-config/"/>
    <id>http://www.nealma.com/2017/06/30/spring-cloud-1-config/</id>
    <published>2017-06-30T03:46:45.000Z</published>
    <updated>2017-07-04T09:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot提供了application.[properties|yml]文件来提供默认配置，<br>简化了原来冗余的配置，但是随着环境和应用服务的增多，很难管理分散在各个项目中的配置，<br>但是，现在Spring Cloud 提供了 Config Server, 使其在分布式系统开发中输出外部配置的能力。<br>通过 Config Server，我们可以集中存储所有应用的配置文件</p>
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spring Boot提供了application.[properties|yml]文件来提供默认配置，<br>简化了原来冗余的配置，但是随着环境和应用服务的增多，很难管理分散在各个项目中的配置，<br>但是，现在Spring Cloud 提供了 Config Server, 使其在分布式系统开发中输出外部配置的能力。<br>通过 Config Server，我们可以集中存储所有应用的配置文件</p>
<p>Config Server 支持git或者在文件系统中放置配置文件，<br>可以通过以下格式来区分不同应用的不同配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/&#123;application&#125;/&#123;profile&#125;/&#123;label&#125;</div><div class="line">/&#123;application&#125;-&#123;profile&#125;.yml</div><div class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</div><div class="line">/&#123;application&#125;-&#123;profile&#125;.properties</div><div class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</div></pre></td></tr></table></figure></p>
<p>Spring Cloud 提供了注解@EnableConfigServer来启用配置服务</p>
<p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA 2016.2<br>Build: Maven</p>
<h3 id="添加POM依赖"><a href="#添加POM依赖" class="headerlink" title="添加POM依赖"></a>添加POM依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;Dalston.SR1&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<p>如果项目报依赖找不到，执行下面的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn -U clean install</div></pre></td></tr></table></figure></p>
<h3 id="在入口类加上注解-EnableConfigServer，开启配置服务"><a href="#在入口类加上注解-EnableConfigServer，开启配置服务" class="headerlink" title="在入口类加上注解@EnableConfigServer，开启配置服务"></a>在入口类加上注解@EnableConfigServer，开启配置服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableConfigServer</div><div class="line">public class ConfigServerApplication &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(ConfigServerApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="git方式的配置中心使用"><a href="#git方式的配置中心使用" class="headerlink" title="git方式的配置中心使用"></a>git方式的配置中心使用</h3><pre><code>Config Server使用git来配置，其实原理就是配置服务获取远程git的文件，存在app的本地host中
相关配置如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cloud:</div><div class="line">    config:</div><div class="line">      server:</div><div class="line">        git:</div><div class="line">          uri: git@git.oschina.net:x/y.git</div><div class="line">          clone-on-start: true</div><div class="line">          strict-host-key-checking: false</div></pre></td></tr></table></figure>
<p>git@git.oschina.net:x/y.git为配置中心的repo的配置文件的存储位置，<br>我们创建一个配置文件：application_name-env_name.yml<br>eg. configserver-dev.yml</p>
<p>启动项目后，我们可以通过如下url来访问：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/configserver/dev/master</div><div class="line">http://localhost:8080/configserver-dev.yml</div><div class="line">http://localhost:8080/master/configserver-dev.yml</div><div class="line">#json格式</div><div class="line">http://localhost:8080/master/configserver-dev.json</div><div class="line">#properties格式</div><div class="line">http://localhost:8080/master/configserver-dev.properties</div></pre></td></tr></table></figure>
<h3 id="这样很容易就能访问到配置信息，很恐怖，那怎么办呢？别担心，so-easy"><a href="#这样很容易就能访问到配置信息，很恐怖，那怎么办呢？别担心，so-easy" class="headerlink" title="这样很容易就能访问到配置信息，很恐怖，那怎么办呢？别担心，so easy."></a>这样很容易就能访问到配置信息，很恐怖，那怎么办呢？别担心，so easy.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">security:</div><div class="line">  user: </div><div class="line">    name: abc</div><div class="line">    password: xyz</div></pre></td></tr></table></figure>
<p>看你还能访问。</p>
<p>如果想要你的用户密码起作用，还得引入下面的依赖，你懂的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</div><div class="line">&lt;/dependency</div></pre></td></tr></table></figure></p>
<h3 id="client端如何使用"><a href="#client端如何使用" class="headerlink" title="client端如何使用"></a>client端如何使用</h3><ul>
<li>首先引入依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;Dalston.SR1&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-config-client&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="增加bootstraps-yml文件-如果开启了security请注意username和password"><a href="#增加bootstraps-yml文件-如果开启了security请注意username和password" class="headerlink" title="增加bootstraps.yml文件, 如果开启了security请注意username和password"></a>增加bootstraps.yml文件, 如果开启了security请注意username和password</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line"> application:</div><div class="line">   name: your app name</div><div class="line"> cloud:</div><div class="line">   config:</div><div class="line">     uri: http://localhost:8088 //你的 config server 服务</div><div class="line">     profile: dev</div><div class="line">     username: abc</div><div class="line">     password: xyz</div></pre></td></tr></table></figure>
<h3 id="手动更新"><a href="#手动更新" class="headerlink" title="手动更新"></a>手动更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v -XPOST &apos;http://localhost:8080/refresh&apos;</div></pre></td></tr></table></figure>
<p>这个时候，你可能会遇到这个问题，401权限问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt; X-Frame-Options: DENY</div><div class="line">&lt; Strict-Transport-Security: max-age=31536000 ; includeSubDomains</div><div class="line">&lt; WWW-Authenticate: Basic realm=&quot;Spring&quot;</div><div class="line">&lt; Location: http://localhost:8080/error/401.html</div></pre></td></tr></table></figure></p>
<p>这是因为actuator中POST方法相关的接口是受限的，如果你想免去鉴权，可以在配置文件中添加如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">management:</div><div class="line">  security:</div><div class="line">    enabled: false</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>这样一旦配置变更，客户端也不需要重启服务，可以动态更新了，然而还是需要手动来做/refresh的操作。</p>
<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><pre><code>通过以上配置，我们还不能动态更新配置，你会发现，我的git中文件有更新，
但是你的app不会及时更新，那需要额外的工作，且听下回分解 :)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot提供了application.[properties|yml]文件来提供默认配置，&lt;br&gt;简化了原来冗余的配置，但是随着环境和应用服务的增多，很难管理分散在各个项目中的配置，&lt;br&gt;但是，现在Spring Cloud 提供了 Config Server, 使其在分布式系统开发中输出外部配置的能力。&lt;br&gt;通过 Config Server，我们可以集中存储所有应用的配置文件&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://www.nealma.com/categories/Spring-Cloud/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://www.nealma.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript | jQuery 自定义插件</title>
    <link href="http://www.nealma.com/2017/06/24/js-1-jquery-extend/"/>
    <id>http://www.nealma.com/2017/06/24/js-1-jquery-extend/</id>
    <published>2017-06-24T03:46:45.000Z</published>
    <updated>2017-07-01T04:02:31.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>以前写过javascript，但都是临时更改，没怎么太研究怎么去写好，怎么去封装，还有jQuery，都是拿来即用，
根本就没想过去写插件，主要吧，都是作后端的内容，很少写前端代码。其实写写前端挺有意思的，顺便心血来潮，
整个jQuery插件玩玩：）～
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>以前写过javascript，但都是临时更改，没怎么太研究怎么去写好，怎么去封装，还有JQuery，都是拿来即用，
根本就没想过去写插件，主要吧，都是做后端的内容，很少写前端代码。其实写写前端挺有意思的，顺便心血来潮，
整个JQuery插件玩玩：）～

* $.fn.extend 当然这种方式只适用实例范围, 例如：$([class name | tag | et..]).hi(),可以调用
</code></pre><h3 id="无参插件"><a href="#无参插件" class="headerlink" title="无参插件"></a>无参插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$.fn.extend(&#123;</div><div class="line">	hi: function () &#123;</div><div class="line">	  alert(&quot;hello world.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>切记：为了不和其他插件对共享$这个符号的冲突，尽量用下面这个包起来，妥妥的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(function($)&#123;</div><div class="line">	</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<p>调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&quot;#id&quot;).hi();</div></pre></td></tr></table></figure></p>
<h3 id="有残参插件，当然这种方式只适用实例范围-例如：-class-name-tag-et-hi-可以调用"><a href="#有残参插件，当然这种方式只适用实例范围-例如：-class-name-tag-et-hi-可以调用" class="headerlink" title="有残参插件，当然这种方式只适用实例范围, 例如：$([class name | tag | et..]).hi(),可以调用"></a>有残参插件，当然这种方式只适用实例范围, 例如：$([class name | tag | et..]).hi(),可以调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$.fn.extend(&#123;</div><div class="line">	hi: function (options) &#123;</div><div class="line">	  var defaults=&#123;</div><div class="line">	      background:&apos;red&apos;</div><div class="line">	  &#125;;</div><div class="line">	  var opts = $.extend(defaults,options);//合并两个对象为一个，类似于java的copyProperties(original, target)</div><div class="line">	  $(this).css(&quot;background-color&quot;,opts.background);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>切记：为了不和其他插件对共享$这个符号的冲突，尽量用下面这个包起来，妥妥的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(function($)&#123;</div><div class="line">	</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&quot;#id&quot;).hi(&#123;&quot;background&quot;: &quot;red&quot;&#125;);</div></pre></td></tr></table></figure>
<h3 id="jQuery的链式调用"><a href="#jQuery的链式调用" class="headerlink" title="jQuery的链式调用"></a>jQuery的链式调用</h3><pre><code>大家都知道，也都在使用jQuery的链式调用，很优雅，那我们自己的插件可以这样调用吗？
能不能，我们来做个实验,直接执行如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&quot;#id&quot;).hi(&#123;&quot;background&quot;: &quot;red&quot;&#125;).html();</div></pre></td></tr></table></figure>
<pre><code>不好意思，你会看到令人厌烦的异常
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uncaught TypeError: Cannot read property &apos;html&apos; of undefined at &lt;anonymous&gt;:1:46</div></pre></td></tr></table></figure>
<pre><code>也就是说，我们自己的插件打破了jQuery的链式传递，怎么办呢？其实很简单，在函数最后添加如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">return this.each(function() &#123;</div><div class="line">  // Using return allows for chainability</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="最后完整代码"><a href="#最后完整代码" class="headerlink" title="最后完整代码"></a>最后完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(function($)&#123;</div><div class="line">  $.fn.extend(&#123;</div><div class="line">    hi: function (options) &#123;</div><div class="line">      var defaults=&#123;&#125;;</div><div class="line">      var opts = $.extend(defaults,options);</div><div class="line">      console.log(opts);</div><div class="line">      $(this).css(&quot;background-color&quot;, opts.background);</div><div class="line">      return this.each(function() &#123;</div><div class="line">        // Using return allows for chainability</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<h3 id="注意：如果你直接-hi-来调用，会抛出异常"><a href="#注意：如果你直接-hi-来调用，会抛出异常" class="headerlink" title="注意：如果你直接 $.hi() 来调用，会抛出异常"></a>注意：如果你直接 $.hi() 来调用，会抛出异常</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uncaught TypeError: $.hi is not a functionx at &lt;anonymous&gt;:1:3</div></pre></td></tr></table></figure>
<p>这也证实了hi方法只是赋予了选择器的实例上，那么我们想给$(jQuery)对象赋予自定义功能，该如何实现呢？</p>
<p>###jQuery类级别的自定义插件,也可以理解为静态方法，工具类。</p>
<pre><code>跟之前比较类似，如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(function($)&#123;</div><div class="line">  $.extend(&#123;</div><div class="line">    hiDate: function () &#123;</div><div class="line">      return new Date().toJSON().slice(0,10)</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<pre><code>调用方式
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.hiDate();</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>没事写写代码，写写后端，写写前端，哦，js已经不仅限于前端啦：）～
 :)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;以前写过javascript，但都是临时更改，没怎么太研究怎么去写好，怎么去封装，还有jQuery，都是拿来即用，
根本就没想过去写插件，主要吧，都是作后端的内容，很少写前端代码。其实写写前端挺有意思的，顺便心血来潮，
整个jQuery插件玩玩：）～
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Frontend" scheme="http://www.nealma.com/categories/Frontend/"/>
    
    
      <category term="JavaScript" scheme="http://www.nealma.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://www.nealma.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Nginx | ERR_CONTENT_LENGTH_MISMATCH</title>
    <link href="http://www.nealma.com/2017/06/04/nginx-example-work-3-temp-proxy/"/>
    <id>http://www.nealma.com/2017/06/04/nginx-example-work-3-temp-proxy/</id>
    <published>2017-06-04T03:46:45.000Z</published>
    <updated>2017-07-01T03:58:15.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>访问网页的时候，经常出现 net::ERR_CONTENT_LENGTH_MISMATCH这个问题，一开始也为是某些文件过大导致的，
还特意把大的资源文件放在CDN上，肯定不行了。
可是后来发现不管文件大小，都会偶尔报这个错，后来经过Google，才知道是nginx的问题，学无止境。
</code></pre><a id="more"></a>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><pre><code>nginx的工作进程对大文件做了缓存，存储在/var/lib/nginx/tmp/proxy下，通过查看error.log文件可以看到，
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2017/06/04 15:30:29 [crit] 24446#0: *21029 open() &quot;/var/lib/nginx/tmp/proxy/1/14/0000000141&quot; failed (13: Permission denied) while reading upstream,</div></pre></td></tr></table></figure>
<p>也即是nginx的启动进程用户没有权限访问proxy的目录，导致读取文件失败，可以变更nginx.conf中的user为nginx，若果<br>想使用自定义用户xxx，那需要给xxx授权，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown -R xxx /var/lib/nginx/tmp/proxy</div></pre></td></tr></table></figure></p>
<p>重新启动nginx, 问题解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;访问网页的时候，经常出现 net::ERR_CONTENT_LENGTH_MISMATCH这个问题，一开始也为是某些文件过大导致的，
还特意把大的资源文件放在CDN上，肯定不行了。
可是后来发现不管文件大小，都会偶尔报这个错，后来经过Google，才知道是nginx的问题，学无止境。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://www.nealma.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.nealma.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（十三) 事物处理 Transaction</title>
    <link href="http://www.nealma.com/2017/06/02/spring-boot-13-transaction/"/>
    <id>http://www.nealma.com/2017/06/02/spring-boot-13-transaction/</id>
    <published>2017-06-02T02:46:45.000Z</published>
    <updated>2017-08-23T06:14:18.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>SpringBoot的事务管理（jdbc、jpa、mybatis）
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>SpringBoot的事务管理（jdbc、jpa、mybatis）
Springboot内部提供的事务管理器是根据autoconfigure来进行决定的。
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA<br>Build: Maven</p>
<h3 id="触发不同的事物管理器"><a href="#触发不同的事物管理器" class="headerlink" title="触发不同的事物管理器"></a>触发不同的事物管理器</h3><ul>
<li>当使用jpa（pom中加入了spring-boot-starter-data-jpa），Springboot会构造一个JpaTransactionManager事务管理器；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#触发HibernateJpaAutoConfiguration（该类继承了JpaBaseConfiguration类）自动配置</div><div class="line">@Bean</div><div class="line">@ConditionalOnMissingBean(PlatformTransactionManager.class)</div><div class="line">public PlatformTransactionManager transactionManager() &#123;</div><div class="line">    return new JpaTransactionManager();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当我们使用jdbc(pom中加入了spring-boot-starter-jdbc），Springboot会构造一个DataSourceTransactionManager事物管理器；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#触发DataSourceTransactionManagerAutoConfiguration这个自动化配置</div><div class="line">@Bean</div><div class="line">@ConditionalOnMissingBean(&#123;PlatformTransactionManager.class&#125;)</div><div class="line">public DataSourceTransactionManager transactionManager(DataSourceProperties properties) &#123;</div><div class="line">    DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(this.dataSource);</div><div class="line">    if(this.transactionManagerCustomizers != null) &#123;</div><div class="line">        this.transactionManagerCustomizers.customize(transactionManager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return transactionManager;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两个接口都实现了PlatformTransactionManager这个接口，PlatformTransactionManager是spring事物管理的核心接口。</p>
<h3 id="手动配置事物管理器"><a href="#手动配置事物管理器" class="headerlink" title="手动配置事物管理器"></a>手动配置事物管理器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@ConditionalOnMissingBean(&#123;PlatformTransactionManager.class&#125;)</div></pre></td></tr></table></figure>
<p>在自动配置类中，我们发现@ConditionalOnMissingBean({PlatformTransactionManager.class})这个注解，什么意思呢？<br>就是如果我们手动配置了事物管理器，spring将不会再为我们构造事物管理器了。</p>
<h3 id="那如果我们使用的是mybatis，如何处理事物呢"><a href="#那如果我们使用的是mybatis，如何处理事物呢" class="headerlink" title="那如果我们使用的是mybatis，如何处理事物呢"></a>那如果我们使用的是mybatis，如何处理事物呢</h3><p>MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）</p>
<ul>
<li><p>JDBC - 直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务范围。</p>
</li>
<li><p>MANAGED - 让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。</p>
</li>
<li><p>SqlSessionFactory mybatis通过这个核心类来管理session，session进行提交和回滚。</p>
</li>
</ul>
<h3 id="使用Spring-MyBatis"><a href="#使用Spring-MyBatis" class="headerlink" title="使用Spring+MyBatis"></a>使用Spring+MyBatis</h3><p>大部分情况下，我们不会单独使用MyBatis，都会结合Spring来使用。这个时候，事物处理统统有Spring来管理</p>
<p>在与Spring、SpringBoot集成时，注意SqlSessionFactory和DataSourceTransactionManager必须给予同一个dataSource,<br>否则不能进行事物管理。</p>
<h3 id="举个列子"><a href="#举个列子" class="headerlink" title="举个列子"></a>举个列子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@MapperScan(DataSourceConfig.PACKAGE)</div><div class="line">public class DataSourceConfig &#123;</div><div class="line"></div><div class="line">    // 精确到 master 目录，以便跟其他数据源隔离</div><div class="line">    static final String PACKAGE = &quot;com.x.*.dao&quot;;</div><div class="line">    static final String MAPPER_LOCATION = &quot;classpath*:**/mappers/*.xml&quot;;</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</div><div class="line">    private String url;</div><div class="line">    @Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</div><div class="line">    private String username;</div><div class="line">    @Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</div><div class="line">    private String password;</div><div class="line">    @Value(&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;)</div><div class="line">    private String driver;</div><div class="line"></div><div class="line"></div><div class="line">    @Bean(name = &quot;dataSource&quot;)</div><div class="line">    public DataSource dataSource() &#123;</div><div class="line">        //DruidDataSource dataSource = new DruidDataSource();//alibaba druid datasource</div><div class="line">        DriverManagerDataSource dataSource = new DriverManagerDataSource();</div><div class="line">        dataSource.setDriverClassName(driver);</div><div class="line">        dataSource.setUrl(url);</div><div class="line">        dataSource.setUsername(username);</div><div class="line">        dataSource.setPassword(password);</div><div class="line">        return dataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean(name = &quot;transactionManager&quot;)</div><div class="line">    public DataSourceTransactionManager transactionManager() &#123;</div><div class="line">        return new DataSourceTransactionManager(dataSource());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean(name = &quot;sqlSessionFactory&quot;)</div><div class="line">    public SqlSessionFactory sqlSessionFactory(@Qualifier(&quot;dataSource&quot;) DataSource dataSource)</div><div class="line">            throws Exception &#123;</div><div class="line">        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</div><div class="line">        sessionFactory.setDataSource(dataSource);</div><div class="line">        sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver()</div><div class="line">                .getResources(DataSourceConfig.MAPPER_LOCATION));</div><div class="line">        return sessionFactory.getObject();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可以使用多个事物处理器"><a href="#可以使用多个事物处理器" class="headerlink" title="可以使用多个事物处理器()"></a>可以使用多个事物处理器()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class DatabaseConfiguration &#123;</div><div class="line"> </div><div class="line">    @Bean</div><div class="line">    public PlatformTransactionManager transactionManager1(EntityManagerFactory entityManagerFactory) &#123;</div><div class="line">        return new JpaTransactionManager(entityManagerFactory);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Bean</div><div class="line">    public PlatformTransactionManager transactionManager2(DataSource dataSource) &#123;</div><div class="line">        return new DataSourceTransactionManager(dataSource);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在具体使用-Transactional时需要制定处理器的名字"><a href="#在具体使用-Transactional时需要制定处理器的名字" class="headerlink" title="在具体使用@Transactional时需要制定处理器的名字"></a>在具体使用@Transactional时需要制定处理器的名字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># @Transactional(value=&quot;transactionManager&quot;, rollbackFor = Exception.class)</div><div class="line"># @Transactional</div><div class="line"></div><div class="line">@Transactional(value=&quot;transactionManager1&quot;)</div><div class="line">public void insert() &#123;</div><div class="line">    insert();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="继承TransactionManagementConfigurer类，覆盖默认事物处理器方法"><a href="#继承TransactionManagementConfigurer类，覆盖默认事物处理器方法" class="headerlink" title="继承TransactionManagementConfigurer类，覆盖默认事物处理器方法"></a>继承TransactionManagementConfigurer类，覆盖默认事物处理器方法</h3><p>**在Spring容器中，我们手工注解@Bean 将被优先加载，框架不会重新实例化其他的 PlatformTransactionManager 实现类。</p>
<p>然后在Service中，被 @Transactional 注解的方法，将支持事务。如果注解在类上，则整个类的所有方法都默认支持事务。</p>
<p>对于同一个工程中存在多个事务管理器要怎么处理，请看下面的实例，具体说明请看代码中的注释。**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 实现接口 TransactionManagementConfigurer 方法，其返回值代表在拥有多个事务管理器的情况下默认使用的事务管理器</div><div class="line">    @Override</div><div class="line">    public PlatformTransactionManager annotationDrivenTransactionManager() &#123;</div><div class="line">        return txManager2;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>如果Spring容器中存在多个 PlatformTransactionManager 实例，并且没有实现接口 TransactionManagementConfigurer 指定默认值，在我们在方法上使用注解 @Transactional 的时候，就必须要用value指定，如果不指定，则会抛出异常。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;SpringBoot的事务管理（jdbc、jpa、mybatis）
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://www.nealma.com/categories/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Transaction" scheme="http://www.nealma.com/tags/Transaction/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（十二) 获取request和session</title>
    <link href="http://www.nealma.com/2017/06/01/spring-boot-12-not-thread/"/>
    <id>http://www.nealma.com/2017/06/01/spring-boot-12-not-thread/</id>
    <published>2017-06-01T03:46:45.000Z</published>
    <updated>2017-07-01T03:58:31.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Spring Boot中获取全局request，咩有controller中获取，而是在一个工具类中，
这次也不知是为什么之前根本不需要配置的，但是就是会报一个错，看看神马影响的呢？
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>Spring Boot中获取全局request，咩有controller中获取，而是在一个工具类中，
 这次也不知是为什么之前根本不需要配置的，但是就是会报一个错，看看神马影响的呢？
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA<br>Build: Maven</p>
<h3 id="获取request"><a href="#获取request" class="headerlink" title="获取request"></a>获取request</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static HttpServletRequest getRequest()&#123;</div><div class="line">    ServletRequestAttributes servletRequestAttributes = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();</div><div class="line">    return servletRequestAttributes.getRequest();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可恶的异常来了"><a href="#可恶的异常来了" class="headerlink" title="可恶的异常来了"></a>可恶的异常来了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java spring——Getting a &apos;No thread bound request found&apos; error from spring in my web app.</div><div class="line">In this case, use RequestContextListener or RequestContextFilter to expose the current request.</div></pre></td></tr></table></figure>
<p>###解决方案: 在MvcConfig中注入RequestContextListener<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Bean</div><div class="line">public RequestContextListener requestContextListener() &#123;</div><div class="line">    return new RequestContextListener();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>慢慢趟，总有趟完的时候...
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Spring Boot中获取全局request，咩有controller中获取，而是在一个工具类中，
这次也不知是为什么之前根本不需要配置的，但是就是会报一个错，看看神马影响的呢？
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://www.nealma.com/categories/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Session" scheme="http://www.nealma.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>【Response Body】服务器端返回值大小</title>
    <link href="http://www.nealma.com/2017/05/01/work-problerm-9-pk12/"/>
    <id>http://www.nealma.com/2017/05/01/work-problerm-9-pk12/</id>
    <published>2017-05-01T04:46:45.000Z</published>
    <updated>2017-08-21T10:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>DerInputStream.getLength(): lengthTag=111, too big
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>在开发微信企业付款时，在load证书时，发生DerInputStream.getLength(): lengthTag=111, too big错误，
查了很多才知道，是maven打包惹的祸。
</code></pre><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#在pom.xml中加入这个配置即可</div><div class="line">&lt;plugin&gt;</div><div class="line">    &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</div><div class="line">    &lt;configuration&gt;</div><div class="line">        &lt;encoding&gt;UTF-8&lt;/encoding&gt;</div><div class="line">        &lt;!-- 过滤后缀为pem、pfx的证书文件 --&gt;</div><div class="line">        &lt;nonFilteredFileExtensions&gt;</div><div class="line">            &lt;nonFilteredFileExtension&gt;pem&lt;/nonFilteredFileExtension&gt;</div><div class="line">            &lt;nonFilteredFileExtension&gt;p12&lt;/nonFilteredFileExtension&gt;</div><div class="line">            &lt;nonFilteredFileExtension&gt;pfx&lt;/nonFilteredFileExtension&gt;</div><div class="line">        &lt;/nonFilteredFileExtensions&gt;</div><div class="line">    &lt;/configuration&gt;</div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>:)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;DerInputStream.getLength(): lengthTag=111, too big
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="work" scheme="http://www.nealma.com/categories/work/"/>
    
    
      <category term="java" scheme="http://www.nealma.com/tags/java/"/>
    
      <category term="maven" scheme="http://www.nealma.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>【Response Body】服务器端返回值大小</title>
    <link href="http://www.nealma.com/2017/05/01/work-problerm-8-server-response-size/"/>
    <id>http://www.nealma.com/2017/05/01/work-problerm-8-server-response-size/</id>
    <published>2017-05-01T03:46:45.000Z</published>
    <updated>2017-07-01T03:20:30.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>有的时候，你会遇到很奇怪的事情，就是请求一切正常，但服务器端就是没有返回值。
特别是上传文件的时候，那到底发生了什么呢？
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>客户端请求报文的大小和服务器端响应报文的大小，在我们的实际项目中，可能会涉及到一下几个方面
</code></pre><h3 id="Nginx设置"><a href="#Nginx设置" class="headerlink" title="Nginx设置"></a>Nginx设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在http中</div><div class="line">client_max_body_size 30m;</div></pre></td></tr></table></figure>
<h3 id="数据库设置"><a href="#数据库设置" class="headerlink" title="数据库设置"></a>数据库设置</h3><ul>
<li><p>字段长度设置</p>
</li>
<li><p>数据库报文大小设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#在my.cnf中,在[mysqld]段或者mysql的server配置段进行修改。</div><div class="line">max_allowed_packet = 20M</div><div class="line"></div><div class="line">#如果找不到，可以查询</div><div class="line">mysql --help |grep my.cnf</div><div class="line"></div><div class="line">#也可以更改全局变量</div><div class="line">set global max_allowed_packet = 2*1024*1024*10</div><div class="line"></div><div class="line">#不需要重启，可以查看</div><div class="line">show VARIABLES like &apos;%max_allowed_packet%&apos;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>:)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;有的时候，你会遇到很奇怪的事情，就是请求一切正常，但服务器端就是没有返回值。
特别是上传文件的时候，那到底发生了什么呢？
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="work" scheme="http://www.nealma.com/categories/work/"/>
    
    
      <category term="Nginx" scheme="http://www.nealma.com/tags/Nginx/"/>
    
      <category term="大杂烩" scheme="http://www.nealma.com/tags/%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    
      <category term="数据库" scheme="http://www.nealma.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（十一) not fat jar ,but jar</title>
    <link href="http://www.nealma.com/2017/04/19/spring-boot-11-not-fat-jar/"/>
    <id>http://www.nealma.com/2017/04/19/spring-boot-11-not-fat-jar/</id>
    <published>2017-04-19T03:46:45.000Z</published>
    <updated>2017-07-01T03:58:02.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>使用spring boot有一段时间了，想抽离出公共的内容，以备后用。
于是写个两个jar，分别为A 和 B，B引用A，发现引用失败，出现&quot;cannot resolve symbol xxx&quot;,
才发现Spring Boot默认都是打包成“fat jar”，那怎么才能打包成普通的jar呢？
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>使用spring boot有一段时间了，想抽离出公共的内容，以备后用。
于是写个两个jar，分别为A 和 B，B引用A，发现引用失败，出现&quot;cannot resolve symbol xxx&quot;,
才发现Spring Boot默认都是打包成“fat jar”，那怎么才能打包成普通的jar呢？
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA<br>Build: Maven</p>
<h3 id="直接下面就OK了"><a href="#直接下面就OK了" class="headerlink" title="直接下面就OK了"></a>直接下面就OK了</h3><p><a href="http://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-create-a-nonexecutable-jar" target="_blank" rel="external">可以直接看官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">	&lt;configuration&gt;</div><div class="line">		&lt;classifier&gt;exec&lt;/classifier&gt;</div><div class="line">	&lt;/configuration&gt;</div><div class="line">&lt;/plugin&gt;</div><div class="line">&lt;plugin&gt;</div><div class="line">	&lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</div><div class="line">	&lt;executions&gt;</div><div class="line">		&lt;execution&gt;</div><div class="line">			&lt;id&gt;exec&lt;/id&gt;</div><div class="line">			&lt;phase&gt;package&lt;/phase&gt;</div><div class="line">			&lt;goals&gt;</div><div class="line">				&lt;goal&gt;jar&lt;/goal&gt;</div><div class="line">			&lt;/goals&gt;</div><div class="line">			&lt;configuration&gt;</div><div class="line">				&lt;classifier&gt;exec&lt;/classifier&gt;</div><div class="line">			&lt;/configuration&gt;</div><div class="line">		&lt;/execution&gt;</div><div class="line">		&lt;execution&gt;</div><div class="line">			&lt;phase&gt;package&lt;/phase&gt;</div><div class="line">			&lt;goals&gt;</div><div class="line">				&lt;goal&gt;jar&lt;/goal&gt;</div><div class="line">			&lt;/goals&gt;</div><div class="line">			&lt;configuration&gt;</div><div class="line">				&lt;!-- Need this to ensure application.yml is excluded --&gt;</div><div class="line">				&lt;forceCreation&gt;true&lt;/forceCreation&gt;</div><div class="line">				&lt;excludes&gt;</div><div class="line">					&lt;exclude&gt;application.yml&lt;/exclude&gt;</div><div class="line">				&lt;/excludes&gt;</div><div class="line">			&lt;/configuration&gt;</div><div class="line">		&lt;/execution&gt;</div><div class="line">	&lt;/executions&gt;</div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>使用频率最多的都列举出来了，够我们用了。
但是程序员就像偷懒，不想每个domain都要写个XxxRepository,写个基础BaseRepository岂不是节省好多事呢，有空在写吧...
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;使用spring boot有一段时间了，想抽离出公共的内容，以备后用。
于是写个两个jar，分别为A 和 B，B引用A，发现引用失败，出现&amp;quot;cannot resolve symbol xxx&amp;quot;,
才发现Spring Boot默认都是打包成“fat jar”，那怎么才能打包成普通的jar呢？
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://www.nealma.com/categories/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="module" scheme="http://www.nealma.com/tags/module/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（十) JPA Hibernate</title>
    <link href="http://www.nealma.com/2017/04/18/spring-boot-10-jpa-hibernate/"/>
    <id>http://www.nealma.com/2017/04/18/spring-boot-10-jpa-hibernate/</id>
    <published>2017-04-18T03:46:45.000Z</published>
    <updated>2017-07-01T03:58:07.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>一直都在用MyBatis，感觉很好用，自己也熟悉。考虑到Spring Boot天生支持JPA，而且Hibernate也支持
分布式事务，有成熟的解决方案，值得研究一下
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>一直都在用MyBatis，感觉很好用，自己也熟悉。考虑到Spring Boot天生支持JPA，而且Hibernate也支持
分布式事务，有成熟的解决方案，值得研究一下
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA<br>Build: Maven</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">	&lt;scope&gt;runtime&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="JPA-Config"><a href="#JPA-Config" class="headerlink" title="JPA Config"></a>JPA Config</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Order(Ordered.HIGHEST_PRECEDENCE)</div><div class="line">@Configuration</div><div class="line">@EnableTransactionManagement(proxyTargetClass = true)</div><div class="line">@EnableJpaRepositories(basePackages = &quot;tech.lingyi.**.dao&quot;)</div><div class="line">@EntityScan(basePackages = &quot;tech.lingyi.**.entity&quot;)</div><div class="line">public class JpaConfiguration &#123;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor()&#123;</div><div class="line">        return new PersistenceExceptionTranslationPostProcessor();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="业务接口"><a href="#业务接口" class="headerlink" title="业务接口"></a>业务接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Repository</div><div class="line">public interface UserRepository extends JpaRepository&lt;User, Long&gt; &#123;</div><div class="line">    Page&lt;User&gt; findAll(Specification&lt;User&gt; s, Pageable pageRequest);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>JPA 实现了几乎我们所用的所有方法，你需要继承就可以了，提高了生产效率，解放了广大码农，可以去约妹子了。
</code></pre><h3 id="JPA-CRUD-和-联合条件、分页查询"><a href="#JPA-CRUD-和-联合条件、分页查询" class="headerlink" title="JPA CRUD 和 联合条件、分页查询"></a>JPA CRUD 和 联合条件、分页查询</h3><ul>
<li><p>insert</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public User insert()&#123;</div><div class="line">	User user = new User();</div><div class="line">	user.setNickname(&quot;neal&quot;);</div><div class="line">	return userRepository.save(user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>updateByPK</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public User updateByPK()&#123;</div><div class="line">	User user = new User();</div><div class="line">    user.setId(31L);</div><div class="line">	user.setNickname(&quot;lingyi&quot;);</div><div class="line">	return userRepository.save(user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>deleteByPK</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void deleteByPK(Long id)&#123;</div><div class="line">	userRepository.delete(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>selectByPK</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public User selectByPK(Long id)&#123;</div><div class="line">	return userRepository.findOne(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>findPage 只分页 没有条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public void  findPage()&#123;</div><div class="line">	Pageable pageable = new PageRequest(0,10, new Sort(</div><div class="line">									new Sort.Order(Sort.Direction.ASC, &quot;username&quot;),</div><div class="line">									new Sort.Order(Sort.Direction.DESC, &quot;id&quot;))</div><div class="line">	);</div><div class="line">	Page&lt;User&gt; page = userRepository.findAll(pageable);</div><div class="line">	Assert.notNull(page);</div><div class="line">	for (User user : page.getContent())&#123;</div><div class="line">		LOGGER.info(&quot;id=&#123;&#125;, name=&#123;&#125;, department=&#123;&#125;, role=&#123;&#125;&quot;, user.getId(), user.getNickname(), user.getUsername(),&quot;&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>findPage 只分页 没有条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public void  findPage()&#123;</div><div class="line">	Pageable pageable = new PageRequest(0,10, new Sort(</div><div class="line">									new Sort.Order(Sort.Direction.ASC, &quot;username&quot;),</div><div class="line">									new Sort.Order(Sort.Direction.DESC, &quot;id&quot;))</div><div class="line">	);</div><div class="line">	Page&lt;User&gt; page = userRepository.findAll(pageable);</div><div class="line">	Assert.notNull(page);</div><div class="line">	for (User user : page.getContent())&#123;</div><div class="line">		LOGGER.info(&quot;id=&#123;&#125;, name=&#123;&#125;, department=&#123;&#125;, role=&#123;&#125;&quot;, user.getId(), user.getNickname(), user.getUsername(),&quot;&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>findCriteria, findCriteriaV2 两种方式 关联条件分页查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public Page&lt;User&gt; findCriteria(final User user, int page, int pageSize) throws Exception &#123;</div><div class="line">	Sort sort = new Sort(Sort.Direction.DESC, &quot;id&quot;);</div><div class="line">	Pageable pageable  =  new PageRequest(page, pageSize, sort);</div><div class="line"></div><div class="line">	return userRepository.findAll((root, query, builder) -&gt; &#123;</div><div class="line">        List&lt;Predicate&gt; predicates = new ArrayList&lt;&gt;();</div><div class="line">        if(null != user.getUsername())&#123;</div><div class="line">            predicates.add(builder.equal(root.get(&quot;username&quot;).as(Long.class), user.getUsername()));</div><div class="line">        &#125;</div><div class="line">        if(null != user.getNickname())&#123;</div><div class="line">            predicates.add(builder.equal(root.get(&quot;nickname&quot;).as(String.class), user.getNickname()));</div><div class="line">        &#125;</div><div class="line">        query.where(predicates.toArray(new Predicate[predicates.size()]));</div><div class="line">        return query.getRestriction();</div><div class="line">    &#125;, pageable);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>OR<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public Page&lt;User&gt; findCriteriaV2(final User user, int page, int pageSize) throws Exception &#123;</div><div class="line">	Sort sort = new Sort(Sort.Direction.DESC, &quot;id&quot;);</div><div class="line">	Pageable pageable  =  new PageRequest(page, pageSize, sort);</div><div class="line"></div><div class="line">	return userRepository.findAll((root, query, builder) -&gt; &#123;</div><div class="line">		Predicate p1 = builder.equal(root.get(&quot;username&quot;).as(String.class), user.getUsername());</div><div class="line">		Predicate p2 = builder.equal(root.get(&quot;nickname&quot;).as(Long.class), user.getNickname());</div><div class="line"></div><div class="line">		query.where(builder.and(p1, p2));</div><div class="line">		return query.getRestriction();</div><div class="line">	&#125;, pageable);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>使用频率最多的都列举出来了，够我们用了。
但是程序员就像偷懒，不想每个domain都要写个XxxRepository,写个基础BaseRepository岂不是节省好多事呢，有空在写吧...
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;一直都在用MyBatis，感觉很好用，自己也熟悉。考虑到Spring Boot天生支持JPA，而且Hibernate也支持
分布式事务，有成熟的解决方案，值得研究一下
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://www.nealma.com/categories/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Hibernate" scheme="http://www.nealma.com/tags/Hibernate/"/>
    
      <category term="JPA" scheme="http://www.nealma.com/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>【微信公众平台】自动回复机器人</title>
    <link href="http://www.nealma.com/2017/03/01/work-problerm-7-wx-mp-robot/"/>
    <id>http://www.nealma.com/2017/03/01/work-problerm-7-wx-mp-robot/</id>
    <published>2017-03-01T03:46:45.000Z</published>
    <updated>2017-07-08T13:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>微信公众号后台java开发实现自动回复机器人
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>很早之前写过微信公众平台消息自动接收的项目，现在重新捡起来，还有点忘了，故此写一篇记录，防止老年痴呆。
</code></pre><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><p>注册微信公众号。</p>
</li>
<li><p>注册百度图灵机器人。（<a href="http://www.tuling123.com/）" target="_blank" rel="external">http://www.tuling123.com/）</a></p>
</li>
<li><p>配置微信公众号服务器验证，注意验证的接口方法是GET</p>
</li>
</ul>
<p>1）在开发的基本配置下，填写控制器servlet访问的路径。</p>
<p>2）token随意写，不过要和后台一致</p>
<p>3）选择明文</p>
<p>4）随机选个字符串</p>
<p>5) token验证和消息处理是同一个接口URI的不同的METHOD，valid是GET方法，handle是POST</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>百度图灵机器人可以直接选择微信公众号机器人，只要授权就可以了。
过成功遇到： 启用后台服务器接口消息的功能后，公众号的菜单没有了，还不知道怎么能两者兼得

 :)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;微信公众号后台java开发实现自动回复机器人
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="work" scheme="http://www.nealma.com/categories/work/"/>
    
    
      <category term="大杂烩" scheme="http://www.nealma.com/tags/%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    
      <category term="微信" scheme="http://www.nealma.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="公众号" scheme="http://www.nealma.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="机器人" scheme="http://www.nealma.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
      <category term="java" scheme="http://www.nealma.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【IDEA】cannot resolve syambol xxx</title>
    <link href="http://www.nealma.com/2017/01/01/work-problerm-6-idea-cannot-resolve-syambol/"/>
    <id>http://www.nealma.com/2017/01/01/work-problerm-6-idea-cannot-resolve-syambol/</id>
    <published>2017-01-01T03:46:45.000Z</published>
    <updated>2017-04-18T04:20:25.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>cannot resolve syambol xxx
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>解决方法如下：<br>点击菜单中的 “File” -&gt; “Invalidate Caches / Restart”，然后点击对话框中的 “Invalidate and Restart”，清空 cache 并且重启。语法就会正确的高亮了。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>还会陆续遇到各种坑，慢慢填吧...
 :)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;cannot resolve syambol xxx
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="work" scheme="http://www.nealma.com/categories/work/"/>
    
    
      <category term="MySQL" scheme="http://www.nealma.com/tags/MySQL/"/>
    
      <category term="大杂烩" scheme="http://www.nealma.com/tags/%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    
      <category term="sql" scheme="http://www.nealma.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>常用的sql操作</title>
    <link href="http://www.nealma.com/2017/01/01/work-problerm-5-mysql-common-operate/"/>
    <id>http://www.nealma.com/2017/01/01/work-problerm-5-mysql-common-operate/</id>
    <published>2017-01-01T03:46:45.000Z</published>
    <updated>2017-03-09T01:51:58.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>频繁的sql操作，总结一些经常用的。
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>频繁的sql操作，总结一些经常用的。
</code></pre><h3 id="删除表中某个唯一约束"><a href="#删除表中某个唯一约束" class="headerlink" title="删除表中某个唯一约束"></a>删除表中某个唯一约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DROP INDEX index_name ON tbl_name</div><div class="line"></div><div class="line">OR</div><div class="line"></div><div class="line">ALTER TABLE tbl_name DROP INDEX index_name</div></pre></td></tr></table></figure>
<h3 id="MySQL-查找所有的父级或子集"><a href="#MySQL-查找所有的父级或子集" class="headerlink" title="MySQL 查找所有的父级或子集"></a>MySQL 查找所有的父级或子集</h3><p>表结构及Demo数据<br>user_id  pid</p>
<p>  B</p>
<ul>
<li>查找所有的父级（包含本身）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">SELECT T2.user_id</div><div class="line">            FROM (</div><div class="line">                  SELECT</div><div class="line">                    @r AS _id,</div><div class="line">                    (SELECT @r := pid FROM relations WHERE user_id = _id) AS pid,</div><div class="line">                    @l := @l + 1 AS lvl FROM (SELECT @r := 5, @l := 0) vars,</div><div class="line">                    relations h WHERE @r &lt;&gt; 0 AND pid &gt; 0</div><div class="line">                 ) T1 JOIN relations T2 ON T1._id = T2.user_id ORDER BY T1.lvl DESC</div></pre></td></tr></table></figure>
<ul>
<li>查找所有的子类（不包含本身）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SELECT uesr_id FROM</div><div class="line">  (</div><div class="line">    SELECT * FROM relations where pid &gt; 0 ORDER BY pid, uesr_id DESC</div><div class="line">  ) realname_sorted,</div><div class="line">  (SELECT @pv := 1) initialisation</div><div class="line">  WHERE (FIND_IN_SET(pid,@pv)&gt;0 And @pv := concat(@pv, &apos;,&apos;, uesr_id))</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>还会陆续遇到各种坑，慢慢填吧...
 :)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;频繁的sql操作，总结一些经常用的。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="work" scheme="http://www.nealma.com/categories/work/"/>
    
    
      <category term="MySQL" scheme="http://www.nealma.com/tags/MySQL/"/>
    
      <category term="大杂烩" scheme="http://www.nealma.com/tags/%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    
      <category term="sql" scheme="http://www.nealma.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7（六）购买阿里云ECS并安装Centos7.2镜像后要做的事儿</title>
    <link href="http://www.nealma.com/2016/12/29/centos-72-5-set-hostname/"/>
    <id>http://www.nealma.com/2016/12/29/centos-72-5-set-hostname/</id>
    <published>2016-12-29T03:46:49.000Z</published>
    <updated>2016-12-29T06:41:15.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>当我们购买完ECS，使用的事Centos7系统，并且是官方的镜像。总要做一些必要的操作，在此做个总结。
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>当我们购买完ECS，使用的事Centos7系统，并且是官方的镜像。总要做一些必要的操作，在此做个总结。
</code></pre><h3 id="yum-update-y-amp-amp-sudo-yum-upgrade-y"><a href="#yum-update-y-amp-amp-sudo-yum-upgrade-y" class="headerlink" title="yum update -y &amp;&amp; sudo yum upgrade -y"></a>yum update -y &amp;&amp; sudo yum upgrade -y</h3><h3 id="更改hostname"><a href="#更改hostname" class="headerlink" title="更改hostname"></a>更改hostname</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># hostnamectl --static set-hostname nealma</div><div class="line"></div><div class="line"># logout</div></pre></td></tr></table></figure>
<h3 id="安装基本工具"><a href="#安装基本工具" class="headerlink" title="安装基本工具"></a>安装基本工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install -y vim tree htop wget telnet curl unzip gcc pcre-devel zlib-devel perl-devel</div></pre></td></tr></table></figure>
<h3 id="替换-etc-locale-conf-的内容，解决LC-CTYPE-cannot-change-locale-UTF-8"><a href="#替换-etc-locale-conf-的内容，解决LC-CTYPE-cannot-change-locale-UTF-8" class="headerlink" title="替换 /etc/locale.conf 的内容，解决LC_CTYPE: cannot change locale (UTF-8)"></a>替换 /etc/locale.conf 的内容，解决LC_CTYPE: cannot change locale (UTF-8)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LANG=&quot;en_US.utf8&quot;</div><div class="line">LC_CTYPE=&quot;en_US.utf8&quot;</div><div class="line"></div><div class="line"># sudo source /etc/locale.conf</div></pre></td></tr></table></figure>
<h3 id="升级openssl"><a href="#升级openssl" class="headerlink" title="升级openssl"></a>升级openssl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src</div><div class="line"># wget https://www.openssl.org/source/openssl-1.1.0c.tar.gz</div><div class="line"># tar zxvf openssl-1.1.0c.tar.gz</div><div class="line"></div><div class="line"># cd openssl-1.1.0c</div><div class="line"># ./config</div><div class="line"># make</div><div class="line"># make test</div><div class="line"># make install</div><div class="line"></div><div class="line"># mv /usr/bin/openssl /usr/bin/openssl.old</div><div class="line"># ln -s /usr/local/bin/openssl /usr/bin/openssl</div><div class="line"></div><div class="line"># openssl version</div></pre></td></tr></table></figure>
<h3 id="解决openssl-error-while-loading-shared-libraries-libssl-so-1-1-cannot-open-shared-object-file-No-such-file-or-directory错误"><a href="#解决openssl-error-while-loading-shared-libraries-libssl-so-1-1-cannot-open-shared-object-file-No-such-file-or-directory错误" class="headerlink" title="解决openssl: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory错误"></a>解决openssl: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/lib64/libssl.so.1.1 /usr/lib64/libssl.so.1.1</div><div class="line">ln -s /usr/local/lib64/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1</div></pre></td></tr></table></figure>
<h3 id="创建普通用户"><a href="#创建普通用户" class="headerlink" title="创建普通用户"></a>创建普通用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># useradd nealma</div><div class="line">...</div><div class="line">参考前面一篇《CentOS 添加用户》</div></pre></td></tr></table></figure>
<h3 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">参考前面一篇 《CentOS7（一）Java环境搭建》</div></pre></td></tr></table></figure>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">参考前面一篇 《Nginx Configuration》</div><div class="line"></div><div class="line">Or use yum</div><div class="line"></div><div class="line">$ sudo yum install -y nginx</div><div class="line"></div><div class="line">$ sudo nginx -t</div><div class="line"></div><div class="line">$ sudo systemctl start nginx</div><div class="line"></div><div class="line">$ sudo systemctl stop nginx</div><div class="line"></div><div class="line">$ sudo systemctl restart nginx</div><div class="line"></div><div class="line">$ sudo systemctl enable nginx</div></pre></td></tr></table></figure>
<h3 id="阿里云控制台"><a href="#阿里云控制台" class="headerlink" title="阿里云控制台"></a>阿里云控制台</h3><ul>
<li>开通SLB</li>
<li>配置域名A记录</li>
<li>禁止外网访问 安全组</li>
</ul>
<h3 id="追加1-有用户反映首先应该有挂载磁盘"><a href="#追加1-有用户反映首先应该有挂载磁盘" class="headerlink" title="追加1 有用户反映首先应该有挂载磁盘"></a>追加1 有用户反映首先应该有挂载磁盘</h3><p><a href="https://help.aliyun.com/document_detail/25426.html?spm=5176.7738005.2.1.tHI6Uc" target="_blank" rel="external">直接参考阿里云文档</a></p>
<p>我直接使用了xfs文件系统，没有用文档上的ext3</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>随时增加后续内容</p>
<p>:)~</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;当我们购买完ECS，使用的事Centos7系统，并且是官方的镜像。总要做一些必要的操作，在此做个总结。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.nealma.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="http://www.nealma.com/tags/CentOS/"/>
    
      <category term="Linux" scheme="http://www.nealma.com/tags/Linux/"/>
    
      <category term="阿里云" scheme="http://www.nealma.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="ECS" scheme="http://www.nealma.com/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题（四） Maven 国内镜像 阿里云</title>
    <link href="http://www.nealma.com/2016/12/12/work-problerm-4-aliyun-maven-repo/"/>
    <id>http://www.nealma.com/2016/12/12/work-problerm-4-aliyun-maven-repo/</id>
    <published>2016-12-12T03:46:45.000Z</published>
    <updated>2016-12-12T16:14:13.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>今天在服务器上使用maven部署服务，我尼玛快疯疯了，一个jar文件真是慢如蜗牛，于是想换成一个速度快点的，
搜索之后，看到阿里云最近开放了Maven镜像库，那就试试吧，感谢啊，速度嗖嗖的.
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>今天在服务器上使用maven部署服务，我尼玛快疯疯了，一个jar文件真是慢如蜗牛，于是想换成一个速度快点的，
搜索之后，看到阿里云最近开放了Maven镜像库，那就试试吧，感谢啊，速度嗖嗖的.
</code></pre><h3 id="阿里云公开的中央仓库，亲测好用到哭"><a href="#阿里云公开的中央仓库，亲测好用到哭" class="headerlink" title="阿里云公开的中央仓库，亲测好用到哭"></a>阿里云公开的中央仓库，亲测好用到哭</h3><pre><code>修改maven根目录下的conf文件夹中的setting.xml文件，在mirrorms内添加如下内容：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;mirror&gt;</div><div class="line">   &lt;id&gt;alimaven&lt;/id&gt;</div><div class="line">   &lt;name&gt;aliyun maven&lt;/name&gt;</div><div class="line">   &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</div><div class="line">   &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </div><div class="line"> &lt;/mirror&gt;</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>我只有感谢感谢在感谢啦...
 :)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;今天在服务器上使用maven部署服务，我尼玛快疯疯了，一个jar文件真是慢如蜗牛，于是想换成一个速度快点的，
搜索之后，看到阿里云最近开放了Maven镜像库，那就试试吧，感谢啊，速度嗖嗖的.
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="work" scheme="http://www.nealma.com/categories/work/"/>
    
    
      <category term="阿里云" scheme="http://www.nealma.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="大杂烩" scheme="http://www.nealma.com/tags/%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    
      <category term="Maven" scheme="http://www.nealma.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题 (三) 微信支付</title>
    <link href="http://www.nealma.com/2016/12/12/work-problerm-3-wxpay/"/>
    <id>http://www.nealma.com/2016/12/12/work-problerm-3-wxpay/</id>
    <published>2016-12-12T02:46:45.000Z</published>
    <updated>2017-05-27T06:33:15.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>微信获取用户信息和微信H5支付
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>微信获取用户、ticket信息和微信H5支付
</code></pre><h3 id="微信获取ticket信息"><a href="#微信获取ticket信息" class="headerlink" title="微信获取ticket信息"></a>微信获取ticket信息</h3><ul>
<li><p>获取access_token</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=appid&amp;secret=appsecret</div></pre></td></tr></table></figure>
<p>  返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;access_token&quot;: &quot;xxxxx&quot;,</div><div class="line">    &quot;expires_in&quot;: 7200</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取jsapi_ticket</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://api.weixin.qq.com/cgi-bin/ticket/getticket?type=jsapi&amp;access_token=xxxxxx</div></pre></td></tr></table></figure>
<p>  返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;errcode&quot;: 0,</div><div class="line">    &quot;errmsg&quot;: &quot;ok&quot;,</div><div class="line">    &quot;ticket&quot;: &quot;sM4AOVdWfPE4DxkXGEs8VDd_c-Q_htialcX-c6Dxm8PROfcj2rA58GClUKytzCXuUGbwQLPTgdG0dPciNIv70A&quot;,</div><div class="line">    &quot;expires_in&quot;: 7200</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="微信H5支付流程"><a href="#微信H5支付流程" class="headerlink" title="微信H5支付流程"></a>微信H5支付流程</h3><ul>
<li>获取code</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=xxx&amp;redirect_uri=http://test.ruitaowang.com/test&amp;response_type=code&amp;scope=snsapi_base</div><div class="line"></div><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=xxx&amp;redirect_uri=http://test.ruitaowang.com/wap/index&amp;response_type=code&amp;scope=snsapi_base</div><div class="line"></div><div class="line"># SCOPE : snsapi_base ,  snsapi_userinfo</div><div class="line"></div><div class="line">#返回值：</div><div class="line"></div><div class="line">http://test.ruitaowang.com/test?code=041JgA1q0382ir1Z0p0q0OZh1q0JgA1F&amp;state=</div></pre></td></tr></table></figure>
<ul>
<li>获取openid<br>获取code后，请求以下链接获取access_token：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">https://api.weixin.qq.com/sns/oauth2/access_token?appid=xxx&amp;secret=xxx&amp;code=021IDZDZ1PpbNX0vkHFZ1GqpEZ1IDZD3&amp;grant_type=authorization_code</div><div class="line"></div><div class="line">#返回值：</div><div class="line">&#123;</div><div class="line">	&quot;access_token&quot;:&quot;xxx&quot;,</div><div class="line">	&quot;expires_in&quot;:7200,</div><div class="line">	&quot;refresh_token&quot;:&quot;xxxx&quot;,</div><div class="line">	&quot;openid&quot;:&quot;xxx&quot;,</div><div class="line">	&quot;scope&quot;:&quot;snsapi_base&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#如果获取code的时候，scope=snsapi_userinfo,这种是需要用户登陆确认的，此处返回的值相应的多一些</div><div class="line"> &#123;</div><div class="line">	 &quot;access_token&quot;:&quot;xxxx&quot;,</div><div class="line">	 &quot;expires_in&quot;:7200,</div><div class="line">	 &quot;refresh_token&quot;:&quot;xxxx&quot;,</div><div class="line">	 &quot;openid&quot;:&quot;xxxx&quot;,</div><div class="line">	 &quot;scope&quot;:&quot;snsapi_userinfo&quot;,</div><div class="line">	 &quot;unionid&quot;:&quot;xxx&quot;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>拉取用户信息(需scope为 snsapi_userinfo)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#http：GET（请使用https协议）</div><div class="line">#https://api.weixin.qq.com/sns/userinfo?access_token=EHtVZcvhD6x475HJ2ukUc0u3BqiMdjJ2gc9x-j2fil4i63M-aS9qHVmcHxVw19tLdalzo8VjxIJzMyuIJKIiis1h2JoZmy5wRp9IWwiHxRab3cDu-SxQHSm10h47bHyVRKYeAEALES&amp;openid=OPENID&amp;lang=zh_CN</div><div class="line"></div><div class="line">#返回值</div><div class="line"></div><div class="line">&#123;</div><div class="line">	&quot;openid&quot;:&quot;xxxx&quot;,</div><div class="line">	&quot;nickname&quot;:&quot;neal&quot;,</div><div class="line">	&quot;sex&quot;:1,</div><div class="line">	&quot;language&quot;:&quot;zh_CN&quot;,</div><div class="line">	&quot;city&quot;:&quot;朝阳&quot;,</div><div class="line">	&quot;province&quot;:&quot;北京&quot;,</div><div class="line">	&quot;country&quot;:&quot;中国&quot;,</div><div class="line">	&quot;headimgurl&quot;:&quot;http:\/\/wx.qlogo.cn\/mmopen\/Aqtvh6YDJ6TZnQs24nyymaKibaYMqLlj6X4zvQQwL0icn2GOUAPxPrx6iaePr30syO9zQsibKLCb8WIuLS0H879caA\/0&quot;,</div><div class="line">	&quot;privilege&quot;:[],</div><div class="line">	&quot;unionid&quot;:&quot;xxxx&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>统一下单接口,获取prepay_id</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">http://api.weixin.qq.com/cgi-bin/ticket/getticket?type=jsapi&amp;access_token=EHtVZcvhD6x475HJ2ukUc0u3BqiMdjJ2gc9x-j2fil4i63M-aS9qHVmcHxVw19tLdalzo8VjxIJzMyuIJKIiis1h2JoZmy5wRp9IWwiHxRab3cDu-SxQHSm10h47bHyVRKYeAEALES</div><div class="line"></div><div class="line">＃https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_1</div><div class="line"></div><div class="line">＃这里在服务端接口返回值中文会出现乱码，主要是body字段。也是坑了我好长的时间，因为我在本地开发的时候都正常，</div><div class="line">  部署到服务器就不行了，body字段是非中文没啥问题，但是一旦是中文就会失败。一开始以为是tomcat的问题，可是server.conf已经</div><div class="line">  是utf8的了，那就是微信API的问题，考虑对传入的字符进行String编码，所有的转码都是过了，还是不幸。</div><div class="line"></div><div class="line">  到底是那里出问题了，于是检查了下服务器的系统字符设置，locale -a,</div><div class="line">  发现，有警告。</div><div class="line">  第一感觉是系统的字符设置除了问题</div><div class="line">  于是各种Google,都是说设置en_US.UTF-8,可是看到Centos7 里面都是xxx.utf8</div><div class="line">  我试着把修改vim /etc/locale.conf如下：</div><div class="line"></div><div class="line">  LANG=&quot;en_US.utf8&quot;</div><div class="line">  LC_CTYPE=&quot;en_US.utf8&quot;</div><div class="line"></div><div class="line">  source /etc/locale.conf</div><div class="line"></div><div class="line">  #这下真好了，哎人生处处是大坑啊,我填，我填，其实这个问题对乱码的问题没有半毛钱关系，后来才知道的。</div><div class="line"></div><div class="line">  ##后续 有个地方是要更改的 那就是Tomcat</div><div class="line">  #server.conf配置</div><div class="line">	&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</div><div class="line">               connectionTimeout=&quot;20000&quot;</div><div class="line">               URIEncoding=&quot;UTF-8&quot;</div><div class="line">               redirectPort=&quot;8443&quot; /&gt;</div><div class="line"></div><div class="line">  #catalina.sh配置</div><div class="line">  JAVA_OPTS=&quot;$JAVA_OPTS -Dfile.encoding=utf-8&quot;</div></pre></td></tr></table></figure>
<ul>
<li>网页端调起支付API</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6</div><div class="line"></div><div class="line">function onBridgeReady()&#123;</div><div class="line">   WeixinJSBridge.invoke(</div><div class="line">       &apos;getBrandWCPayRequest&apos;, &#123;</div><div class="line">           &quot;appId&quot; ： &quot;xxx&quot;,     //公众号名称，由商户传入     </div><div class="line">           &quot;timeStamp&quot;：&quot; 1395712654&quot;,         //时间戳，自1970年以来的秒数     </div><div class="line">           &quot;nonceStr&quot; ： &quot;e61463f8efa94090b1f366cccfbbb444&quot;, //随机串     </div><div class="line">           &quot;package&quot; ： &quot;prepay_id=u802345jgfjsdfgsdg888&quot;,     </div><div class="line">           &quot;signType&quot; ： &quot;MD5&quot;,         //微信签名方式：     </div><div class="line">           &quot;paySign&quot; ： &quot;70EA570631E4BB79628FBCA90534C63FF7FADD89&quot; //微信签名,注意key要追加到参数尾部</div><div class="line">       &#125;,</div><div class="line">       function(res)&#123;     </div><div class="line">           if(res.err_msg == &quot;get_brand_wcpay_request：ok&quot; ) &#123;&#125;     // 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回    ok，但并不保证它绝对可靠。 </div><div class="line">       &#125;</div><div class="line">   ); </div><div class="line">&#125;</div><div class="line">if (typeof WeixinJSBridge == &quot;undefined&quot;)&#123;</div><div class="line">   if( document.addEventListener )&#123;</div><div class="line">       document.addEventListener(&apos;WeixinJSBridgeReady&apos;, onBridgeReady, false);</div><div class="line">   &#125;else if (document.attachEvent)&#123;</div><div class="line">       document.attachEvent(&apos;WeixinJSBridgeReady&apos;, onBridgeReady); </div><div class="line">       document.attachEvent(&apos;onWeixinJSBridgeReady&apos;, onBridgeReady);</div><div class="line">   &#125;</div><div class="line">&#125;else&#123;</div><div class="line">   onBridgeReady();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通知接口"><a href="#通知接口" class="headerlink" title="通知接口"></a>通知接口</h3><p>首先设置notify_url,必须为公众号后台设置的授支付url.<br>你的notify_url的接受方法必须是POST,<br>返回值是xml结构</p>
<h3 id="接口权限-网页授权"><a href="#接口权限-网页授权" class="headerlink" title="接口权限 网页授权"></a>接口权限 网页授权</h3><p>开发 -&gt; 开发者工具 -&gt; 绑定开发者微信账号</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>在调试接口的时候，最耗费时间的是在网页端调起支付API,前前后后弄了两天，好狼狈啊！！！
主要是折在了paySign上，看文档根本就没有key的事，可是签名的时候，
还得在排序好的参数后架上key=xxx,然后在MD5，总算是让我可以好好睡一觉了


 :)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;微信获取用户信息和微信H5支付
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="work" scheme="http://www.nealma.com/categories/work/"/>
    
    
      <category term="大杂烩" scheme="http://www.nealma.com/tags/%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题 (二) Ajax重复提交</title>
    <link href="http://www.nealma.com/2016/11/26/work-problerm-2/"/>
    <id>http://www.nealma.com/2016/11/26/work-problerm-2/</id>
    <published>2016-11-26T03:46:45.000Z</published>
    <updated>2016-12-11T08:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>最近也不知道写点啥，工作任务太饱和了，遇到些小问题，做个总结
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>最近也不知道写点啥，工作任务太饱和了，遇到些小问题，做个总结
</code></pre><h3 id="Linux-使用cp-rf-总是提醒是否覆盖"><a href="#Linux-使用cp-rf-总是提醒是否覆盖" class="headerlink" title="Linux 使用cp -rf 总是提醒是否覆盖"></a>Linux 使用cp -rf 总是提醒是否覆盖</h3><pre><code>刚觉很奇怪，rf本来就是要强制覆盖的，为什么还总是提醒呢？Google之后，才知道原来是别名在作怪。
通过alias命令可以看到,我们执行cp命令，其实是执行的cp -i, 所以无论我们怎么-rf加参数，总是提示。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@apple]# alias</div><div class="line">alias cp=&apos;cp -i&apos;</div><div class="line">alias egrep=&apos;egrep --color=auto&apos;</div><div class="line">alias fgrep=&apos;fgrep --color=auto&apos;</div><div class="line">alias grep=&apos;grep --color=auto&apos;</div><div class="line">alias l.=&apos;ls -d .* --color=auto&apos;</div><div class="line">alias ll=&apos;ls -l --color=auto&apos;</div><div class="line">alias ls=&apos;ls --color=auto&apos;</div><div class="line">alias mv=&apos;mv -i&apos;</div><div class="line">alias rm=&apos;rm -i&apos;</div><div class="line">alias which=&apos;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&apos;</div></pre></td></tr></table></figure>
<pre><code>解决办法：

打开~/.bashrc文件，注释掉即可。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#alias cp=&apos;cp -i&apos;</div></pre></td></tr></table></figure>
<pre><code>或者这样：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/cp</div></pre></td></tr></table></figure>
<h3 id="Ajax重复提交的问题"><a href="#Ajax重复提交的问题" class="headerlink" title="Ajax重复提交的问题"></a>Ajax重复提交的问题</h3><pre><code>我们在使用ajax调用接口，异步提交的时候，特别是在网络环境不好的时候，会在短时间内，连续提交多次，
导致数据库中出现很多垃圾数据，首先是客户端的限制措施。
</code></pre><ul>
<li>使用jQuery.ajaxPrefilter，其实是个过滤器，如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">var pendingRequests = &#123;&#125;;</div><div class="line">jQuery.ajaxPrefilter(function( options, originalOptions, jqXHR ) &#123;</div><div class="line">    var key = originalOptions.url+&quot;_&quot;+originalOptions.type.toUpperCase();</div><div class="line">    console.log(key)</div><div class="line">    if (!pendingRequests[key]</div><div class="line">            || (pendingRequests[key] &amp;&amp; originalOptions.type.toUpperCase() !=&apos;POST&apos;)) &#123;</div><div class="line">        pendingRequests[key] = jqXHR;</div><div class="line">        console.log(&apos;start&apos;);</div><div class="line">    &#125;else&#123;</div><div class="line">        jqXHR.abort();    //放弃后触发的提交</div><div class="line">        //pendingRequests[key].abort();   // 放弃先触发的提交</div><div class="line">        console.log(&apos;abort&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var complete = options.complete;</div><div class="line">    options.complete = function(jqXHR, textStatus) &#123;</div><div class="line">        console.log(&apos;complete&apos;);</div><div class="line">        //TODO: pendingRequests[key] = null;</div><div class="line">        setTimeout(function () &#123;</div><div class="line">            pendingRequests[key] = null;</div><div class="line">        &#125;, 10000);</div><div class="line">        if (jQuery.isFunction(complete)) &#123;</div><div class="line">            complete.apply(this, arguments);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>服务器端限制</li>
</ul>
<p>…</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>夜长长，路漫漫...
 :)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;最近也不知道写点啥，工作任务太饱和了，遇到些小问题，做个总结
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="work" scheme="http://www.nealma.com/categories/work/"/>
    
    
      <category term="大杂烩" scheme="http://www.nealma.com/tags/%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题（一） Spring MVC Restfull API</title>
    <link href="http://www.nealma.com/2016/11/26/work-problerm-1/"/>
    <id>http://www.nealma.com/2016/11/26/work-problerm-1/</id>
    <published>2016-11-26T03:46:45.000Z</published>
    <updated>2016-12-31T12:06:51.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>最近也不知道写点啥，工作任务太饱和了，遇到些小问题，做个总结
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>最近也不知道写点啥，工作任务太饱和了，遇到些小问题，做个总结
</code></pre><h3 id="MyBatis整型的问题"><a href="#MyBatis整型的问题" class="headerlink" title="MyBatis整型的问题"></a>MyBatis整型的问题</h3><pre><code>再一次工作中，一个实体的成员变量是整数型，我传递了0给mapper，奇怪的事情发生了。
mapper总是认为这个变量为null。前前后后花了好长时间，最后还是Google的结果。看来遇到问题不能
自己去一步一步去深挖，还得借助Google啊（不知道是不适合所有）。

原来MyBatis对于整型类型如果值为0，会当做null来处理。（不知道作者是出于什么原因）

解决办法：

加强判断
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;if test=&quot;categoryName != null and categoryName != &apos;&apos; or categoryName == 0&quot;&gt;</div></pre></td></tr></table></figure>
<h3 id="Spring-MVC的问题"><a href="#Spring-MVC的问题" class="headerlink" title="Spring MVC的问题"></a>Spring MVC的问题</h3><p>spring mvc put方法请求，ajax必须指定dataType: “json”<br>    在设计Restful接口的时候，其中Controller里面的PUT方法，前台html中使用ajax提交表单,很正常不过。<br>    可是在后台始终得不到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$.ajax(</div><div class="line">	&#123;</div><div class="line">	    url: API,</div><div class="line">	    type: &quot;PUT&quot;,</div><div class="line">	    data: &#123;k : v&#125;,</div><div class="line">	    async: false,</div><div class="line">	    success: function (data, textStatus, jqXHR) &#123;</div><div class="line">	        //TODO:</div><div class="line">	    &#125;,</div><div class="line">	    error: function (jqXHR, textStatus, errorThrown) &#123;</div><div class="line">	    	//TODO:</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<pre><code>抓取request的header，如下：
</code></pre><p><img src="/images/put-method.png" alt=""></p>
<pre><code>给ajax加入如下dataType参数，值为“json”，这样问题解决了，Controller成功的获得了参数。
We did it。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$.ajax(</div><div class="line">	&#123;</div><div class="line">	    url: API,</div><div class="line">	    type: &quot;PUT&quot;,</div><div class="line">	    data: &#123;k : v&#125;,</div><div class="line">	    dataType: &quot;json&quot;,</div><div class="line">	    async: false,</div><div class="line">	    success: function (data, textStatus, jqXHR) &#123;</div><div class="line">	        //TODO:</div><div class="line">	    &#125;,</div><div class="line">	    error: function (jqXHR, textStatus, errorThrown) &#123;</div><div class="line">	    	//TODO:</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<pre><code>抓取request的header，如下：
</code></pre><p><img src="/images/put-method-json.png" alt=""></p>
<pre><code>从两处标记可以看出，Accept的两次值不一样；Accept的值直接影响Controller的consumes,
Spring会根据Accept来对Request的参数做相应的处理。
</code></pre><h3 id="XMLHttpRequest-cannot-load-http-yourdomain-com-api-addresses-Response-to-preflight-request-doesn’t-pass-access-control-check-The-‘Access-Control-Allow-Origin’-header-contains-multiple-values-‘http-localhost-8080-’-but-only-one-is-allowed-Origin-‘http-localhost-8080‘-is-therefore-not-allowed-access"><a href="#XMLHttpRequest-cannot-load-http-yourdomain-com-api-addresses-Response-to-preflight-request-doesn’t-pass-access-control-check-The-‘Access-Control-Allow-Origin’-header-contains-multiple-values-‘http-localhost-8080-’-but-only-one-is-allowed-Origin-‘http-localhost-8080‘-is-therefore-not-allowed-access" class="headerlink" title="XMLHttpRequest cannot load http://yourdomain.com/api/addresses. Response to preflight request doesn’t pass access control check: The ‘Access-Control-Allow-Origin’ header contains multiple values ‘http://localhost:8080, *’, but only one is allowed. Origin ‘http://localhost:8080‘ is therefore not allowed access."></a>XMLHttpRequest cannot load <a href="http://yourdomain.com/api/addresses" target="_blank" rel="external">http://yourdomain.com/api/addresses</a>. Response to preflight request doesn’t pass access control check: The ‘Access-Control-Allow-Origin’ header contains multiple values ‘<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>, *’, but only one is allowed. Origin ‘<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>‘ is therefore not allowed access.</h3><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><pre><code>还会陆续遇到各种坑，慢慢填吧...
 :)~
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;最近也不知道写点啥，工作任务太饱和了，遇到些小问题，做个总结
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="work" scheme="http://www.nealma.com/categories/work/"/>
    
    
      <category term="大杂烩" scheme="http://www.nealma.com/tags/%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot（九) 微服务发布、部署</title>
    <link href="http://www.nealma.com/2016/11/05/spring-boot-9-package-and-deploy/"/>
    <id>http://www.nealma.com/2016/11/05/spring-boot-9-package-and-deploy/</id>
    <published>2016-11-05T03:46:45.000Z</published>
    <updated>2017-07-01T03:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>有关部署，我们平时最多的就是package成war，然后放到Tomcat的webappp路径下，
Spring Boot 提供了直接打包成fat-jar或者war的功能，很方便...
</code></pre><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>有关部署，我们平时最多的就是package成war，然后放到Tomcat的webappp路径下，
Spring Boot 提供了直接打包成fat-jar或者war的功能，很方便...
</code></pre><p>开发环境：<br>OS: Mac 10.11.6<br>IDE: IDEA<br>Build: Maven</p>
<h3 id="Web项目，注意"><a href="#Web项目，注意" class="headerlink" title="Web项目，注意"></a>Web项目，注意</h3><pre><code>如果是Web项目，使用的thymeleaf模版，那么你的静态资源和模版文件都是放在了默认的目录，如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">src/main/resources</div><div class="line">├── static</div><div class="line">│   ├── favicon.png</div><div class="line">│   └── web</div><div class="line">└── templates</div><div class="line">    ├── error</div><div class="line">    └── web</div></pre></td></tr></table></figure>
<pre><code>很简单，直接如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mvn clean package </div><div class="line">java －jar xxx.jar</div></pre></td></tr></table></figure>
<pre><code>如果你变更了静态资源和模版的目录，此时这种方式运行是有问题的，找不到leaf的模版文件。
需要更改默认配置为你现在对应的目录结构，具体如何做，我还没试过，如果你有实践过，
可以回复我，谢谢...
//TODO:
</code></pre><h3 id="传统war，tomcat容器"><a href="#传统war，tomcat容器" class="headerlink" title="传统war，tomcat容器"></a>传统war，tomcat容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#打包成war</div><div class="line">mvn clean package</div><div class="line"></div><div class="line">#删除tomcat_home/webapps下的所有文件</div><div class="line">rm -rf tomcat_home/webapps/*</div><div class="line"></div><div class="line">#把war包copy到tomcat_home/webapps下</div><div class="line">mv project.war tomcat_home/webapps/ROOT.war</div><div class="line"></div><div class="line">sh tomcat_home/bin/startup.sh</div></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;有关部署，我们平时最多的就是package成war，然后放到Tomcat的webappp路径下，
Spring Boot 提供了直接打包成fat-jar或者war的功能，很方便...
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://www.nealma.com/categories/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://www.nealma.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.nealma.com/tags/Spring/"/>
    
      <category term="Spring-Boot" scheme="http://www.nealma.com/tags/Spring-Boot/"/>
    
      <category term="Deploy" scheme="http://www.nealma.com/tags/Deploy/"/>
    
  </entry>
  
</feed>
